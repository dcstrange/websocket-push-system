[
    {
        "operation": "insert",
        "update_fields": "",
        "meta_data": {
            "type": "node",
            "id": "0",
            "labels": [
                "File"
            ]
        },
        "properties": {
            "name": "file_ops.c",
            "file_hash": "",
            "semantic_explanation": "",
            "id": 5,
            "source_code": "/* file_ops.c */\n#include \"file_types.h\"\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n\n// 声明从utils.c导入的函数\nextern int validate_path(const char *path);\nextern int allocate_blocks(int num_blocks);\n\n/*\ncreate_file(函数): 在指定目录中创建新的空文件。\n\n功能描述:\n- 在父目录中创建具有指定文件名和权限的新文件\n- 初始化文件元数据，包括类型、大小和时间戳\n- 文件创建时不分配数据块，初始大小为0\n\n参数:\n- parent_dir: 要在其中创建文件的目录\n- filename: 新文件的名称\n- permissions: 要应用的读/写/执行权限\n\n返回值:\n- SUCCESS: 文件创建成功\n- ERR_DISK_FULL: 目录已达到最大文件数限制\n- ERR_INVALID_PATH: 文件名长度超过限制\n- ERR_FILE_EXISTS: 同名文件已存在\n\n依赖的已解释节点:\n- MAX_FILES_PER_DIR常量(目录容量限制)\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- ERR_DISK_FULL常量(空间不足错误码)\n- ERR_INVALID_PATH常量(路径无效错误码)\n- ERR_FILE_EXISTS常量(文件已存在错误码)\n- SUCCESS常量(成功状态码)\n- file_entry_t结构(文件元数据表示)\n- FILE_TYPE_REGULAR常量(常规文件类型标识)\n- directory_t结构(目录内容表示)\n*/\nint create_file(directory_t *parent_dir, const char *filename, file_permissions_t permissions) {\n    // 检查目录是否已满\n    if (parent_dir->file_count >= MAX_FILES_PER_DIR) {\n        return ERR_DISK_FULL;\n    }\n    \n    // 检查文件名长度\n    if (strlen(filename) >= MAX_FILENAME_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // 检查文件是否已存在\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0) {\n            return ERR_FILE_EXISTS;\n        }\n    }\n    \n    // 创建新文件项\n    file_entry_t *new_file = &parent_dir->files[parent_dir->file_count];\n    strcpy(new_file->name, filename);\n    new_file->type = FILE_TYPE_REGULAR;\n    new_file->size = 0;\n    new_file->permissions = permissions;\n    new_file->created_time = time(NULL);\n    new_file->modified_time = new_file->created_time;\n    \n    // 增加目录文件计数\n    parent_dir->file_count++;\n    \n    return SUCCESS;\n}\n\n/*\nread_file(函数): 从文件中读取数据。\n\n功能描述:\n- 在目录中定位指定文件\n- 验证请求的读取权限和范围\n- 从文件的指定偏移位置读取数据\n\n参数:\n- parent_dir: 包含目标文件的目录\n- filename: 要读取的文件名\n- buffer: 存放读取数据的内存缓冲区\n- size: 要读取的最大字节数\n- offset: 文件内开始读取的位置(字节偏移)\n\n返回值:\n- 正数: 实际读取的字节数\n- ERR_FILE_NOT_FOUND: 指定文件不存在\n- ERR_PERMISSION_DENIED: 缺少读取权限\n\n依赖的已解释节点:\n- ERR_FILE_NOT_FOUND常量(文件不存在错误码)\n- ERR_PERMISSION_DENIED常量(权限不足错误码)\n- file_entry_t结构(文件元数据表示)\n- FILE_TYPE_REGULAR常量(常规文件类型标识)\n- directory_t结构(目录内容表示)\n*/\nint read_file(directory_t *parent_dir, const char *filename, void *buffer, size_t size, size_t offset) {\n    // 查找文件\n    file_entry_t *file = NULL;\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0 && \n            parent_dir->files[i].type == FILE_TYPE_REGULAR) {\n            file = &parent_dir->files[i];\n            break;\n        }\n    }\n    \n    if (!file) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // 检查读取权限\n    if (!file->permissions.read) {\n        return ERR_PERMISSION_DENIED;\n    }\n    \n    // 检查读取范围是否有效\n    if (offset >= file->size) {\n        return 0;  // 没有可读取的内容\n    }\n    \n    // 计算实际可读取的字节数\n    size_t bytes_to_read = (offset + size <= file->size) ? size : (file->size - offset);\n    \n    // 简化版：实际应该从block_pointers指向的块中读取数据\n    // 这里只是示例，所以返回可读取的字节数\n    \n    return bytes_to_read;\n}\n\n/*\nwrite_file(函数): 向文件写入数据。\n\n功能描述:\n- 在目录中定位指定文件\n- 验证写入权限\n- 必要时扩展文件大小并分配新存储块\n- 在指定偏移处写入数据并更新文件元数据\n\n参数:\n- parent_dir: 包含目标文件的目录\n- filename: 要写入的文件名\n- buffer: 包含要写入数据的内存缓冲区\n- size: 要写入的字节数\n- offset: 文件内开始写入的位置(字节偏移)\n\n返回值:\n- 正数: 实际写入的字节数\n- ERR_FILE_NOT_FOUND: 指定文件不存在\n- ERR_PERMISSION_DENIED: 缺少写入权限\n- ERR_DISK_FULL: 存储空间不足或文件大小超限\n\n依赖的已解释节点:\n- ERR_FILE_NOT_FOUND常量(文件不存在错误码)\n- ERR_PERMISSION_DENIED常量(权限不足错误码)\n- ERR_DISK_FULL常量(空间不足错误码)\n- MAX_FILE_SIZE常量(文件大小上限)\n- BLOCK_SIZE常量(存储块大小)\n- file_entry_t结构(文件元数据表示)\n- FILE_TYPE_REGULAR常量(常规文件类型标识)\n- directory_t结构(目录内容表示)\n- allocate_blocks函数(存储空间分配)\n*/\nint write_file(directory_t *parent_dir, const char *filename, const void *buffer, size_t size, size_t offset) {\n    // 查找文件\n    file_entry_t *file = NULL;\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0 && \n            parent_dir->files[i].type == FILE_TYPE_REGULAR) {\n            file = &parent_dir->files[i];\n            break;\n        }\n    }\n    \n    if (!file) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // 检查写入权限\n    if (!file->permissions.write) {\n        return ERR_PERMISSION_DENIED;\n    }\n    \n    // 检查是否需要扩展文件大小\n    size_t new_size = (offset + size > file->size) ? (offset + size) : file->size;\n    \n    // 检查文件大小上限\n    if (new_size > MAX_FILE_SIZE) {\n        return ERR_DISK_FULL;\n    }\n    \n    // 如果需要分配新块\n    if (new_size > file->size) {\n        int blocks_needed = (new_size - file->size + BLOCK_SIZE - 1) / BLOCK_SIZE;\n        int start_block = allocate_blocks(blocks_needed);\n        if (start_block < 0) {\n            return start_block;  // 返回错误码\n        }\n        \n        // 简化版：应该更新file->block_pointers，分配新块\n    }\n    \n    // 更新文件大小和修改时间\n    file->size = new_size;\n    file->modified_time = time(NULL);\n    \n    return size;  // 返回写入的字节数\n}",
            "hierarchy": {}
        }
    },
    {
        "operation": "insert",
        "update_fields": "",
        "meta_data": {
            "type": "node",
            "id": "1",
            "labels": [
                "File"
            ]
        },
        "properties": {
            "name": "dir_ops.c",
            "file_hash": "",
            "semantic_explanation": "",
            "id": 9,
            "source_code": "/* dir_ops.c */\n#include \"file_types.h\"\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n\n// 声明从utils.c导入的函数\nextern int validate_path(const char *path);\nextern void split_path(const char *path, char *parent_path, char *filename);\n\n// 声明从file_ops.c导入的函数\nextern int create_file(directory_t *parent_dir, const char *filename, file_permissions_t permissions);\n\n// 全局根目录\nstatic directory_t root_directory = { \"/\", {}, 0 };\n\n/*\nfind_directory(函数): 根据路径查找目录结构。\n\n功能描述:\n- 验证提供的路径格式是否有效\n- 在文件系统层次结构中查找指定路径的目录\n- 支持根目录(\"/\")和简化的两级目录结构\n\n参数:\n- path: 要查找的目录路径字符串\n\n返回值:\n- 非NULL: 指向找到的目录结构的指针\n- NULL: 目录不存在或路径无效\n\n依赖的已解释节点:\n- validate_path函数(路径验证)\n- split_path函数(路径分解)\n- MAX_PATH_LEN常量(路径长度限制)\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- SUCCESS常量(成功状态码)\n- FILE_TYPE_DIRECTORY常量(目录类型标识)\n- directory_t结构(目录内容表示)\n- file_entry_t结构(文件元数据表示)\n*/\ndirectory_t* find_directory(const char *path) {\n    if (validate_path(path) != SUCCESS) {\n        return NULL;\n    }\n    \n    // 如果是根目录\n    if (strcmp(path, \"/\") == 0) {\n        return &root_directory;\n    }\n    \n    // 简化版：只支持两级目录结构\n    // 实际实现需要递归查找\n    \n    char parent_path[MAX_PATH_LEN];\n    char dirname[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, dirname);\n    \n    // 只看根目录下的目录\n    if (strcmp(parent_path, \"/\") == 0) {\n        for (int i = 0; i < root_directory.file_count; i++) {\n            if (strcmp(root_directory.files[i].name, dirname) == 0 && \n                root_directory.files[i].type == FILE_TYPE_DIRECTORY) {\n                // 假设目录实际内容存储在与file_entry关联的某处\n                // 这里简化返回一个指向目录结构的指针\n                return (directory_t*)root_directory.files[i].block_pointers;\n            }\n        }\n    }\n    \n    return NULL;  // 目录不存在\n}\n\n/*\ncreate_directory(函数): 创建新目录。\n\n功能描述:\n- 验证路径并解析父目录和目录名\n- 检查父目录是否存在及其容量\n- 创建新目录结构并在父目录中添加对应条目\n\n参数:\n- path: 要创建的目录的完整路径\n\n返回值:\n- SUCCESS: 目录创建成功\n- ERR_INVALID_PATH: 路径无效或父目录不存在\n- ERR_FILE_EXISTS: 同名目录或文件已存在\n- ERR_DISK_FULL: 内存分配失败或目录已满\n\n依赖的已解释节点:\n- validate_path函数(路径验证)\n- find_directory函数(目录查找)\n- split_path函数(路径分解)\n- MAX_PATH_LEN常量(路径长度限制)\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- ERR_INVALID_PATH常量(路径无效错误码)\n- ERR_FILE_EXISTS常量(文件已存在错误码)\n- ERR_DISK_FULL常量(资源不足错误码)\n- SUCCESS常量(成功状态码)\n- FILE_TYPE_DIRECTORY常量(目录类型标识)\n- directory_t结构(目录内容表示)\n- file_entry_t结构(文件元数据表示)\n*/\nint create_directory(const char *path) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char dirname[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, dirname);\n    \n    // 查找父目录\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_INVALID_PATH;  // 父目录不存在\n    }\n    \n    // 检查目录名长度\n    if (strlen(dirname) >= MAX_FILENAME_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // 检查目录是否已存在\n    for (int i = 0; i < parent->file_count; i++) {\n        if (strcmp(parent->files[i].name, dirname) == 0) {\n            return ERR_FILE_EXISTS;\n        }\n    }\n    \n    // 创建目录项\n    file_entry_t *dir_entry = &parent->files[parent->file_count];\n    strcpy(dir_entry->name, dirname);\n    dir_entry->type = FILE_TYPE_DIRECTORY;\n    dir_entry->size = 0;\n    \n    // 设置默认权限 (读/写/执行)\n    dir_entry->permissions.read = 1;\n    dir_entry->permissions.write = 1;\n    dir_entry->permissions.execute = 1;\n    \n    dir_entry->created_time = time(NULL);\n    dir_entry->modified_time = dir_entry->created_time;\n    \n    // 分配新目录结构\n    directory_t *new_dir = (directory_t*)malloc(sizeof(directory_t));\n    if (!new_dir) {\n        return ERR_DISK_FULL;  // 内存分配失败\n    }\n    \n    // 初始化新目录\n    strcpy(new_dir->name, dirname);\n    new_dir->file_count = 0;\n    \n    // 存储目录结构指针\n    // 简化版：将目录结构指针存储在block_pointers[0]\n    dir_entry->block_pointers[0] = (int)new_dir;\n    \n    // 增加父目录文件计数\n    parent->file_count++;\n    \n    return SUCCESS;\n}\n\n/*\nlist_directory(函数): 列出目录内容。\n\n功能描述:\n- 查找指定路径的目录\n- 提供对目录中所有文件和子目录条目的访问\n\n参数:\n- path: 要列出内容的目录路径\n- entries: 输出参数，接收目录条目数组的指针\n- count: 输出参数，接收条目数量\n\n返回值:\n- SUCCESS: 操作成功\n- ERR_FILE_NOT_FOUND: 指定路径的目录不存在\n\n依赖的已解释节点:\n- find_directory函数(目录查找)\n- ERR_FILE_NOT_FOUND常量(文件不存在错误码)\n- SUCCESS常量(成功状态码)\n- directory_t结构(目录内容表示)\n- file_entry_t结构(文件元数据表示)\n*/\nint list_directory(const char *path, file_entry_t **entries, int *count) {\n    // 查找目录\n    directory_t *dir = find_directory(path);\n    if (!dir) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // 设置输出参数\n    *entries = dir->files;\n    *count = dir->file_count;\n    \n    return SUCCESS;\n}",
            "hierarchy": {}
        }
    },
    {
        "operation": "insert",
        "update_fields": "",
        "meta_data": {
            "type": "node",
            "id": "2",
            "labels": [
                "File"
            ]
        },
        "properties": {
            "name": "fs_api.c",
            "file_hash": "",
            "semantic_explanation": "",
            "id": 13,
            "source_code": "/* fs_api.c */\n#include \"file_types.h\"\n#include <string.h>\n#include <stdio.h>\n\n// 声明从utils.c导入的函数\nextern int validate_path(const char *path);\nextern void split_path(const char *path, char *parent_path, char *filename);\n\n// 声明从file_ops.c导入的函数\nextern int create_file(directory_t *parent_dir, const char *filename, file_permissions_t permissions);\nextern int read_file(directory_t *parent_dir, const char *filename, void *buffer, size_t size, size_t offset);\nextern int write_file(directory_t *parent_dir, const char *filename, const void *buffer, size_t size, size_t offset);\n\n// 声明从dir_ops.c导入的函数\nextern directory_t* find_directory(const char *path);\nextern int create_directory(const char *path);\nextern int list_directory(const char *path, file_entry_t **entries, int *count);\n\n// 文件系统API函数\n\n/*\nfs_init(函数): 初始化文件系统。\n\n功能描述:\n- 准备文件系统以供使用\n- 显示关键配置参数如块大小和最大文件大小\n- 设置初始状态和数据结构\n\n返回值:\n- SUCCESS: 初始化成功\n\n依赖的已解释节点:\n- BLOCK_SIZE常量(存储块大小)\n- MAX_FILE_SIZE常量(文件大小上限)\n- SUCCESS常量(成功状态码)\n*/\nint fs_init() {\n    // 初始化文件系统\n    printf(\"File system initialized with block size: %d bytes\\n\", BLOCK_SIZE);\n    printf(\"Maximum file size: %d bytes\\n\", MAX_FILE_SIZE);\n    \n    return SUCCESS;\n}\n\n/*\nfs_create_file(函数): 在指定路径创建新文件。\n\n功能描述:\n- 提供面向路径的文件创建接口\n- 解析路径以确定父目录和文件名\n- 设置指定的读写执行权限\n- 在适当的目录中创建文件\n\n参数:\n- path: 要创建的文件完整路径\n- read_perm: 读取权限标志(1=允许,0=禁止)\n- write_perm: 写入权限标志(1=允许,0=禁止)\n- exec_perm: 执行权限标志(1=允许,0=禁止)\n\n返回值:\n- SUCCESS: 文件创建成功\n- ERR_INVALID_PATH: 路径无效\n- ERR_FILE_EXISTS: 文件已存在\n- 其他错误码: 继承自底层函数\n\n依赖的已解释节点:\n- validate_path函数(路径验证)\n- split_path函数(路径分解)\n- find_directory函数(目录查找)\n- create_file函数(文件创建)\n- MAX_PATH_LEN常量(路径长度限制)\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- ERR_INVALID_PATH常量(路径无效错误码)\n- file_permissions_t结构(权限表示)\n*/\nint fs_create_file(const char *path, int read_perm, int write_perm, int exec_perm) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // 查找父目录\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_INVALID_PATH;  // 父目录不存在\n    }\n    \n    // 设置权限\n    file_permissions_t perms;\n    perms.read = read_perm ? 1 : 0;\n    perms.write = write_perm ? 1 : 0;\n    perms.execute = exec_perm ? 1 : 0;\n    \n    // 创建文件\n    return create_file(parent, filename, perms);\n}\n\n/*\nfs_read(函数): 从文件读取数据。\n\n功能描述:\n- 提供面向路径的文件读取接口\n- 解析路径以定位目标文件\n- 从指定偏移处读取请求的数据量\n\n参数:\n- path: 目标文件的完整路径\n- buffer: 存储读取数据的内存缓冲区\n- size: 要读取的最大字节数\n- offset: 文件中的起始位置\n\n返回值:\n- 正数: 实际读取的字节数\n- ERR_INVALID_PATH: 路径格式无效\n- ERR_FILE_NOT_FOUND: 文件或父目录不存在\n- 其他错误码: 继承自底层函数\n\n依赖的已解释节点:\n- validate_path函数(路径验证)\n- split_path函数(路径分解)\n- find_directory函数(目录查找)\n- read_file函数(文件读取)\n- MAX_PATH_LEN常量(路径长度限制)\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- ERR_INVALID_PATH常量(路径无效错误码)\n- ERR_FILE_NOT_FOUND常量(文件不存在错误码)\n*/\nint fs_read(const char *path, void *buffer, size_t size, size_t offset) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // 查找父目录\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_FILE_NOT_FOUND;  // 父目录不存在\n    }\n    \n    // 读取文件\n    return read_file(parent, filename, buffer, size, offset);\n}\n\n/*\nfs_write(函数): 向文件写入数据。\n\n功能描述:\n- 提供面向路径的文件写入接口\n- 解析路径以定位目标文件\n- 在指定偏移处写入数据\n\n参数:\n- path: 目标文件的完整路径\n- buffer: 包含要写入数据的内存缓冲区\n- size: 要写入的字节数\n- offset: 文件中的起始位置\n\n返回值:\n- 正数: 实际写入的字节数\n- ERR_INVALID_PATH: 路径格式无效\n- ERR_FILE_NOT_FOUND: 文件或父目录不存在\n- 其他错误码: 继承自底层函数\n\n依赖的已解释节点:\n- validate_path函数(路径验证)\n- split_path函数(路径分解)\n- find_directory函数(目录查找)\n- write_file函数(文件写入)\n- MAX_PATH_LEN常量(路径长度限制)\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- ERR_INVALID_PATH常量(路径无效错误码)\n- ERR_FILE_NOT_FOUND常量(文件不存在错误码)\n*/\nint fs_write(const char *path, const void *buffer, size_t size, size_t offset) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // 查找父目录\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_FILE_NOT_FOUND;  // 父目录不存在\n    }\n    \n    // 写入文件\n    return write_file(parent, filename, buffer, size, offset);\n}\n\n/*\nfs_mkdir(函数): 创建新目录。\n\n功能描述:\n- 提供直接的目录创建接口\n- 将请求委托给底层目录创建功能\n\n参数:\n- path: 要创建的目录的完整路径\n\n返回值:\n- SUCCESS: 目录创建成功\n- 错误码: 继承自底层create_directory函数\n\n依赖的已解释节点:\n- create_directory函数(目录创建)\n\n*/\nint fs_mkdir(const char *path) {\n    return create_directory(path);\n}\n\n/*\nfs_list(函数): 列出目录内容。\n\n功能描述:\n- 提供直接的目录内容列举接口\n- 将请求委托给底层目录列举功能\n\n参数:\n- path: 要列出内容的目录路径\n- entries: 输出参数，将接收目录条目数组指针\n- count: 输出参数，将接收条目数量\n\n返回值:\n- SUCCESS: 操作成功\n- 错误码: 继承自底层list_directory函数\n\n依赖的已解释节点:\n- list_directory函数(目录内容列举)\n*/\nint fs_list(const char *path, file_entry_t **entries, int *count) {\n    return list_directory(path, entries, count);\n}",
            "hierarchy": {}
        }
    },
    {
        "operation": "insert",
        "update_fields": "",
        "meta_data": {
            "type": "node",
            "id": "3",
            "labels": [
                "File"
            ]
        },
        "properties": {
            "name": "file_types.h",
            "semantic_explanation": "",
            "id": 2,
            "source_code": "/* file_types.h */\n#include \"constants.h\"\n#include <time.h>\n\n/*\nfile_type_t(枚举类型): 表示文件系统中支持的不同类型的文件：\n- FILE_TYPE_REGULAR: 普通文件(值为1)，用于存储用户数据\n- FILE_TYPE_DIRECTORY: 目录文件(值为2)，用于组织其他文件\n- FILE_TYPE_SYMLINK: 符号链接(值为3)，指向其他文件或目录的引用\n\n依赖的已解释节点: 无（基本枚举定义）\n*/\ntypedef enum {\n    FILE_TYPE_REGULAR = 1,\n    FILE_TYPE_DIRECTORY = 2,\n    FILE_TYPE_SYMLINK = 3\n} file_type_t;\n\n/*\nfile_permissions_t(结构体): 使用位域表示Unix风格的文件权限：\n- read: 1位布尔值，表示是否允许读取文件内容\n- write: 1位布尔值，表示是否允许修改文件内容\n- execute: 1位布尔值，表示是否允许执行文件(仅对普通文件有意义)\n\n依赖的已解释节点: 无（基本位域结构）\n*/\ntypedef struct {\n    unsigned int read: 1;\n    unsigned int write: 1;\n    unsigned int execute: 1;\n} file_permissions_t;\n\n/*\nfile_entry_t(结构体): 表示文件系统中单个文件或目录的元数据：\n- name: 文件名，最大长度由MAX_FILENAME_LEN限制\n- type: 文件类型，使用file_type_t枚举\n- size: 文件大小(字节数)\n- permissions: 文件权限，使用file_permissions_t结构\n- created_time: 文件创建时间戳\n- modified_time: 文件最后修改时间戳\n- block_pointers: 存储指向实际数据块的索引数组(简化实现)\n\n依赖的已解释节点:\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- file_type_t枚举(文件类型分类)\n- file_permissions_t结构(文件权限设置)\n*/\ntypedef struct {\n    char name[MAX_FILENAME_LEN];\n    file_type_t type;\n    size_t size;\n    file_permissions_t permissions;\n    time_t created_time;\n    time_t modified_time;\n    int block_pointers[10];  // 简化的块指针数组\n} file_entry_t;\n\n\n/*\ndirectory_t(结构体): 表示文件系统中的目录结构：\n- name: 目录名称，最大长度由MAX_FILENAME_LEN限制\n- files: 包含的文件和子目录数组，最大容量由MAX_FILES_PER_DIR限制\n- file_count: 当前目录中实际包含的文件和子目录数量\n\n依赖的已解释节点:\n- MAX_FILENAME_LEN常量(目录名长度限制)\n- MAX_FILES_PER_DIR常量(单目录最大容量)\n- file_entry_t结构(文件元数据表示)\n*/\ntypedef struct {\n    char name[MAX_FILENAME_LEN];\n    file_entry_t files[MAX_FILES_PER_DIR];\n    int file_count;\n} directory_t;",
            "hierarchy": {}
        }
    },
    
    {
        "operation": "insert",
        "update_fields": "",
        "meta_data": {
            "type": "relationship",
            "id": "161",
            "labels": [
                "USES_MACRO"
            ],
            "start_id": "0",
            "end_id": "1"
        },
        "properties": {}
    },
    {
        "operation": "insert",
        "update_fields": "",
        "meta_data": {
            "type": "relationship",
            "id": "162",
            "labels": [
                "USES_MACRO"
            ],
            "start_id": "0",
            "end_id": "2"
        },
        "properties": {}
    },
    {
        "operation": "insert",
        "update_fields": "",
        "meta_data": {
            "type": "relationship",
            "id": "163",
            "labels": [
                "USES_TYPE"
            ],
            "start_id": "0",
            "end_id": "3"
        },
        "properties": {}
    }
]