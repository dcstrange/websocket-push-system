{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "0", "labels": ["File"]}, "properties": {"name": "file_ops.c", "file_hash": "", "semantic_explanation": "", "id": 5, "source_code": "/* file_ops.c */\n#include \"file_types.h\"\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n\n// 声明从utils.c导入的函数\nextern int validate_path(const char *path);\nextern int allocate_blocks(int num_blocks);\n\n/*\ncreate_file(函数): 在指定目录中创建新的空文件。\n\n功能描述:\n- 在父目录中创建具有指定文件名和权限的新文件\n- 初始化文件元数据，包括类型、大小和时间戳\n- 文件创建时不分配数据块，初始大小为0\n\n参数:\n- parent_dir: 要在其中创建文件的目录\n- filename: 新文件的名称\n- permissions: 要应用的读/写/执行权限\n\n返回值:\n- SUCCESS: 文件创建成功\n- ERR_DISK_FULL: 目录已达到最大文件数限制\n- ERR_INVALID_PATH: 文件名长度超过限制\n- ERR_FILE_EXISTS: 同名文件已存在\n\n依赖的已解释节点:\n- MAX_FILES_PER_DIR常量(目录容量限制)\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- ERR_DISK_FULL常量(空间不足错误码)\n- ERR_INVALID_PATH常量(路径无效错误码)\n- ERR_FILE_EXISTS常量(文件已存在错误码)\n- SUCCESS常量(成功状态码)\n- file_entry_t结构(文件元数据表示)\n- FILE_TYPE_REGULAR常量(常规文件类型标识)\n- directory_t结构(目录内容表示)\n*/\nint create_file(directory_t *parent_dir, const char *filename, file_permissions_t permissions) {\n    // 检查目录是否已满\n    if (parent_dir->file_count >= MAX_FILES_PER_DIR) {\n        return ERR_DISK_FULL;\n    }\n    \n    // 检查文件名长度\n    if (strlen(filename) >= MAX_FILENAME_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // 检查文件是否已存在\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0) {\n            return ERR_FILE_EXISTS;\n        }\n    }\n    \n    // 创建新文件项\n    file_entry_t *new_file = &parent_dir->files[parent_dir->file_count];\n    strcpy(new_file->name, filename);\n    new_file->type = FILE_TYPE_REGULAR;\n    new_file->size = 0;\n    new_file->permissions = permissions;\n    new_file->created_time = time(NULL);\n    new_file->modified_time = new_file->created_time;\n    \n    // 增加目录文件计数\n    parent_dir->file_count++;\n    \n    return SUCCESS;\n}\n\n/*\nread_file(函数): 从文件中读取数据。\n\n功能描述:\n- 在目录中定位指定文件\n- 验证请求的读取权限和范围\n- 从文件的指定偏移位置读取数据\n\n参数:\n- parent_dir: 包含目标文件的目录\n- filename: 要读取的文件名\n- buffer: 存放读取数据的内存缓冲区\n- size: 要读取的最大字节数\n- offset: 文件内开始读取的位置(字节偏移)\n\n返回值:\n- 正数: 实际读取的字节数\n- ERR_FILE_NOT_FOUND: 指定文件不存在\n- ERR_PERMISSION_DENIED: 缺少读取权限\n\n依赖的已解释节点:\n- ERR_FILE_NOT_FOUND常量(文件不存在错误码)\n- ERR_PERMISSION_DENIED常量(权限不足错误码)\n- file_entry_t结构(文件元数据表示)\n- FILE_TYPE_REGULAR常量(常规文件类型标识)\n- directory_t结构(目录内容表示)\n*/\nint read_file(directory_t *parent_dir, const char *filename, void *buffer, size_t size, size_t offset) {\n    // 查找文件\n    file_entry_t *file = NULL;\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0 && \n            parent_dir->files[i].type == FILE_TYPE_REGULAR) {\n            file = &parent_dir->files[i];\n            break;\n        }\n    }\n    \n    if (!file) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // 检查读取权限\n    if (!file->permissions.read) {\n        return ERR_PERMISSION_DENIED;\n    }\n    \n    // 检查读取范围是否有效\n    if (offset >= file->size) {\n        return 0;  // 没有可读取的内容\n    }\n    \n    // 计算实际可读取的字节数\n    size_t bytes_to_read = (offset + size <= file->size) ? size : (file->size - offset);\n    \n    // 简化版：实际应该从block_pointers指向的块中读取数据\n    // 这里只是示例，所以返回可读取的字节数\n    \n    return bytes_to_read;\n}\n\n/*\nwrite_file(函数): 向文件写入数据。\n\n功能描述:\n- 在目录中定位指定文件\n- 验证写入权限\n- 必要时扩展文件大小并分配新存储块\n- 在指定偏移处写入数据并更新文件元数据\n\n参数:\n- parent_dir: 包含目标文件的目录\n- filename: 要写入的文件名\n- buffer: 包含要写入数据的内存缓冲区\n- size: 要写入的字节数\n- offset: 文件内开始写入的位置(字节偏移)\n\n返回值:\n- 正数: 实际写入的字节数\n- ERR_FILE_NOT_FOUND: 指定文件不存在\n- ERR_PERMISSION_DENIED: 缺少写入权限\n- ERR_DISK_FULL: 存储空间不足或文件大小超限\n\n依赖的已解释节点:\n- ERR_FILE_NOT_FOUND常量(文件不存在错误码)\n- ERR_PERMISSION_DENIED常量(权限不足错误码)\n- ERR_DISK_FULL常量(空间不足错误码)\n- MAX_FILE_SIZE常量(文件大小上限)\n- BLOCK_SIZE常量(存储块大小)\n- file_entry_t结构(文件元数据表示)\n- FILE_TYPE_REGULAR常量(常规文件类型标识)\n- directory_t结构(目录内容表示)\n- allocate_blocks函数(存储空间分配)\n*/\nint write_file(directory_t *parent_dir, const char *filename, const void *buffer, size_t size, size_t offset) {\n    // 查找文件\n    file_entry_t *file = NULL;\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0 && \n            parent_dir->files[i].type == FILE_TYPE_REGULAR) {\n            file = &parent_dir->files[i];\n            break;\n        }\n    }\n    \n    if (!file) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // 检查写入权限\n    if (!file->permissions.write) {\n        return ERR_PERMISSION_DENIED;\n    }\n    \n    // 检查是否需要扩展文件大小\n    size_t new_size = (offset + size > file->size) ? (offset + size) : file->size;\n    \n    // 检查文件大小上限\n    if (new_size > MAX_FILE_SIZE) {\n        return ERR_DISK_FULL;\n    }\n    \n    // 如果需要分配新块\n    if (new_size > file->size) {\n        int blocks_needed = (new_size - file->size + BLOCK_SIZE - 1) / BLOCK_SIZE;\n        int start_block = allocate_blocks(blocks_needed);\n        if (start_block < 0) {\n            return start_block;  // 返回错误码\n        }\n        \n        // 简化版：应该更新file->block_pointers，分配新块\n    }\n    \n    // 更新文件大小和修改时间\n    file->size = new_size;\n    file->modified_time = time(NULL);\n    \n    return size;  // 返回写入的字节数\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "1", "labels": ["File"]}, "properties": {"name": "dir_ops.c", "file_hash": "", "semantic_explanation": "", "id": 9, "source_code": "/* dir_ops.c */\n#include \"file_types.h\"\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n\n// 声明从utils.c导入的函数\nextern int validate_path(const char *path);\nextern void split_path(const char *path, char *parent_path, char *filename);\n\n// 声明从file_ops.c导入的函数\nextern int create_file(directory_t *parent_dir, const char *filename, file_permissions_t permissions);\n\n// 全局根目录\nstatic directory_t root_directory = { \"/\", {}, 0 };\n\n/*\nfind_directory(函数): 根据路径查找目录结构。\n\n功能描述:\n- 验证提供的路径格式是否有效\n- 在文件系统层次结构中查找指定路径的目录\n- 支持根目录(\"/\")和简化的两级目录结构\n\n参数:\n- path: 要查找的目录路径字符串\n\n返回值:\n- 非NULL: 指向找到的目录结构的指针\n- NULL: 目录不存在或路径无效\n\n依赖的已解释节点:\n- validate_path函数(路径验证)\n- split_path函数(路径分解)\n- MAX_PATH_LEN常量(路径长度限制)\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- SUCCESS常量(成功状态码)\n- FILE_TYPE_DIRECTORY常量(目录类型标识)\n- directory_t结构(目录内容表示)\n- file_entry_t结构(文件元数据表示)\n*/\ndirectory_t* find_directory(const char *path) {\n    if (validate_path(path) != SUCCESS) {\n        return NULL;\n    }\n    \n    // 如果是根目录\n    if (strcmp(path, \"/\") == 0) {\n        return &root_directory;\n    }\n    \n    // 简化版：只支持两级目录结构\n    // 实际实现需要递归查找\n    \n    char parent_path[MAX_PATH_LEN];\n    char dirname[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, dirname);\n    \n    // 只看根目录下的目录\n    if (strcmp(parent_path, \"/\") == 0) {\n        for (int i = 0; i < root_directory.file_count; i++) {\n            if (strcmp(root_directory.files[i].name, dirname) == 0 && \n                root_directory.files[i].type == FILE_TYPE_DIRECTORY) {\n                // 假设目录实际内容存储在与file_entry关联的某处\n                // 这里简化返回一个指向目录结构的指针\n                return (directory_t*)root_directory.files[i].block_pointers;\n            }\n        }\n    }\n    \n    return NULL;  // 目录不存在\n}\n\n/*\ncreate_directory(函数): 创建新目录。\n\n功能描述:\n- 验证路径并解析父目录和目录名\n- 检查父目录是否存在及其容量\n- 创建新目录结构并在父目录中添加对应条目\n\n参数:\n- path: 要创建的目录的完整路径\n\n返回值:\n- SUCCESS: 目录创建成功\n- ERR_INVALID_PATH: 路径无效或父目录不存在\n- ERR_FILE_EXISTS: 同名目录或文件已存在\n- ERR_DISK_FULL: 内存分配失败或目录已满\n\n依赖的已解释节点:\n- validate_path函数(路径验证)\n- find_directory函数(目录查找)\n- split_path函数(路径分解)\n- MAX_PATH_LEN常量(路径长度限制)\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- ERR_INVALID_PATH常量(路径无效错误码)\n- ERR_FILE_EXISTS常量(文件已存在错误码)\n- ERR_DISK_FULL常量(资源不足错误码)\n- SUCCESS常量(成功状态码)\n- FILE_TYPE_DIRECTORY常量(目录类型标识)\n- directory_t结构(目录内容表示)\n- file_entry_t结构(文件元数据表示)\n*/\nint create_directory(const char *path) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char dirname[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, dirname);\n    \n    // 查找父目录\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_INVALID_PATH;  // 父目录不存在\n    }\n    \n    // 检查目录名长度\n    if (strlen(dirname) >= MAX_FILENAME_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // 检查目录是否已存在\n    for (int i = 0; i < parent->file_count; i++) {\n        if (strcmp(parent->files[i].name, dirname) == 0) {\n            return ERR_FILE_EXISTS;\n        }\n    }\n    \n    // 创建目录项\n    file_entry_t *dir_entry = &parent->files[parent->file_count];\n    strcpy(dir_entry->name, dirname);\n    dir_entry->type = FILE_TYPE_DIRECTORY;\n    dir_entry->size = 0;\n    \n    // 设置默认权限 (读/写/执行)\n    dir_entry->permissions.read = 1;\n    dir_entry->permissions.write = 1;\n    dir_entry->permissions.execute = 1;\n    \n    dir_entry->created_time = time(NULL);\n    dir_entry->modified_time = dir_entry->created_time;\n    \n    // 分配新目录结构\n    directory_t *new_dir = (directory_t*)malloc(sizeof(directory_t));\n    if (!new_dir) {\n        return ERR_DISK_FULL;  // 内存分配失败\n    }\n    \n    // 初始化新目录\n    strcpy(new_dir->name, dirname);\n    new_dir->file_count = 0;\n    \n    // 存储目录结构指针\n    // 简化版：将目录结构指针存储在block_pointers[0]\n    dir_entry->block_pointers[0] = (int)new_dir;\n    \n    // 增加父目录文件计数\n    parent->file_count++;\n    \n    return SUCCESS;\n}\n\n/*\nlist_directory(函数): 列出目录内容。\n\n功能描述:\n- 查找指定路径的目录\n- 提供对目录中所有文件和子目录条目的访问\n\n参数:\n- path: 要列出内容的目录路径\n- entries: 输出参数，接收目录条目数组的指针\n- count: 输出参数，接收条目数量\n\n返回值:\n- SUCCESS: 操作成功\n- ERR_FILE_NOT_FOUND: 指定路径的目录不存在\n\n依赖的已解释节点:\n- find_directory函数(目录查找)\n- ERR_FILE_NOT_FOUND常量(文件不存在错误码)\n- SUCCESS常量(成功状态码)\n- directory_t结构(目录内容表示)\n- file_entry_t结构(文件元数据表示)\n*/\nint list_directory(const char *path, file_entry_t **entries, int *count) {\n    // 查找目录\n    directory_t *dir = find_directory(path);\n    if (!dir) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // 设置输出参数\n    *entries = dir->files;\n    *count = dir->file_count;\n    \n    return SUCCESS;\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "2", "labels": ["File"]}, "properties": {"name": "fs_api.c", "file_hash": "", "semantic_explanation": "", "id": 13, "source_code": "/* fs_api.c */\n#include \"file_types.h\"\n#include <string.h>\n#include <stdio.h>\n\n// 声明从utils.c导入的函数\nextern int validate_path(const char *path);\nextern void split_path(const char *path, char *parent_path, char *filename);\n\n// 声明从file_ops.c导入的函数\nextern int create_file(directory_t *parent_dir, const char *filename, file_permissions_t permissions);\nextern int read_file(directory_t *parent_dir, const char *filename, void *buffer, size_t size, size_t offset);\nextern int write_file(directory_t *parent_dir, const char *filename, const void *buffer, size_t size, size_t offset);\n\n// 声明从dir_ops.c导入的函数\nextern directory_t* find_directory(const char *path);\nextern int create_directory(const char *path);\nextern int list_directory(const char *path, file_entry_t **entries, int *count);\n\n// 文件系统API函数\n\n/*\nfs_init(函数): 初始化文件系统。\n\n功能描述:\n- 准备文件系统以供使用\n- 显示关键配置参数如块大小和最大文件大小\n- 设置初始状态和数据结构\n\n返回值:\n- SUCCESS: 初始化成功\n\n依赖的已解释节点:\n- BLOCK_SIZE常量(存储块大小)\n- MAX_FILE_SIZE常量(文件大小上限)\n- SUCCESS常量(成功状态码)\n*/\nint fs_init() {\n    // 初始化文件系统\n    printf(\"File system initialized with block size: %d bytes\\n\", BLOCK_SIZE);\n    printf(\"Maximum file size: %d bytes\\n\", MAX_FILE_SIZE);\n    \n    return SUCCESS;\n}\n\n/*\nfs_create_file(函数): 在指定路径创建新文件。\n\n功能描述:\n- 提供面向路径的文件创建接口\n- 解析路径以确定父目录和文件名\n- 设置指定的读写执行权限\n- 在适当的目录中创建文件\n\n参数:\n- path: 要创建的文件完整路径\n- read_perm: 读取权限标志(1=允许,0=禁止)\n- write_perm: 写入权限标志(1=允许,0=禁止)\n- exec_perm: 执行权限标志(1=允许,0=禁止)\n\n返回值:\n- SUCCESS: 文件创建成功\n- ERR_INVALID_PATH: 路径无效\n- ERR_FILE_EXISTS: 文件已存在\n- 其他错误码: 继承自底层函数\n\n依赖的已解释节点:\n- validate_path函数(路径验证)\n- split_path函数(路径分解)\n- find_directory函数(目录查找)\n- create_file函数(文件创建)\n- MAX_PATH_LEN常量(路径长度限制)\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- ERR_INVALID_PATH常量(路径无效错误码)\n- file_permissions_t结构(权限表示)\n*/\nint fs_create_file(const char *path, int read_perm, int write_perm, int exec_perm) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // 查找父目录\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_INVALID_PATH;  // 父目录不存在\n    }\n    \n    // 设置权限\n    file_permissions_t perms;\n    perms.read = read_perm ? 1 : 0;\n    perms.write = write_perm ? 1 : 0;\n    perms.execute = exec_perm ? 1 : 0;\n    \n    // 创建文件\n    return create_file(parent, filename, perms);\n}\n\n/*\nfs_read(函数): 从文件读取数据。\n\n功能描述:\n- 提供面向路径的文件读取接口\n- 解析路径以定位目标文件\n- 从指定偏移处读取请求的数据量\n\n参数:\n- path: 目标文件的完整路径\n- buffer: 存储读取数据的内存缓冲区\n- size: 要读取的最大字节数\n- offset: 文件中的起始位置\n\n返回值:\n- 正数: 实际读取的字节数\n- ERR_INVALID_PATH: 路径格式无效\n- ERR_FILE_NOT_FOUND: 文件或父目录不存在\n- 其他错误码: 继承自底层函数\n\n依赖的已解释节点:\n- validate_path函数(路径验证)\n- split_path函数(路径分解)\n- find_directory函数(目录查找)\n- read_file函数(文件读取)\n- MAX_PATH_LEN常量(路径长度限制)\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- ERR_INVALID_PATH常量(路径无效错误码)\n- ERR_FILE_NOT_FOUND常量(文件不存在错误码)\n*/\nint fs_read(const char *path, void *buffer, size_t size, size_t offset) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // 查找父目录\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_FILE_NOT_FOUND;  // 父目录不存在\n    }\n    \n    // 读取文件\n    return read_file(parent, filename, buffer, size, offset);\n}\n\n/*\nfs_write(函数): 向文件写入数据。\n\n功能描述:\n- 提供面向路径的文件写入接口\n- 解析路径以定位目标文件\n- 在指定偏移处写入数据\n\n参数:\n- path: 目标文件的完整路径\n- buffer: 包含要写入数据的内存缓冲区\n- size: 要写入的字节数\n- offset: 文件中的起始位置\n\n返回值:\n- 正数: 实际写入的字节数\n- ERR_INVALID_PATH: 路径格式无效\n- ERR_FILE_NOT_FOUND: 文件或父目录不存在\n- 其他错误码: 继承自底层函数\n\n依赖的已解释节点:\n- validate_path函数(路径验证)\n- split_path函数(路径分解)\n- find_directory函数(目录查找)\n- write_file函数(文件写入)\n- MAX_PATH_LEN常量(路径长度限制)\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- ERR_INVALID_PATH常量(路径无效错误码)\n- ERR_FILE_NOT_FOUND常量(文件不存在错误码)\n*/\nint fs_write(const char *path, const void *buffer, size_t size, size_t offset) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // 查找父目录\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_FILE_NOT_FOUND;  // 父目录不存在\n    }\n    \n    // 写入文件\n    return write_file(parent, filename, buffer, size, offset);\n}\n\n/*\nfs_mkdir(函数): 创建新目录。\n\n功能描述:\n- 提供直接的目录创建接口\n- 将请求委托给底层目录创建功能\n\n参数:\n- path: 要创建的目录的完整路径\n\n返回值:\n- SUCCESS: 目录创建成功\n- 错误码: 继承自底层create_directory函数\n\n依赖的已解释节点:\n- create_directory函数(目录创建)\n\n*/\nint fs_mkdir(const char *path) {\n    return create_directory(path);\n}\n\n/*\nfs_list(函数): 列出目录内容。\n\n功能描述:\n- 提供直接的目录内容列举接口\n- 将请求委托给底层目录列举功能\n\n参数:\n- path: 要列出内容的目录路径\n- entries: 输出参数，将接收目录条目数组指针\n- count: 输出参数，将接收条目数量\n\n返回值:\n- SUCCESS: 操作成功\n- 错误码: 继承自底层list_directory函数\n\n依赖的已解释节点:\n- list_directory函数(目录内容列举)\n*/\nint fs_list(const char *path, file_entry_t **entries, int *count) {\n    return list_directory(path, entries, count);\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "3", "labels": ["File"]}, "properties": {"name": "file_types.h", "semantic_explanation": "", "id": 2, "source_code": "/* file_types.h */\n#include \"constants.h\"\n#include <time.h>\n\n/*\nfile_type_t(枚举类型): 表示文件系统中支持的不同类型的文件：\n- FILE_TYPE_REGULAR: 普通文件(值为1)，用于存储用户数据\n- FILE_TYPE_DIRECTORY: 目录文件(值为2)，用于组织其他文件\n- FILE_TYPE_SYMLINK: 符号链接(值为3)，指向其他文件或目录的引用\n\n依赖的已解释节点: 无（基本枚举定义）\n*/\ntypedef enum {\n    FILE_TYPE_REGULAR = 1,\n    FILE_TYPE_DIRECTORY = 2,\n    FILE_TYPE_SYMLINK = 3\n} file_type_t;\n\n/*\nfile_permissions_t(结构体): 使用位域表示Unix风格的文件权限：\n- read: 1位布尔值，表示是否允许读取文件内容\n- write: 1位布尔值，表示是否允许修改文件内容\n- execute: 1位布尔值，表示是否允许执行文件(仅对普通文件有意义)\n\n依赖的已解释节点: 无（基本位域结构）\n*/\ntypedef struct {\n    unsigned int read: 1;\n    unsigned int write: 1;\n    unsigned int execute: 1;\n} file_permissions_t;\n\n/*\nfile_entry_t(结构体): 表示文件系统中单个文件或目录的元数据：\n- name: 文件名，最大长度由MAX_FILENAME_LEN限制\n- type: 文件类型，使用file_type_t枚举\n- size: 文件大小(字节数)\n- permissions: 文件权限，使用file_permissions_t结构\n- created_time: 文件创建时间戳\n- modified_time: 文件最后修改时间戳\n- block_pointers: 存储指向实际数据块的索引数组(简化实现)\n\n依赖的已解释节点:\n- MAX_FILENAME_LEN常量(文件名长度限制)\n- file_type_t枚举(文件类型分类)\n- file_permissions_t结构(文件权限设置)\n*/\ntypedef struct {\n    char name[MAX_FILENAME_LEN];\n    file_type_t type;\n    size_t size;\n    file_permissions_t permissions;\n    time_t created_time;\n    time_t modified_time;\n    int block_pointers[10];  // 简化的块指针数组\n} file_entry_t;\n\n\n/*\ndirectory_t(结构体): 表示文件系统中的目录结构：\n- name: 目录名称，最大长度由MAX_FILENAME_LEN限制\n- files: 包含的文件和子目录数组，最大容量由MAX_FILES_PER_DIR限制\n- file_count: 当前目录中实际包含的文件和子目录数量\n\n依赖的已解释节点:\n- MAX_FILENAME_LEN常量(目录名长度限制)\n- MAX_FILES_PER_DIR常量(单目录最大容量)\n- file_entry_t结构(文件元数据表示)\n*/\ntypedef struct {\n    char name[MAX_FILENAME_LEN];\n    file_entry_t files[MAX_FILES_PER_DIR];\n    int file_count;\n} directory_t;", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "4", "labels": ["File"]}, "properties": {"name": "/usr/include/stdlib.h", "semantic_explanation": "", "id": 8, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "5", "labels": ["File"]}, "properties": {"name": "main.c", "file_hash": "", "semantic_explanation": "", "id": 17, "source_code": "#include \"constants.h\"\n#include <stdio.h>\n\nint main() {\n    printf(\"Welcome to the Simple File System!\\n\");\n    // Add initialization or test code here\n    return 0;\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "6", "labels": ["File"]}, "properties": {"name": "/usr/include/string.h", "semantic_explanation": "", "id": 3, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "7", "labels": ["File"]}, "properties": {"name": "constants.h", "semantic_explanation": "", "id": 18, "source_code": "/*\nMAX_FILENAME_LEN(常量): 定义文件名最大长度为256字符，限制单个文件或目录名称的字符数量。\n*/\n#define MAX_FILENAME_LEN 256\n\n/*\nMAX_PATH_LEN(常量): 定义完整文件路径最大长度为1024字符，限制文件系统中任何路径的总字符数。\n*/\n#define MAX_PATH_LEN 1024\n\n/*MAX_FILES_PER_DIR(常量): 定义单个目录可包含的最大文件或子目录数为100，限制目录项数量。\n*/\n#define MAX_FILES_PER_DIR 100\n\n/*MAX_FILE_SIZE(常量): 定义单个文件最大尺寸为1MB(1048576字节)，设置文件系统支持的文件大小上限。\n*/\n#define MAX_FILE_SIZE 1048576  // 1MB\n\n/*BLOCK_SIZE(常量): 定义文件系统基本存储块大小为4KB(4096字节)，影响磁盘空间分配的粒度。\n*/\n#define BLOCK_SIZE 4096\n\n/*\nfs_error_t(枚举类型): 定义文件系统操作的可能错误码：\n- SUCCESS: 操作成功完成(0)\n- ERR_FILE_NOT_FOUND: 请求的文件或目录不存在(-1)\n- ERR_FILE_EXISTS: 尝试创建的文件或目录已存在(-2)\n- ERR_DISK_FULL: 存储空间不足，无法完成操作(-3)\n- ERR_INVALID_PATH: 提供的路径格式无效或超出长度限制(-4)\n- ERR_PERMISSION_DENIED: 用户权限不足，无法执行请求操作(-5)\n*/\ntypedef enum {\n    SUCCESS = 0,\n    ERR_FILE_NOT_FOUND = -1,\n    ERR_FILE_EXISTS = -2,\n    ERR_DISK_FULL = -3,\n    ERR_INVALID_PATH = -4,\n    ERR_PERMISSION_DENIED = -5\n} fs_error_t;", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "8", "labels": ["File"]}, "properties": {"name": "/usr/include/stdio.h", "semantic_explanation": "", "id": 4, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "9", "labels": ["File"]}, "properties": {"name": "/usr/include/time.h", "semantic_explanation": "", "id": 20, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "10", "labels": ["File"]}, "properties": {"name": "/usr/include/clang/18.1.3/include/__stddef_size_t.h", "semantic_explanation": "", "id": 21, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "11", "labels": ["File"]}, "properties": {"name": "/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h", "semantic_explanation": "", "id": 22, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "12", "labels": ["File"]}, "properties": {"name": "utils.c", "file_hash": "", "semantic_explanation": "", "id": 1, "source_code": "/* utils.c */\n#include \"file_types.h\"\n#include <string.h>\n#include <stdio.h>\n\n/*validate_path(函数): 验证文件路径的有效性。\n- 检查路径非空且长度未超过MAX_PATH_LEN\n- 验证路径不包含Windows文件系统禁止的特殊字符(<, >, |, *, ?)\n- 成功返回SUCCESS，失败返回ERR_INVALID_PATH\n\n依赖的已解释节点:\n- MAX_PATH_LEN常量(路径长度上限)\n- SUCCESS常量(成功状态码)\n- ERR_INVALID_PATH常量(路径无效错误码)\n*/\nint validate_path(const char *path) {\n    if (!path || strlen(path) >= MAX_PATH_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // 检查路径中是否包含非法字符\n    for (int i = 0; path[i] != '\\0'; i++) {\n        if (path[i] == '<' || path[i] == '>' || path[i] == '|' || path[i] == '*' || path[i] == '?') {\n            return ERR_INVALID_PATH;\n        }\n    }\n    \n    return SUCCESS;\n}\n\n/*\nsplit_path(函数): 将完整文件路径分解为父目录路径和文件名。\n- 查找最后一个斜杠位置确定分割点\n- 提取父目录路径(斜杠前的部分)\n- 提取文件名(最后一个斜杠后的部分)\n- 如无斜杠，假定为当前目录('.')中的文件\n\n依赖的已解释节点: 无(基本字符串操作)\n*/\nvoid split_path(const char *path, char *parent_path, char *filename) {\n    const char *last_slash = strrchr(path, '/');\n    \n    if (last_slash) {\n        int parent_len = last_slash - path;\n        strncpy(parent_path, path, parent_len);\n        parent_path[parent_len] = '\\0';\n        strcpy(filename, last_slash + 1);\n    } else {\n        // 没有斜杠表示当前目录中的文件\n        parent_path[0] = '.';\n        parent_path[1] = '\\0';\n        strcpy(filename, path);\n    }\n}\n\n/*\nallocate_blocks(函数): 分配指定数量的存储块用于文件数据存储。\n- 实现简化版本，使用静态变量跟踪下一个可用块\n- 检查剩余空间是否足够满足请求\n- 成功返回分配的第一个块索引，失败返回ERR_DISK_FULL\n\n依赖的已解释节点:\n- MAX_FILE_SIZE常量(文件大小上限)\n- BLOCK_SIZE常量(存储块大小)\n- ERR_DISK_FULL常量(磁盘空间不足错误码)\n*/\nint allocate_blocks(int num_blocks) {\n    // 简化版：假设返回第一个可用块的索引\n    static int next_free_block = 0;\n    int start_block = next_free_block;\n    \n    // 检查是否有足够的块可用\n    if (next_free_block + num_blocks > MAX_FILE_SIZE / BLOCK_SIZE) {\n        return ERR_DISK_FULL;\n    }\n    \n    next_free_block += num_blocks;\n    return start_block;\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "13", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/string.h:407:15", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "", "name": "strlen", "op_source": "use", "id": 2, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "14", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/string.h:273:14", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "", "name": "strrchr", "op_source": "use", "id": 4, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "15", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/string.h:144:14", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "", "name": "strncpy", "op_source": "use", "id": 5, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "16", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/string.h:141:14", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "", "name": "strcpy", "op_source": "use", "id": 6, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "17", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/string.h:156:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "", "name": "strcmp", "op_source": "use", "id": 10, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "18", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/time.h:76:15", "def_loc": "undefined", "semantic_explanation": "", "is_static": false, "ret_type": "", "name": "time", "op_source": "use", "id": 12, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "19", "labels": ["Function"]}, "properties": {"decl_loc": "file_ops.c:8:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "validate_path", "op_source": "declare", "id": 19, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "20", "labels": ["Function"]}, "properties": {"decl_loc": "file_ops.c:9:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "allocate_blocks", "op_source": "declare", "id": 17, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "21", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/stdlib.h:672:14", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "", "name": "malloc", "op_source": "use", "id": 33, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "22", "labels": ["Function"]}, "properties": {"decl_loc": "dir_ops.c:8:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "validate_path", "op_source": "declare", "id": 22, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "23", "labels": ["Function"]}, "properties": {"decl_loc": "dir_ops.c:9:13", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "void", "name": "split_path", "op_source": "declare", "id": 24, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "24", "labels": ["Function"]}, "properties": {"decl_loc": "dir_ops.c:12:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "create_file", "op_source": "declare", "id": 38, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "25", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/stdio.h:363:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "", "name": "printf", "op_source": "use", "id": 40, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "26", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:7:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "validate_path", "op_source": "declare", "id": 42, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "27", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:8:13", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "void", "name": "split_path", "op_source": "declare", "id": 43, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "28", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:11:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "create_file", "op_source": "declare", "id": 45, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "29", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:12:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "read_file", "op_source": "declare", "id": 50, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "30", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:13:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "write_file", "op_source": "declare", "id": 55, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "31", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:16:21", "def_loc": "undefined", "semantic_explanation": "", "is_static": false, "ret_type": "directory_t *", "name": "find_directory", "op_source": "declare", "id": 44, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "32", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:17:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "create_directory", "op_source": "declare", "id": 57, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "33", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:18:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "list_directory", "op_source": "declare", "id": 59, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "34", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "utils.c:67:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "allocate_blocks", "op_source": "define", "id": 7, "source_code": "int allocate_blocks(int num_blocks) {\n    // 简化版：假设返回第一个可用块的索引\n    static int next_free_block = 0;\n    int start_block = next_free_block;\n    \n    // 检查是否有足够的块可用\n    if (next_free_block + num_blocks > MAX_FILE_SIZE / BLOCK_SIZE) {\n        return ERR_DISK_FULL;\n    }\n    \n    next_free_block += num_blocks;\n    return start_block;\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "35", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "dir_ops.c:191:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "list_directory", "op_source": "define", "id": 34, "source_code": "int list_directory(const char *path, file_entry_t **entries, int *count) {\n    // 查找目录\n    directory_t *dir = find_directory(path);\n    if (!dir) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // 设置输出参数\n    *entries = dir->files;\n    *count = dir->file_count;\n    \n    return SUCCESS;\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "36", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "fs_api.c:38:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "fs_init", "op_source": "define", "id": 39, "source_code": "int fs_init() {\n    // 初始化文件系统\n    printf(\"File system initialized with block size: %d bytes\\n\", BLOCK_SIZE);\n    printf(\"Maximum file size: %d bytes\\n\", MAX_FILE_SIZE);\n    \n    return SUCCESS;\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "37", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "fs_api.c:221:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "fs_mkdir", "op_source": "define", "id": 56, "source_code": "int fs_mkdir(const char *path) {\n    return create_directory(path);\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "38", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "main.c:4:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "main", "op_source": "define", "id": 68, "source_code": "int main() {\n    printf(\"Welcome to the Simple File System!\\n\");\n    // Add initialization or test code here\n    return 0;\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "39", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "utils.c:16:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "validate_path", "op_source": "define", "id": 1, "source_code": "int validate_path(const char *path) {\n    if (!path || strlen(path) >= MAX_PATH_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // 检查路径中是否包含非法字符\n    for (int i = 0; path[i] != '\\0'; i++) {\n        if (path[i] == '<' || path[i] == '>' || path[i] == '|' || path[i] == '*' || path[i] == '?') {\n            return ERR_INVALID_PATH;\n        }\n    }\n    \n    return SUCCESS;\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "40", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "utils.c:40:6", "is_static": false, "semantic_explanation": "", "ret_type": "void", "name": "split_path", "op_source": "define", "id": 3, "source_code": "void split_path(const char *path, char *parent_path, char *filename) {\n    const char *last_slash = strrchr(path, '/');\n    \n    if (last_slash) {\n        int parent_len = last_slash - path;\n        strncpy(parent_path, path, parent_len);\n        parent_path[parent_len] = '\\0';\n        strcpy(filename, last_slash + 1);\n    } else {\n        // 没有斜杠表示当前目录中的文件\n        parent_path[0] = '.';\n        parent_path[1] = '\\0';\n        strcpy(filename, path);\n    }\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "41", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "dir_ops.c:42:14", "is_static": false, "semantic_explanation": "", "ret_type": "directory_t *", "name": "find_directory", "op_source": "define", "id": 21, "source_code": "directory_t* find_directory(const char *path) {\n    if (validate_path(path) != SUCCESS) {\n        return NULL;\n    }\n    \n    // 如果是根目录\n    if (strcmp(path, \"/\") == 0) {\n        return &root_directory;\n    }\n    \n    // 简化版：只支持两级目录结构\n    // 实际实现需要递归查找\n    \n    char parent_path[MAX_PATH_LEN];\n    char dirname[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, dirname);\n    \n    // 只看根目录下的目录\n    if (strcmp(parent_path, \"/\") == 0) {\n        for (int i = 0; i < root_directory.file_count; i++) {\n            if (strcmp(root_directory.files[i].name, dirname) == 0 && \n                root_directory.files[i].type == FILE_TYPE_DIRECTORY) {\n                // 假设目录实际内容存储在与file_entry关联的某处\n                // 这里简化返回一个指向目录结构的指针\n                return (directory_t*)root_directory.files[i].block_pointers;\n            }\n        }\n    }\n    \n    return NULL;  // 目录不存在\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "42", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "fs_api.c:133:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "fs_read", "op_source": "define", "id": 46, "source_code": "int fs_read(const char *path, void *buffer, size_t size, size_t offset) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // 查找父目录\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_FILE_NOT_FOUND;  // 父目录不存在\n    }\n    \n    // 读取文件\n    return read_file(parent, filename, buffer, size, offset);\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "43", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "fs_api.c:183:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "fs_write", "op_source": "define", "id": 51, "source_code": "int fs_write(const char *path, const void *buffer, size_t size, size_t offset) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // 查找父目录\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_FILE_NOT_FOUND;  // 父目录不存在\n    }\n    \n    // 写入文件\n    return write_file(parent, filename, buffer, size, offset);\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "44", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "fs_api.c:244:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "fs_list", "op_source": "define", "id": 58, "source_code": "int fs_list(const char *path, file_entry_t **entries, int *count) {\n    return list_directory(path, entries, count);\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "45", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "file_ops.c:41:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "create_file", "op_source": "define", "id": 8, "source_code": "int create_file(directory_t *parent_dir, const char *filename, file_permissions_t permissions) {\n    // 检查目录是否已满\n    if (parent_dir->file_count >= MAX_FILES_PER_DIR) {\n        return ERR_DISK_FULL;\n    }\n    \n    // 检查文件名长度\n    if (strlen(filename) >= MAX_FILENAME_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // 检查文件是否已存在\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0) {\n            return ERR_FILE_EXISTS;\n        }\n    }\n    \n    // 创建新文件项\n    file_entry_t *new_file = &parent_dir->files[parent_dir->file_count];\n    strcpy(new_file->name, filename);\n    new_file->type = FILE_TYPE_REGULAR;\n    new_file->size = 0;\n    new_file->permissions = permissions;\n    new_file->created_time = time(NULL);\n    new_file->modified_time = new_file->created_time;\n    \n    // 增加目录文件计数\n    parent_dir->file_count++;\n    \n    return SUCCESS;\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "46", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "file_ops.c:101:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "read_file", "op_source": "define", "id": 13, "source_code": "int read_file(directory_t *parent_dir, const char *filename, void *buffer, size_t size, size_t offset) {\n    // 查找文件\n    file_entry_t *file = NULL;\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0 && \n            parent_dir->files[i].type == FILE_TYPE_REGULAR) {\n            file = &parent_dir->files[i];\n            break;\n        }\n    }\n    \n    if (!file) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // 检查读取权限\n    if (!file->permissions.read) {\n        return ERR_PERMISSION_DENIED;\n    }\n    \n    // 检查读取范围是否有效\n    if (offset >= file->size) {\n        return 0;  // 没有可读取的内容\n    }\n    \n    // 计算实际可读取的字节数\n    size_t bytes_to_read = (offset + size <= file->size) ? size : (file->size - offset);\n    \n    // 简化版：实际应该从block_pointers指向的块中读取数据\n    // 这里只是示例，所以返回可读取的字节数\n    \n    return bytes_to_read;\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "47", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "fs_api.c:77:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "fs_create_file", "op_source": "define", "id": 41, "source_code": "int fs_create_file(const char *path, int read_perm, int write_perm, int exec_perm) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // 查找父目录\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_INVALID_PATH;  // 父目录不存在\n    }\n    \n    // 设置权限\n    file_permissions_t perms;\n    perms.read = read_perm ? 1 : 0;\n    perms.write = write_perm ? 1 : 0;\n    perms.execute = exec_perm ? 1 : 0;\n    \n    // 创建文件\n    return create_file(parent, filename, perms);\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "48", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "file_ops.c:168:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "write_file", "op_source": "define", "id": 15, "source_code": "int write_file(directory_t *parent_dir, const char *filename, const void *buffer, size_t size, size_t offset) {\n    // 查找文件\n    file_entry_t *file = NULL;\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0 && \n            parent_dir->files[i].type == FILE_TYPE_REGULAR) {\n            file = &parent_dir->files[i];\n            break;\n        }\n    }\n    \n    if (!file) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // 检查写入权限\n    if (!file->permissions.write) {\n        return ERR_PERMISSION_DENIED;\n    }\n    \n    // 检查是否需要扩展文件大小\n    size_t new_size = (offset + size > file->size) ? (offset + size) : file->size;\n    \n    // 检查文件大小上限\n    if (new_size > MAX_FILE_SIZE) {\n        return ERR_DISK_FULL;\n    }\n    \n    // 如果需要分配新块\n    if (new_size > file->size) {\n        int blocks_needed = (new_size - file->size + BLOCK_SIZE - 1) / BLOCK_SIZE;\n        int start_block = allocate_blocks(blocks_needed);\n        if (start_block < 0) {\n            return start_block;  // 返回错误码\n        }\n        \n        // 简化版：应该更新file->block_pointers，分配新块\n    }\n    \n    // 更新文件大小和修改时间\n    file->size = new_size;\n    file->modified_time = time(NULL);\n    \n    return size;  // 返回写入的字节数\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "49", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "dir_ops.c:106:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "create_directory", "op_source": "define", "id": 25, "source_code": "int create_directory(const char *path) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char dirname[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, dirname);\n    \n    // 查找父目录\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_INVALID_PATH;  // 父目录不存在\n    }\n    \n    // 检查目录名长度\n    if (strlen(dirname) >= MAX_FILENAME_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // 检查目录是否已存在\n    for (int i = 0; i < parent->file_count; i++) {\n        if (strcmp(parent->files[i].name, dirname) == 0) {\n            return ERR_FILE_EXISTS;\n        }\n    }\n    \n    // 创建目录项\n    file_entry_t *dir_entry = &parent->files[parent->file_count];\n    strcpy(dir_entry->name, dirname);\n    dir_entry->type = FILE_TYPE_DIRECTORY;\n    dir_entry->size = 0;\n    \n    // 设置默认权限 (读/写/执行)\n    dir_entry->permissions.read = 1;\n    dir_entry->permissions.write = 1;\n    dir_entry->permissions.execute = 1;\n    \n    dir_entry->created_time = time(NULL);\n    dir_entry->modified_time = dir_entry->created_time;\n    \n    // 分配新目录结构\n    directory_t *new_dir = (directory_t*)malloc(sizeof(directory_t));\n    if (!new_dir) {\n        return ERR_DISK_FULL;  // 内存分配失败\n    }\n    \n    // 初始化新目录\n    strcpy(new_dir->name, dirname);\n    new_dir->file_count = 0;\n    \n    // 存储目录结构指针\n    // 简化版：将目录结构指针存储在block_pointers[0]\n    dir_entry->block_pointers[0] = (int)new_dir;\n    \n    // 增加父目录文件计数\n    parent->file_count++;\n    \n    return SUCCESS;\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "50", "labels": ["Global"]}, "properties": {"decl_loc": "", "def_loc": "dir_ops.c:15:20", "is_static": false, "semantic_explanation": "", "is_extern": false, "name": "root_directory", "op_source": "define", "id": 1, "source_code": "/* dir_ops.c */\n#include \"file_types.h\"\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n\n// 声明从utils.c导入的函数\nextern int validate_path(const char *path);\nextern void split_path(const char *path, char *parent_path, char *filename);\n\n// 声明从file_ops.c导入的函数\nextern int create_file(directory_t *parent_dir, const char *filename, file_permissions_t permissions);\n\n// 全局根目录\nstatic directory_t root_directory = { \"/\", {}, 0 };\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "51", "labels": ["Type"]}, "properties": {"decl_loc": "", "def_loc": "constants.h:32:9", "semantic_explanation": "", "is_function_pointer": false, "kind": "", "name": "fs_error_t", "op_source": "use", "is_definition": false, "id": 1, "source_code": "typedef enum {\n    SUCCESS = 0,\n    ERR_FILE_NOT_FOUND = -1,\n    ERR_FILE_EXISTS = -2,\n    ERR_DISK_FULL = -3,\n    ERR_INVALID_PATH = -4,\n    ERR_PERMISSION_DENIED = -5\n} fs_error_t;", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "52", "labels": ["Type"]}, "properties": {"decl_loc": "", "def_loc": "file_types.h:74:3", "semantic_explanation": "", "is_function_pointer": false, "kind": "", "name": "directory_t", "op_source": "use", "is_definition": false, "id": 3, "source_code": "typedef struct {\n    char name[MAX_FILENAME_LEN];\n    file_entry_t files[MAX_FILES_PER_DIR];\n    int file_count;\n} directory_t;", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "53", "labels": ["Type"]}, "properties": {"decl_loc": "", "def_loc": "file_types.h:31:3", "semantic_explanation": "", "is_function_pointer": false, "kind": "", "name": "file_permissions_t", "op_source": "use", "is_definition": false, "id": 4, "source_code": "typedef struct {\n    unsigned int read: 1;\n    unsigned int write: 1;\n    unsigned int execute: 1;\n} file_permissions_t;\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "54", "labels": ["Type"]}, "properties": {"decl_loc": "", "def_loc": "file_types.h:56:3", "semantic_explanation": "", "is_function_pointer": false, "kind": "", "name": "file_entry_t", "op_source": "use", "is_definition": false, "id": 6, "source_code": "typedef struct {\n    char name[MAX_FILENAME_LEN];\n    file_type_t type;\n    size_t size;\n    file_permissions_t permissions;\n    time_t created_time;\n    time_t modified_time;\n    int block_pointers[10];  // 简化的块指针数组\n} file_entry_t;\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "55", "labels": ["Type"]}, "properties": {"decl_loc": "", "def_loc": "file_types.h:13:9", "semantic_explanation": "", "is_function_pointer": false, "kind": "", "name": "file_type_t", "op_source": "use", "is_definition": false, "id": 7, "source_code": "typedef enum {\n    FILE_TYPE_REGULAR = 1,\n    FILE_TYPE_DIRECTORY = 2,\n    FILE_TYPE_SYMLINK = 3\n} file_type_t;\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "56", "labels": ["Type"]}, "properties": {"decl_loc": "", "def_loc": "/usr/include/clang/18.1.3/include/__stddef_size_t.h:18:23", "semantic_explanation": "", "kind": "", "is_function_pointer": false, "name": "size_t", "op_source": "use", "is_definition": false, "id": 9, "source_code": "typedef __SIZE_TYPE__ size_t;\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "57", "labels": ["Macro"]}, "properties": {"def_loc": "constants.h:13:9", "semantic_explanation": "", "name": "MAX_FILES_PER_DIR", "id": 4, "source_code": "#define MAX_FILES_PER_DIR 100\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "58", "labels": ["Macro"]}, "properties": {"def_loc": "/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9", "semantic_explanation": "", "name": "NULL", "id": 6, "source_code": "#define NULL ((void*)0)\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "59", "labels": ["Macro"]}, "properties": {"def_loc": "constants.h:21:9", "semantic_explanation": "", "name": "BLOCK_SIZE", "id": 3, "source_code": "#define BLOCK_SIZE 4096\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "60", "labels": ["Macro"]}, "properties": {"def_loc": "constants.h:17:9", "semantic_explanation": "", "name": "MAX_FILE_SIZE", "id": 2, "source_code": "#define MAX_FILE_SIZE 1048576  // 1MB\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "61", "labels": ["Macro"]}, "properties": {"def_loc": "constants.h:9:9", "semantic_explanation": "", "name": "MAX_PATH_LEN", "id": 1, "source_code": "#define MAX_PATH_LEN 1024\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "62", "labels": ["Macro"]}, "properties": {"def_loc": "constants.h:4:9", "semantic_explanation": "", "name": "MAX_FILENAME_LEN", "id": 5, "source_code": "#define MAX_FILENAME_LEN 256\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "0", "labels": ["DEFINES_FUNCTION"], "start_id": "12", "end_id": "39"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "1", "labels": ["DEFINES_FUNCTION"], "start_id": "12", "end_id": "40"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "2", "labels": ["DEFINES_FUNCTION"], "start_id": "12", "end_id": "34"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "3", "labels": ["DEFINES_FUNCTION"], "start_id": "0", "end_id": "45"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "4", "labels": ["DEFINES_FUNCTION"], "start_id": "0", "end_id": "46"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "5", "labels": ["DEFINES_FUNCTION"], "start_id": "0", "end_id": "48"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "6", "labels": ["DEFINES_FUNCTION"], "start_id": "1", "end_id": "41"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "7", "labels": ["DEFINES_FUNCTION"], "start_id": "1", "end_id": "49"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "8", "labels": ["DEFINES_FUNCTION"], "start_id": "1", "end_id": "35"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "9", "labels": ["DEFINES_FUNCTION"], "start_id": "2", "end_id": "36"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "10", "labels": ["DEFINES_FUNCTION"], "start_id": "2", "end_id": "47"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "11", "labels": ["DEFINES_FUNCTION"], "start_id": "2", "end_id": "42"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "12", "labels": ["DEFINES_FUNCTION"], "start_id": "2", "end_id": "43"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "13", "labels": ["DEFINES_FUNCTION"], "start_id": "2", "end_id": "37"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "14", "labels": ["DEFINES_FUNCTION"], "start_id": "2", "end_id": "44"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "15", "labels": ["DEFINES_FUNCTION"], "start_id": "5", "end_id": "38"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "16", "labels": ["DECLARES_FUNCTION"], "start_id": "0", "end_id": "19"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "17", "labels": ["DECLARES_FUNCTION"], "start_id": "0", "end_id": "20"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "18", "labels": ["DECLARES_FUNCTION"], "start_id": "1", "end_id": "22"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "19", "labels": ["DECLARES_FUNCTION"], "start_id": "1", "end_id": "23"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "20", "labels": ["DECLARES_FUNCTION"], "start_id": "1", "end_id": "24"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "21", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "26"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "22", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "27"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "23", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "28"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "24", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "29"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "25", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "30"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "26", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "31"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "27", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "32"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "28", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "33"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "29", "labels": ["DECLARES_FUNCTION"], "start_id": "9", "end_id": "18"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "30", "labels": ["DEFINES_GLOBAL"], "start_id": "1", "end_id": "50"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "31", "labels": ["DEFINES_TYPE"], "start_id": "10", "end_id": "56"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "32", "labels": ["DEFINES_MACRO"], "start_id": "11", "end_id": "58"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "33", "labels": ["INCLUDES_FILE"], "start_id": "12", "end_id": "3"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "34", "labels": ["INCLUDES_FILE"], "start_id": "12", "end_id": "6"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "35", "labels": ["INCLUDES_FILE"], "start_id": "12", "end_id": "8"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "36", "labels": ["INCLUDES_FILE"], "start_id": "0", "end_id": "3"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "37", "labels": ["INCLUDES_FILE"], "start_id": "0", "end_id": "6"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "38", "labels": ["INCLUDES_FILE"], "start_id": "0", "end_id": "4"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "39", "labels": ["INCLUDES_FILE"], "start_id": "1", "end_id": "3"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "40", "labels": ["INCLUDES_FILE"], "start_id": "1", "end_id": "6"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "41", "labels": ["INCLUDES_FILE"], "start_id": "1", "end_id": "4"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "42", "labels": ["INCLUDES_FILE"], "start_id": "2", "end_id": "3"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "43", "labels": ["INCLUDES_FILE"], "start_id": "2", "end_id": "6"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "44", "labels": ["INCLUDES_FILE"], "start_id": "2", "end_id": "8"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "45", "labels": ["INCLUDES_FILE"], "start_id": "5", "end_id": "7"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "46", "labels": ["INCLUDES_FILE"], "start_id": "5", "end_id": "8"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "47", "labels": ["INVOKES"], "start_id": "39", "end_id": "13"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "48", "labels": ["INVOKES"], "start_id": "40", "end_id": "14"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "49", "labels": ["INVOKES"], "start_id": "40", "end_id": "15"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "50", "labels": ["INVOKES"], "start_id": "40", "end_id": "16"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "51", "labels": ["INVOKES"], "start_id": "45", "end_id": "13"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "52", "labels": ["INVOKES"], "start_id": "45", "end_id": "17"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "53", "labels": ["INVOKES"], "start_id": "45", "end_id": "16"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "54", "labels": ["INVOKES"], "start_id": "45", "end_id": "18"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "55", "labels": ["INVOKES"], "start_id": "46", "end_id": "17"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "56", "labels": ["INVOKES"], "start_id": "48", "end_id": "17"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "57", "labels": ["INVOKES"], "start_id": "48", "end_id": "20"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "58", "labels": ["INVOKES"], "start_id": "48", "end_id": "18"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "59", "labels": ["INVOKES"], "start_id": "41", "end_id": "22"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "60", "labels": ["INVOKES"], "start_id": "41", "end_id": "17"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "61", "labels": ["INVOKES"], "start_id": "41", "end_id": "23"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "62", "labels": ["INVOKES"], "start_id": "49", "end_id": "22"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "63", "labels": ["INVOKES"], "start_id": "49", "end_id": "23"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "64", "labels": ["INVOKES"], "start_id": "49", "end_id": "41"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "65", "labels": ["INVOKES"], "start_id": "49", "end_id": "13"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "66", "labels": ["INVOKES"], "start_id": "49", "end_id": "17"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "67", "labels": ["INVOKES"], "start_id": "49", "end_id": "16"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "68", "labels": ["INVOKES"], "start_id": "49", "end_id": "18"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "69", "labels": ["INVOKES"], "start_id": "49", "end_id": "21"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "70", "labels": ["INVOKES"], "start_id": "35", "end_id": "41"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "71", "labels": ["INVOKES"], "start_id": "36", "end_id": "25"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "72", "labels": ["INVOKES"], "start_id": "47", "end_id": "26"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "73", "labels": ["INVOKES"], "start_id": "47", "end_id": "27"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "74", "labels": ["INVOKES"], "start_id": "47", "end_id": "31"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "75", "labels": ["INVOKES"], "start_id": "47", "end_id": "28"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "76", "labels": ["INVOKES"], "start_id": "42", "end_id": "26"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "77", "labels": ["INVOKES"], "start_id": "42", "end_id": "27"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "78", "labels": ["INVOKES"], "start_id": "42", "end_id": "31"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "79", "labels": ["INVOKES"], "start_id": "42", "end_id": "29"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "80", "labels": ["INVOKES"], "start_id": "43", "end_id": "26"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "81", "labels": ["INVOKES"], "start_id": "43", "end_id": "27"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "82", "labels": ["INVOKES"], "start_id": "43", "end_id": "31"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "83", "labels": ["INVOKES"], "start_id": "43", "end_id": "30"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "84", "labels": ["INVOKES"], "start_id": "37", "end_id": "32"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "85", "labels": ["INVOKES"], "start_id": "44", "end_id": "33"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "86", "labels": ["INVOKES"], "start_id": "38", "end_id": "25"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "87", "labels": ["IMPLEMENTED_BY"], "start_id": "20", "end_id": "34"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "88", "labels": ["IMPLEMENTED_BY"], "start_id": "19", "end_id": "39"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "89", "labels": ["IMPLEMENTED_BY"], "start_id": "22", "end_id": "39"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "90", "labels": ["IMPLEMENTED_BY"], "start_id": "23", "end_id": "40"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "91", "labels": ["IMPLEMENTED_BY"], "start_id": "24", "end_id": "45"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "92", "labels": ["IMPLEMENTED_BY"], "start_id": "26", "end_id": "39"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "93", "labels": ["IMPLEMENTED_BY"], "start_id": "27", "end_id": "40"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "94", "labels": ["IMPLEMENTED_BY"], "start_id": "31", "end_id": "41"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "95", "labels": ["IMPLEMENTED_BY"], "start_id": "28", "end_id": "45"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "96", "labels": ["IMPLEMENTED_BY"], "start_id": "29", "end_id": "46"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "97", "labels": ["IMPLEMENTED_BY"], "start_id": "30", "end_id": "48"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "98", "labels": ["IMPLEMENTED_BY"], "start_id": "32", "end_id": "49"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "99", "labels": ["IMPLEMENTED_BY"], "start_id": "33", "end_id": "35"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "100", "labels": ["USES_GLOBAL"], "start_id": "41", "end_id": "50"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "101", "labels": ["USES_TYPE"], "start_id": "39", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "102", "labels": ["USES_TYPE"], "start_id": "34", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "103", "labels": ["USES_TYPE"], "start_id": "45", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "104", "labels": ["USES_TYPE"], "start_id": "45", "end_id": "53"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "105", "labels": ["USES_TYPE"], "start_id": "45", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "106", "labels": ["USES_TYPE"], "start_id": "45", "end_id": "54"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "107", "labels": ["USES_TYPE"], "start_id": "45", "end_id": "55"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "108", "labels": ["USES_TYPE"], "start_id": "46", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "109", "labels": ["USES_TYPE"], "start_id": "46", "end_id": "56"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "110", "labels": ["USES_TYPE"], "start_id": "46", "end_id": "54"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "111", "labels": ["USES_TYPE"], "start_id": "46", "end_id": "55"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "112", "labels": ["USES_TYPE"], "start_id": "46", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "113", "labels": ["USES_TYPE"], "start_id": "48", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "114", "labels": ["USES_TYPE"], "start_id": "48", "end_id": "56"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "115", "labels": ["USES_TYPE"], "start_id": "48", "end_id": "54"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "116", "labels": ["USES_TYPE"], "start_id": "48", "end_id": "55"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "117", "labels": ["USES_TYPE"], "start_id": "48", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "118", "labels": ["USES_TYPE"], "start_id": "41", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "119", "labels": ["USES_TYPE"], "start_id": "41", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "120", "labels": ["USES_TYPE"], "start_id": "41", "end_id": "55"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "121", "labels": ["USES_TYPE"], "start_id": "49", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "122", "labels": ["USES_TYPE"], "start_id": "49", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "123", "labels": ["USES_TYPE"], "start_id": "49", "end_id": "54"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "124", "labels": ["USES_TYPE"], "start_id": "49", "end_id": "55"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "125", "labels": ["USES_TYPE"], "start_id": "35", "end_id": "54"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "126", "labels": ["USES_TYPE"], "start_id": "35", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "127", "labels": ["USES_TYPE"], "start_id": "35", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "128", "labels": ["USES_TYPE"], "start_id": "36", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "129", "labels": ["USES_TYPE"], "start_id": "47", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "130", "labels": ["USES_TYPE"], "start_id": "47", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "131", "labels": ["USES_TYPE"], "start_id": "47", "end_id": "53"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "132", "labels": ["USES_TYPE"], "start_id": "42", "end_id": "56"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "133", "labels": ["USES_TYPE"], "start_id": "42", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "134", "labels": ["USES_TYPE"], "start_id": "42", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "135", "labels": ["USES_TYPE"], "start_id": "43", "end_id": "56"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "136", "labels": ["USES_TYPE"], "start_id": "43", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "137", "labels": ["USES_TYPE"], "start_id": "43", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "138", "labels": ["USES_TYPE"], "start_id": "44", "end_id": "54"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "139", "labels": ["USES_MACRO"], "start_id": "39", "end_id": "61"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "140", "labels": ["USES_MACRO"], "start_id": "34", "end_id": "60"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "141", "labels": ["USES_MACRO"], "start_id": "34", "end_id": "59"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "142", "labels": ["USES_MACRO"], "start_id": "45", "end_id": "57"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "143", "labels": ["USES_MACRO"], "start_id": "45", "end_id": "62"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "144", "labels": ["USES_MACRO"], "start_id": "45", "end_id": "58"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "145", "labels": ["USES_MACRO"], "start_id": "46", "end_id": "58"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "146", "labels": ["USES_MACRO"], "start_id": "48", "end_id": "58"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "147", "labels": ["USES_MACRO"], "start_id": "48", "end_id": "60"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "148", "labels": ["USES_MACRO"], "start_id": "48", "end_id": "59"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "149", "labels": ["USES_MACRO"], "start_id": "41", "end_id": "58"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "150", "labels": ["USES_MACRO"], "start_id": "41", "end_id": "61"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "151", "labels": ["USES_MACRO"], "start_id": "41", "end_id": "62"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "152", "labels": ["USES_MACRO"], "start_id": "49", "end_id": "61"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "153", "labels": ["USES_MACRO"], "start_id": "49", "end_id": "62"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "154", "labels": ["USES_MACRO"], "start_id": "49", "end_id": "58"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "155", "labels": ["USES_MACRO"], "start_id": "36", "end_id": "59"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "156", "labels": ["USES_MACRO"], "start_id": "36", "end_id": "60"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "157", "labels": ["USES_MACRO"], "start_id": "47", "end_id": "61"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "158", "labels": ["USES_MACRO"], "start_id": "47", "end_id": "62"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "159", "labels": ["USES_MACRO"], "start_id": "42", "end_id": "61"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "160", "labels": ["USES_MACRO"], "start_id": "42", "end_id": "62"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "161", "labels": ["USES_MACRO"], "start_id": "43", "end_id": "61"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "162", "labels": ["USES_MACRO"], "start_id": "43", "end_id": "62"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "163", "labels": ["USES_TYPE"], "start_id": "50", "end_id": "52"}, "properties": {}}
