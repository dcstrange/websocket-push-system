{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "0", "labels": ["File"]}, "properties": {"path": "file_ops.c", "file_hash": "", "semantic_explanation": "[unexplaned]", "id": 5, "source_code": "/* file_ops.c */\n#include \"file_types.h\"\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n\n// \u58f0\u660e\u4eceutils.c\u5bfc\u5165\u7684\u51fd\u6570\nextern int validate_path(const char *path);\nextern int allocate_blocks(int num_blocks);\n\n/*\ncreate_file(\u51fd\u6570): \u5728\u6307\u5b9a\u76ee\u5f55\u4e2d\u521b\u5efa\u65b0\u7684\u7a7a\u6587\u4ef6\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u5728\u7236\u76ee\u5f55\u4e2d\u521b\u5efa\u5177\u6709\u6307\u5b9a\u6587\u4ef6\u540d\u548c\u6743\u9650\u7684\u65b0\u6587\u4ef6\n- \u521d\u59cb\u5316\u6587\u4ef6\u5143\u6570\u636e\uff0c\u5305\u62ec\u7c7b\u578b\u3001\u5927\u5c0f\u548c\u65f6\u95f4\u6233\n- \u6587\u4ef6\u521b\u5efa\u65f6\u4e0d\u5206\u914d\u6570\u636e\u5757\uff0c\u521d\u59cb\u5927\u5c0f\u4e3a0\n\n\u53c2\u6570:\n- parent_dir: \u8981\u5728\u5176\u4e2d\u521b\u5efa\u6587\u4ef6\u7684\u76ee\u5f55\n- filename: \u65b0\u6587\u4ef6\u7684\u540d\u79f0\n- permissions: \u8981\u5e94\u7528\u7684\u8bfb/\u5199/\u6267\u884c\u6743\u9650\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u6587\u4ef6\u521b\u5efa\u6210\u529f\n- ERR_DISK_FULL: \u76ee\u5f55\u5df2\u8fbe\u5230\u6700\u5927\u6587\u4ef6\u6570\u9650\u5236\n- ERR_INVALID_PATH: \u6587\u4ef6\u540d\u957f\u5ea6\u8d85\u8fc7\u9650\u5236\n- ERR_FILE_EXISTS: \u540c\u540d\u6587\u4ef6\u5df2\u5b58\u5728\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- MAX_FILES_PER_DIR\u5e38\u91cf(\u76ee\u5f55\u5bb9\u91cf\u9650\u5236)\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- ERR_DISK_FULL\u5e38\u91cf(\u7a7a\u95f4\u4e0d\u8db3\u9519\u8bef\u7801)\n- ERR_INVALID_PATH\u5e38\u91cf(\u8def\u5f84\u65e0\u6548\u9519\u8bef\u7801)\n- ERR_FILE_EXISTS\u5e38\u91cf(\u6587\u4ef6\u5df2\u5b58\u5728\u9519\u8bef\u7801)\n- SUCCESS\u5e38\u91cf(\u6210\u529f\u72b6\u6001\u7801)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n- FILE_TYPE_REGULAR\u5e38\u91cf(\u5e38\u89c4\u6587\u4ef6\u7c7b\u578b\u6807\u8bc6)\n- directory_t\u7ed3\u6784(\u76ee\u5f55\u5185\u5bb9\u8868\u793a)\n*/\nint create_file(directory_t *parent_dir, const char *filename, file_permissions_t permissions) {\n    // \u68c0\u67e5\u76ee\u5f55\u662f\u5426\u5df2\u6ee1\n    if (parent_dir->file_count >= MAX_FILES_PER_DIR) {\n        return ERR_DISK_FULL;\n    }\n    \n    // \u68c0\u67e5\u6587\u4ef6\u540d\u957f\u5ea6\n    if (strlen(filename) >= MAX_FILENAME_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5df2\u5b58\u5728\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0) {\n            return ERR_FILE_EXISTS;\n        }\n    }\n    \n    // \u521b\u5efa\u65b0\u6587\u4ef6\u9879\n    file_entry_t *new_file = &parent_dir->files[parent_dir->file_count];\n    strcpy(new_file->name, filename);\n    new_file->type = FILE_TYPE_REGULAR;\n    new_file->size = 0;\n    new_file->permissions = permissions;\n    new_file->created_time = time(NULL);\n    new_file->modified_time = new_file->created_time;\n    \n    // \u589e\u52a0\u76ee\u5f55\u6587\u4ef6\u8ba1\u6570\n    parent_dir->file_count++;\n    \n    return SUCCESS;\n}\n\n/*\nread_file(\u51fd\u6570): \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u5728\u76ee\u5f55\u4e2d\u5b9a\u4f4d\u6307\u5b9a\u6587\u4ef6\n- \u9a8c\u8bc1\u8bf7\u6c42\u7684\u8bfb\u53d6\u6743\u9650\u548c\u8303\u56f4\n- \u4ece\u6587\u4ef6\u7684\u6307\u5b9a\u504f\u79fb\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\n\n\u53c2\u6570:\n- parent_dir: \u5305\u542b\u76ee\u6807\u6587\u4ef6\u7684\u76ee\u5f55\n- filename: \u8981\u8bfb\u53d6\u7684\u6587\u4ef6\u540d\n- buffer: \u5b58\u653e\u8bfb\u53d6\u6570\u636e\u7684\u5185\u5b58\u7f13\u51b2\u533a\n- size: \u8981\u8bfb\u53d6\u7684\u6700\u5927\u5b57\u8282\u6570\n- offset: \u6587\u4ef6\u5185\u5f00\u59cb\u8bfb\u53d6\u7684\u4f4d\u7f6e(\u5b57\u8282\u504f\u79fb)\n\n\u8fd4\u56de\u503c:\n- \u6b63\u6570: \u5b9e\u9645\u8bfb\u53d6\u7684\u5b57\u8282\u6570\n- ERR_FILE_NOT_FOUND: \u6307\u5b9a\u6587\u4ef6\u4e0d\u5b58\u5728\n- ERR_PERMISSION_DENIED: \u7f3a\u5c11\u8bfb\u53d6\u6743\u9650\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- ERR_FILE_NOT_FOUND\u5e38\u91cf(\u6587\u4ef6\u4e0d\u5b58\u5728\u9519\u8bef\u7801)\n- ERR_PERMISSION_DENIED\u5e38\u91cf(\u6743\u9650\u4e0d\u8db3\u9519\u8bef\u7801)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n- FILE_TYPE_REGULAR\u5e38\u91cf(\u5e38\u89c4\u6587\u4ef6\u7c7b\u578b\u6807\u8bc6)\n- directory_t\u7ed3\u6784(\u76ee\u5f55\u5185\u5bb9\u8868\u793a)\n*/\nint read_file(directory_t *parent_dir, const char *filename, void *buffer, size_t size, size_t offset) {\n    // \u67e5\u627e\u6587\u4ef6\n    file_entry_t *file = NULL;\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0 && \n            parent_dir->files[i].type == FILE_TYPE_REGULAR) {\n            file = &parent_dir->files[i];\n            break;\n        }\n    }\n    \n    if (!file) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // \u68c0\u67e5\u8bfb\u53d6\u6743\u9650\n    if (!file->permissions.read) {\n        return ERR_PERMISSION_DENIED;\n    }\n    \n    // \u68c0\u67e5\u8bfb\u53d6\u8303\u56f4\u662f\u5426\u6709\u6548\n    if (offset >= file->size) {\n        return 0;  // \u6ca1\u6709\u53ef\u8bfb\u53d6\u7684\u5185\u5bb9\n    }\n    \n    // \u8ba1\u7b97\u5b9e\u9645\u53ef\u8bfb\u53d6\u7684\u5b57\u8282\u6570\n    size_t bytes_to_read = (offset + size <= file->size) ? size : (file->size - offset);\n    \n    // \u7b80\u5316\u7248\uff1a\u5b9e\u9645\u5e94\u8be5\u4eceblock_pointers\u6307\u5411\u7684\u5757\u4e2d\u8bfb\u53d6\u6570\u636e\n    // \u8fd9\u91cc\u53ea\u662f\u793a\u4f8b\uff0c\u6240\u4ee5\u8fd4\u56de\u53ef\u8bfb\u53d6\u7684\u5b57\u8282\u6570\n    \n    return bytes_to_read;\n}\n\n/*\nwrite_file(\u51fd\u6570): \u5411\u6587\u4ef6\u5199\u5165\u6570\u636e\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u5728\u76ee\u5f55\u4e2d\u5b9a\u4f4d\u6307\u5b9a\u6587\u4ef6\n- \u9a8c\u8bc1\u5199\u5165\u6743\u9650\n- \u5fc5\u8981\u65f6\u6269\u5c55\u6587\u4ef6\u5927\u5c0f\u5e76\u5206\u914d\u65b0\u5b58\u50a8\u5757\n- \u5728\u6307\u5b9a\u504f\u79fb\u5904\u5199\u5165\u6570\u636e\u5e76\u66f4\u65b0\u6587\u4ef6\u5143\u6570\u636e\n\n\u53c2\u6570:\n- parent_dir: \u5305\u542b\u76ee\u6807\u6587\u4ef6\u7684\u76ee\u5f55\n- filename: \u8981\u5199\u5165\u7684\u6587\u4ef6\u540d\n- buffer: \u5305\u542b\u8981\u5199\u5165\u6570\u636e\u7684\u5185\u5b58\u7f13\u51b2\u533a\n- size: \u8981\u5199\u5165\u7684\u5b57\u8282\u6570\n- offset: \u6587\u4ef6\u5185\u5f00\u59cb\u5199\u5165\u7684\u4f4d\u7f6e(\u5b57\u8282\u504f\u79fb)\n\n\u8fd4\u56de\u503c:\n- \u6b63\u6570: \u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570\n- ERR_FILE_NOT_FOUND: \u6307\u5b9a\u6587\u4ef6\u4e0d\u5b58\u5728\n- ERR_PERMISSION_DENIED: \u7f3a\u5c11\u5199\u5165\u6743\u9650\n- ERR_DISK_FULL: \u5b58\u50a8\u7a7a\u95f4\u4e0d\u8db3\u6216\u6587\u4ef6\u5927\u5c0f\u8d85\u9650\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- ERR_FILE_NOT_FOUND\u5e38\u91cf(\u6587\u4ef6\u4e0d\u5b58\u5728\u9519\u8bef\u7801)\n- ERR_PERMISSION_DENIED\u5e38\u91cf(\u6743\u9650\u4e0d\u8db3\u9519\u8bef\u7801)\n- ERR_DISK_FULL\u5e38\u91cf(\u7a7a\u95f4\u4e0d\u8db3\u9519\u8bef\u7801)\n- MAX_FILE_SIZE\u5e38\u91cf(\u6587\u4ef6\u5927\u5c0f\u4e0a\u9650)\n- BLOCK_SIZE\u5e38\u91cf(\u5b58\u50a8\u5757\u5927\u5c0f)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n- FILE_TYPE_REGULAR\u5e38\u91cf(\u5e38\u89c4\u6587\u4ef6\u7c7b\u578b\u6807\u8bc6)\n- directory_t\u7ed3\u6784(\u76ee\u5f55\u5185\u5bb9\u8868\u793a)\n- allocate_blocks\u51fd\u6570(\u5b58\u50a8\u7a7a\u95f4\u5206\u914d)\n*/\nint write_file(directory_t *parent_dir, const char *filename, const void *buffer, size_t size, size_t offset) {\n    // \u67e5\u627e\u6587\u4ef6\n    file_entry_t *file = NULL;\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0 && \n            parent_dir->files[i].type == FILE_TYPE_REGULAR) {\n            file = &parent_dir->files[i];\n            break;\n        }\n    }\n    \n    if (!file) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // \u68c0\u67e5\u5199\u5165\u6743\u9650\n    if (!file->permissions.write) {\n        return ERR_PERMISSION_DENIED;\n    }\n    \n    // \u68c0\u67e5\u662f\u5426\u9700\u8981\u6269\u5c55\u6587\u4ef6\u5927\u5c0f\n    size_t new_size = (offset + size > file->size) ? (offset + size) : file->size;\n    \n    // \u68c0\u67e5\u6587\u4ef6\u5927\u5c0f\u4e0a\u9650\n    if (new_size > MAX_FILE_SIZE) {\n        return ERR_DISK_FULL;\n    }\n    \n    // \u5982\u679c\u9700\u8981\u5206\u914d\u65b0\u5757\n    if (new_size > file->size) {\n        int blocks_needed = (new_size - file->size + BLOCK_SIZE - 1) / BLOCK_SIZE;\n        int start_block = allocate_blocks(blocks_needed);\n        if (start_block < 0) {\n            return start_block;  // \u8fd4\u56de\u9519\u8bef\u7801\n        }\n        \n        // \u7b80\u5316\u7248\uff1a\u5e94\u8be5\u66f4\u65b0file->block_pointers\uff0c\u5206\u914d\u65b0\u5757\n    }\n    \n    // \u66f4\u65b0\u6587\u4ef6\u5927\u5c0f\u548c\u4fee\u6539\u65f6\u95f4\n    file->size = new_size;\n    file->modified_time = time(NULL);\n    \n    return size;  // \u8fd4\u56de\u5199\u5165\u7684\u5b57\u8282\u6570\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "1", "labels": ["File"]}, "properties": {"path": "dir_ops.c", "file_hash": "", "semantic_explanation": "[unexplaned]", "id": 9, "source_code": "/* dir_ops.c */\n#include \"file_types.h\"\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n\n// \u58f0\u660e\u4eceutils.c\u5bfc\u5165\u7684\u51fd\u6570\nextern int validate_path(const char *path);\nextern void split_path(const char *path, char *parent_path, char *filename);\n\n// \u58f0\u660e\u4ecefile_ops.c\u5bfc\u5165\u7684\u51fd\u6570\nextern int create_file(directory_t *parent_dir, const char *filename, file_permissions_t permissions);\n\n// \u5168\u5c40\u6839\u76ee\u5f55\nstatic directory_t root_directory = { \"/\", {}, 0 };\n\n/*\nfind_directory(\u51fd\u6570): \u6839\u636e\u8def\u5f84\u67e5\u627e\u76ee\u5f55\u7ed3\u6784\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u9a8c\u8bc1\u63d0\u4f9b\u7684\u8def\u5f84\u683c\u5f0f\u662f\u5426\u6709\u6548\n- \u5728\u6587\u4ef6\u7cfb\u7edf\u5c42\u6b21\u7ed3\u6784\u4e2d\u67e5\u627e\u6307\u5b9a\u8def\u5f84\u7684\u76ee\u5f55\n- \u652f\u6301\u6839\u76ee\u5f55(\"/\")\u548c\u7b80\u5316\u7684\u4e24\u7ea7\u76ee\u5f55\u7ed3\u6784\n\n\u53c2\u6570:\n- path: \u8981\u67e5\u627e\u7684\u76ee\u5f55\u8def\u5f84\u5b57\u7b26\u4e32\n\n\u8fd4\u56de\u503c:\n- \u975eNULL: \u6307\u5411\u627e\u5230\u7684\u76ee\u5f55\u7ed3\u6784\u7684\u6307\u9488\n- NULL: \u76ee\u5f55\u4e0d\u5b58\u5728\u6216\u8def\u5f84\u65e0\u6548\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- validate_path\u51fd\u6570(\u8def\u5f84\u9a8c\u8bc1)\n- split_path\u51fd\u6570(\u8def\u5f84\u5206\u89e3)\n- MAX_PATH_LEN\u5e38\u91cf(\u8def\u5f84\u957f\u5ea6\u9650\u5236)\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- SUCCESS\u5e38\u91cf(\u6210\u529f\u72b6\u6001\u7801)\n- FILE_TYPE_DIRECTORY\u5e38\u91cf(\u76ee\u5f55\u7c7b\u578b\u6807\u8bc6)\n- directory_t\u7ed3\u6784(\u76ee\u5f55\u5185\u5bb9\u8868\u793a)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n*/\ndirectory_t* find_directory(const char *path) {\n    if (validate_path(path) != SUCCESS) {\n        return NULL;\n    }\n    \n    // \u5982\u679c\u662f\u6839\u76ee\u5f55\n    if (strcmp(path, \"/\") == 0) {\n        return &root_directory;\n    }\n    \n    // \u7b80\u5316\u7248\uff1a\u53ea\u652f\u6301\u4e24\u7ea7\u76ee\u5f55\u7ed3\u6784\n    // \u5b9e\u9645\u5b9e\u73b0\u9700\u8981\u9012\u5f52\u67e5\u627e\n    \n    char parent_path[MAX_PATH_LEN];\n    char dirname[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, dirname);\n    \n    // \u53ea\u770b\u6839\u76ee\u5f55\u4e0b\u7684\u76ee\u5f55\n    if (strcmp(parent_path, \"/\") == 0) {\n        for (int i = 0; i < root_directory.file_count; i++) {\n            if (strcmp(root_directory.files[i].name, dirname) == 0 && \n                root_directory.files[i].type == FILE_TYPE_DIRECTORY) {\n                // \u5047\u8bbe\u76ee\u5f55\u5b9e\u9645\u5185\u5bb9\u5b58\u50a8\u5728\u4e0efile_entry\u5173\u8054\u7684\u67d0\u5904\n                // \u8fd9\u91cc\u7b80\u5316\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u76ee\u5f55\u7ed3\u6784\u7684\u6307\u9488\n                return (directory_t*)root_directory.files[i].block_pointers;\n            }\n        }\n    }\n    \n    return NULL;  // \u76ee\u5f55\u4e0d\u5b58\u5728\n}\n\n/*\ncreate_directory(\u51fd\u6570): \u521b\u5efa\u65b0\u76ee\u5f55\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u9a8c\u8bc1\u8def\u5f84\u5e76\u89e3\u6790\u7236\u76ee\u5f55\u548c\u76ee\u5f55\u540d\n- \u68c0\u67e5\u7236\u76ee\u5f55\u662f\u5426\u5b58\u5728\u53ca\u5176\u5bb9\u91cf\n- \u521b\u5efa\u65b0\u76ee\u5f55\u7ed3\u6784\u5e76\u5728\u7236\u76ee\u5f55\u4e2d\u6dfb\u52a0\u5bf9\u5e94\u6761\u76ee\n\n\u53c2\u6570:\n- path: \u8981\u521b\u5efa\u7684\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u76ee\u5f55\u521b\u5efa\u6210\u529f\n- ERR_INVALID_PATH: \u8def\u5f84\u65e0\u6548\u6216\u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n- ERR_FILE_EXISTS: \u540c\u540d\u76ee\u5f55\u6216\u6587\u4ef6\u5df2\u5b58\u5728\n- ERR_DISK_FULL: \u5185\u5b58\u5206\u914d\u5931\u8d25\u6216\u76ee\u5f55\u5df2\u6ee1\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- validate_path\u51fd\u6570(\u8def\u5f84\u9a8c\u8bc1)\n- find_directory\u51fd\u6570(\u76ee\u5f55\u67e5\u627e)\n- split_path\u51fd\u6570(\u8def\u5f84\u5206\u89e3)\n- MAX_PATH_LEN\u5e38\u91cf(\u8def\u5f84\u957f\u5ea6\u9650\u5236)\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- ERR_INVALID_PATH\u5e38\u91cf(\u8def\u5f84\u65e0\u6548\u9519\u8bef\u7801)\n- ERR_FILE_EXISTS\u5e38\u91cf(\u6587\u4ef6\u5df2\u5b58\u5728\u9519\u8bef\u7801)\n- ERR_DISK_FULL\u5e38\u91cf(\u8d44\u6e90\u4e0d\u8db3\u9519\u8bef\u7801)\n- SUCCESS\u5e38\u91cf(\u6210\u529f\u72b6\u6001\u7801)\n- FILE_TYPE_DIRECTORY\u5e38\u91cf(\u76ee\u5f55\u7c7b\u578b\u6807\u8bc6)\n- directory_t\u7ed3\u6784(\u76ee\u5f55\u5185\u5bb9\u8868\u793a)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n*/\nint create_directory(const char *path) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char dirname[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, dirname);\n    \n    // \u67e5\u627e\u7236\u76ee\u5f55\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_INVALID_PATH;  // \u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n    }\n    \n    // \u68c0\u67e5\u76ee\u5f55\u540d\u957f\u5ea6\n    if (strlen(dirname) >= MAX_FILENAME_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // \u68c0\u67e5\u76ee\u5f55\u662f\u5426\u5df2\u5b58\u5728\n    for (int i = 0; i < parent->file_count; i++) {\n        if (strcmp(parent->files[i].name, dirname) == 0) {\n            return ERR_FILE_EXISTS;\n        }\n    }\n    \n    // \u521b\u5efa\u76ee\u5f55\u9879\n    file_entry_t *dir_entry = &parent->files[parent->file_count];\n    strcpy(dir_entry->name, dirname);\n    dir_entry->type = FILE_TYPE_DIRECTORY;\n    dir_entry->size = 0;\n    \n    // \u8bbe\u7f6e\u9ed8\u8ba4\u6743\u9650 (\u8bfb/\u5199/\u6267\u884c)\n    dir_entry->permissions.read = 1;\n    dir_entry->permissions.write = 1;\n    dir_entry->permissions.execute = 1;\n    \n    dir_entry->created_time = time(NULL);\n    dir_entry->modified_time = dir_entry->created_time;\n    \n    // \u5206\u914d\u65b0\u76ee\u5f55\u7ed3\u6784\n    directory_t *new_dir = (directory_t*)malloc(sizeof(directory_t));\n    if (!new_dir) {\n        return ERR_DISK_FULL;  // \u5185\u5b58\u5206\u914d\u5931\u8d25\n    }\n    \n    // \u521d\u59cb\u5316\u65b0\u76ee\u5f55\n    strcpy(new_dir->name, dirname);\n    new_dir->file_count = 0;\n    \n    // \u5b58\u50a8\u76ee\u5f55\u7ed3\u6784\u6307\u9488\n    // \u7b80\u5316\u7248\uff1a\u5c06\u76ee\u5f55\u7ed3\u6784\u6307\u9488\u5b58\u50a8\u5728block_pointers[0]\n    dir_entry->block_pointers[0] = (int)new_dir;\n    \n    // \u589e\u52a0\u7236\u76ee\u5f55\u6587\u4ef6\u8ba1\u6570\n    parent->file_count++;\n    \n    return SUCCESS;\n}\n\n/*\nlist_directory(\u51fd\u6570): \u5217\u51fa\u76ee\u5f55\u5185\u5bb9\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u67e5\u627e\u6307\u5b9a\u8def\u5f84\u7684\u76ee\u5f55\n- \u63d0\u4f9b\u5bf9\u76ee\u5f55\u4e2d\u6240\u6709\u6587\u4ef6\u548c\u5b50\u76ee\u5f55\u6761\u76ee\u7684\u8bbf\u95ee\n\n\u53c2\u6570:\n- path: \u8981\u5217\u51fa\u5185\u5bb9\u7684\u76ee\u5f55\u8def\u5f84\n- entries: \u8f93\u51fa\u53c2\u6570\uff0c\u63a5\u6536\u76ee\u5f55\u6761\u76ee\u6570\u7ec4\u7684\u6307\u9488\n- count: \u8f93\u51fa\u53c2\u6570\uff0c\u63a5\u6536\u6761\u76ee\u6570\u91cf\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u64cd\u4f5c\u6210\u529f\n- ERR_FILE_NOT_FOUND: \u6307\u5b9a\u8def\u5f84\u7684\u76ee\u5f55\u4e0d\u5b58\u5728\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- find_directory\u51fd\u6570(\u76ee\u5f55\u67e5\u627e)\n- ERR_FILE_NOT_FOUND\u5e38\u91cf(\u6587\u4ef6\u4e0d\u5b58\u5728\u9519\u8bef\u7801)\n- SUCCESS\u5e38\u91cf(\u6210\u529f\u72b6\u6001\u7801)\n- directory_t\u7ed3\u6784(\u76ee\u5f55\u5185\u5bb9\u8868\u793a)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n*/\nint list_directory(const char *path, file_entry_t **entries, int *count) {\n    // \u67e5\u627e\u76ee\u5f55\n    directory_t *dir = find_directory(path);\n    if (!dir) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // \u8bbe\u7f6e\u8f93\u51fa\u53c2\u6570\n    *entries = dir->files;\n    *count = dir->file_count;\n    \n    return SUCCESS;\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "2", "labels": ["File"]}, "properties": {"path": "fs_api.c", "file_hash": "", "semantic_explanation": "[unexplaned]", "id": 13, "source_code": "/* fs_api.c */\n#include \"file_types.h\"\n#include <string.h>\n#include <stdio.h>\n\n// \u58f0\u660e\u4eceutils.c\u5bfc\u5165\u7684\u51fd\u6570\nextern int validate_path(const char *path);\nextern void split_path(const char *path, char *parent_path, char *filename);\n\n// \u58f0\u660e\u4ecefile_ops.c\u5bfc\u5165\u7684\u51fd\u6570\nextern int create_file(directory_t *parent_dir, const char *filename, file_permissions_t permissions);\nextern int read_file(directory_t *parent_dir, const char *filename, void *buffer, size_t size, size_t offset);\nextern int write_file(directory_t *parent_dir, const char *filename, const void *buffer, size_t size, size_t offset);\n\n// \u58f0\u660e\u4ecedir_ops.c\u5bfc\u5165\u7684\u51fd\u6570\nextern directory_t* find_directory(const char *path);\nextern int create_directory(const char *path);\nextern int list_directory(const char *path, file_entry_t **entries, int *count);\n\n// \u6587\u4ef6\u7cfb\u7edfAPI\u51fd\u6570\n\n/*\nfs_init(\u51fd\u6570): \u521d\u59cb\u5316\u6587\u4ef6\u7cfb\u7edf\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u51c6\u5907\u6587\u4ef6\u7cfb\u7edf\u4ee5\u4f9b\u4f7f\u7528\n- \u663e\u793a\u5173\u952e\u914d\u7f6e\u53c2\u6570\u5982\u5757\u5927\u5c0f\u548c\u6700\u5927\u6587\u4ef6\u5927\u5c0f\n- \u8bbe\u7f6e\u521d\u59cb\u72b6\u6001\u548c\u6570\u636e\u7ed3\u6784\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u521d\u59cb\u5316\u6210\u529f\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- BLOCK_SIZE\u5e38\u91cf(\u5b58\u50a8\u5757\u5927\u5c0f)\n- MAX_FILE_SIZE\u5e38\u91cf(\u6587\u4ef6\u5927\u5c0f\u4e0a\u9650)\n- SUCCESS\u5e38\u91cf(\u6210\u529f\u72b6\u6001\u7801)\n*/\nint fs_init() {\n    // \u521d\u59cb\u5316\u6587\u4ef6\u7cfb\u7edf\n    printf(\"File system initialized with block size: %d bytes\\n\", BLOCK_SIZE);\n    printf(\"Maximum file size: %d bytes\\n\", MAX_FILE_SIZE);\n    \n    return SUCCESS;\n}\n\n/*\nfs_create_file(\u51fd\u6570): \u5728\u6307\u5b9a\u8def\u5f84\u521b\u5efa\u65b0\u6587\u4ef6\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u63d0\u4f9b\u9762\u5411\u8def\u5f84\u7684\u6587\u4ef6\u521b\u5efa\u63a5\u53e3\n- \u89e3\u6790\u8def\u5f84\u4ee5\u786e\u5b9a\u7236\u76ee\u5f55\u548c\u6587\u4ef6\u540d\n- \u8bbe\u7f6e\u6307\u5b9a\u7684\u8bfb\u5199\u6267\u884c\u6743\u9650\n- \u5728\u9002\u5f53\u7684\u76ee\u5f55\u4e2d\u521b\u5efa\u6587\u4ef6\n\n\u53c2\u6570:\n- path: \u8981\u521b\u5efa\u7684\u6587\u4ef6\u5b8c\u6574\u8def\u5f84\n- read_perm: \u8bfb\u53d6\u6743\u9650\u6807\u5fd7(1=\u5141\u8bb8,0=\u7981\u6b62)\n- write_perm: \u5199\u5165\u6743\u9650\u6807\u5fd7(1=\u5141\u8bb8,0=\u7981\u6b62)\n- exec_perm: \u6267\u884c\u6743\u9650\u6807\u5fd7(1=\u5141\u8bb8,0=\u7981\u6b62)\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u6587\u4ef6\u521b\u5efa\u6210\u529f\n- ERR_INVALID_PATH: \u8def\u5f84\u65e0\u6548\n- ERR_FILE_EXISTS: \u6587\u4ef6\u5df2\u5b58\u5728\n- \u5176\u4ed6\u9519\u8bef\u7801: \u7ee7\u627f\u81ea\u5e95\u5c42\u51fd\u6570\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- validate_path\u51fd\u6570(\u8def\u5f84\u9a8c\u8bc1)\n- split_path\u51fd\u6570(\u8def\u5f84\u5206\u89e3)\n- find_directory\u51fd\u6570(\u76ee\u5f55\u67e5\u627e)\n- create_file\u51fd\u6570(\u6587\u4ef6\u521b\u5efa)\n- MAX_PATH_LEN\u5e38\u91cf(\u8def\u5f84\u957f\u5ea6\u9650\u5236)\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- ERR_INVALID_PATH\u5e38\u91cf(\u8def\u5f84\u65e0\u6548\u9519\u8bef\u7801)\n- file_permissions_t\u7ed3\u6784(\u6743\u9650\u8868\u793a)\n*/\nint fs_create_file(const char *path, int read_perm, int write_perm, int exec_perm) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // \u67e5\u627e\u7236\u76ee\u5f55\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_INVALID_PATH;  // \u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n    }\n    \n    // \u8bbe\u7f6e\u6743\u9650\n    file_permissions_t perms;\n    perms.read = read_perm ? 1 : 0;\n    perms.write = write_perm ? 1 : 0;\n    perms.execute = exec_perm ? 1 : 0;\n    \n    // \u521b\u5efa\u6587\u4ef6\n    return create_file(parent, filename, perms);\n}\n\n/*\nfs_read(\u51fd\u6570): \u4ece\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u63d0\u4f9b\u9762\u5411\u8def\u5f84\u7684\u6587\u4ef6\u8bfb\u53d6\u63a5\u53e3\n- \u89e3\u6790\u8def\u5f84\u4ee5\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\n- \u4ece\u6307\u5b9a\u504f\u79fb\u5904\u8bfb\u53d6\u8bf7\u6c42\u7684\u6570\u636e\u91cf\n\n\u53c2\u6570:\n- path: \u76ee\u6807\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\n- buffer: \u5b58\u50a8\u8bfb\u53d6\u6570\u636e\u7684\u5185\u5b58\u7f13\u51b2\u533a\n- size: \u8981\u8bfb\u53d6\u7684\u6700\u5927\u5b57\u8282\u6570\n- offset: \u6587\u4ef6\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n\n\u8fd4\u56de\u503c:\n- \u6b63\u6570: \u5b9e\u9645\u8bfb\u53d6\u7684\u5b57\u8282\u6570\n- ERR_INVALID_PATH: \u8def\u5f84\u683c\u5f0f\u65e0\u6548\n- ERR_FILE_NOT_FOUND: \u6587\u4ef6\u6216\u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n- \u5176\u4ed6\u9519\u8bef\u7801: \u7ee7\u627f\u81ea\u5e95\u5c42\u51fd\u6570\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- validate_path\u51fd\u6570(\u8def\u5f84\u9a8c\u8bc1)\n- split_path\u51fd\u6570(\u8def\u5f84\u5206\u89e3)\n- find_directory\u51fd\u6570(\u76ee\u5f55\u67e5\u627e)\n- read_file\u51fd\u6570(\u6587\u4ef6\u8bfb\u53d6)\n- MAX_PATH_LEN\u5e38\u91cf(\u8def\u5f84\u957f\u5ea6\u9650\u5236)\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- ERR_INVALID_PATH\u5e38\u91cf(\u8def\u5f84\u65e0\u6548\u9519\u8bef\u7801)\n- ERR_FILE_NOT_FOUND\u5e38\u91cf(\u6587\u4ef6\u4e0d\u5b58\u5728\u9519\u8bef\u7801)\n*/\nint fs_read(const char *path, void *buffer, size_t size, size_t offset) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // \u67e5\u627e\u7236\u76ee\u5f55\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_FILE_NOT_FOUND;  // \u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n    }\n    \n    // \u8bfb\u53d6\u6587\u4ef6\n    return read_file(parent, filename, buffer, size, offset);\n}\n\n/*\nfs_write(\u51fd\u6570): \u5411\u6587\u4ef6\u5199\u5165\u6570\u636e\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u63d0\u4f9b\u9762\u5411\u8def\u5f84\u7684\u6587\u4ef6\u5199\u5165\u63a5\u53e3\n- \u89e3\u6790\u8def\u5f84\u4ee5\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\n- \u5728\u6307\u5b9a\u504f\u79fb\u5904\u5199\u5165\u6570\u636e\n\n\u53c2\u6570:\n- path: \u76ee\u6807\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\n- buffer: \u5305\u542b\u8981\u5199\u5165\u6570\u636e\u7684\u5185\u5b58\u7f13\u51b2\u533a\n- size: \u8981\u5199\u5165\u7684\u5b57\u8282\u6570\n- offset: \u6587\u4ef6\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n\n\u8fd4\u56de\u503c:\n- \u6b63\u6570: \u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570\n- ERR_INVALID_PATH: \u8def\u5f84\u683c\u5f0f\u65e0\u6548\n- ERR_FILE_NOT_FOUND: \u6587\u4ef6\u6216\u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n- \u5176\u4ed6\u9519\u8bef\u7801: \u7ee7\u627f\u81ea\u5e95\u5c42\u51fd\u6570\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- validate_path\u51fd\u6570(\u8def\u5f84\u9a8c\u8bc1)\n- split_path\u51fd\u6570(\u8def\u5f84\u5206\u89e3)\n- find_directory\u51fd\u6570(\u76ee\u5f55\u67e5\u627e)\n- write_file\u51fd\u6570(\u6587\u4ef6\u5199\u5165)\n- MAX_PATH_LEN\u5e38\u91cf(\u8def\u5f84\u957f\u5ea6\u9650\u5236)\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- ERR_INVALID_PATH\u5e38\u91cf(\u8def\u5f84\u65e0\u6548\u9519\u8bef\u7801)\n- ERR_FILE_NOT_FOUND\u5e38\u91cf(\u6587\u4ef6\u4e0d\u5b58\u5728\u9519\u8bef\u7801)\n*/\nint fs_write(const char *path, const void *buffer, size_t size, size_t offset) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // \u67e5\u627e\u7236\u76ee\u5f55\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_FILE_NOT_FOUND;  // \u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n    }\n    \n    // \u5199\u5165\u6587\u4ef6\n    return write_file(parent, filename, buffer, size, offset);\n}\n\n/*\nfs_mkdir(\u51fd\u6570): \u521b\u5efa\u65b0\u76ee\u5f55\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u63d0\u4f9b\u76f4\u63a5\u7684\u76ee\u5f55\u521b\u5efa\u63a5\u53e3\n- \u5c06\u8bf7\u6c42\u59d4\u6258\u7ed9\u5e95\u5c42\u76ee\u5f55\u521b\u5efa\u529f\u80fd\n\n\u53c2\u6570:\n- path: \u8981\u521b\u5efa\u7684\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u76ee\u5f55\u521b\u5efa\u6210\u529f\n- \u9519\u8bef\u7801: \u7ee7\u627f\u81ea\u5e95\u5c42create_directory\u51fd\u6570\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- create_directory\u51fd\u6570(\u76ee\u5f55\u521b\u5efa)\n\n*/\nint fs_mkdir(const char *path) {\n    return create_directory(path);\n}\n\n/*\nfs_list(\u51fd\u6570): \u5217\u51fa\u76ee\u5f55\u5185\u5bb9\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u63d0\u4f9b\u76f4\u63a5\u7684\u76ee\u5f55\u5185\u5bb9\u5217\u4e3e\u63a5\u53e3\n- \u5c06\u8bf7\u6c42\u59d4\u6258\u7ed9\u5e95\u5c42\u76ee\u5f55\u5217\u4e3e\u529f\u80fd\n\n\u53c2\u6570:\n- path: \u8981\u5217\u51fa\u5185\u5bb9\u7684\u76ee\u5f55\u8def\u5f84\n- entries: \u8f93\u51fa\u53c2\u6570\uff0c\u5c06\u63a5\u6536\u76ee\u5f55\u6761\u76ee\u6570\u7ec4\u6307\u9488\n- count: \u8f93\u51fa\u53c2\u6570\uff0c\u5c06\u63a5\u6536\u6761\u76ee\u6570\u91cf\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u64cd\u4f5c\u6210\u529f\n- \u9519\u8bef\u7801: \u7ee7\u627f\u81ea\u5e95\u5c42list_directory\u51fd\u6570\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- list_directory\u51fd\u6570(\u76ee\u5f55\u5185\u5bb9\u5217\u4e3e)\n*/\nint fs_list(const char *path, file_entry_t **entries, int *count) {\n    return list_directory(path, entries, count);\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "3", "labels": ["File"]}, "properties": {"path": "file_types.h", "semantic_explanation": "[unexplaned]", "id": 2, "source_code": "/* file_types.h */\n#include \"constants.h\"\n#include <time.h>\n\n/*\nfile_type_t(\u679a\u4e3e\u7c7b\u578b): \u8868\u793a\u6587\u4ef6\u7cfb\u7edf\u4e2d\u652f\u6301\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u6587\u4ef6\uff1a\n- FILE_TYPE_REGULAR: \u666e\u901a\u6587\u4ef6(\u503c\u4e3a1)\uff0c\u7528\u4e8e\u5b58\u50a8\u7528\u6237\u6570\u636e\n- FILE_TYPE_DIRECTORY: \u76ee\u5f55\u6587\u4ef6(\u503c\u4e3a2)\uff0c\u7528\u4e8e\u7ec4\u7ec7\u5176\u4ed6\u6587\u4ef6\n- FILE_TYPE_SYMLINK: \u7b26\u53f7\u94fe\u63a5(\u503c\u4e3a3)\uff0c\u6307\u5411\u5176\u4ed6\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u5f15\u7528\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9: \u65e0\uff08\u57fa\u672c\u679a\u4e3e\u5b9a\u4e49\uff09\n*/\ntypedef enum {\n    FILE_TYPE_REGULAR = 1,\n    FILE_TYPE_DIRECTORY = 2,\n    FILE_TYPE_SYMLINK = 3\n} file_type_t;\n\n/*\nfile_permissions_t(\u7ed3\u6784\u4f53): \u4f7f\u7528\u4f4d\u57df\u8868\u793aUnix\u98ce\u683c\u7684\u6587\u4ef6\u6743\u9650\uff1a\n- read: 1\u4f4d\u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u5141\u8bb8\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\n- write: 1\u4f4d\u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u5141\u8bb8\u4fee\u6539\u6587\u4ef6\u5185\u5bb9\n- execute: 1\u4f4d\u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u5141\u8bb8\u6267\u884c\u6587\u4ef6(\u4ec5\u5bf9\u666e\u901a\u6587\u4ef6\u6709\u610f\u4e49)\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9: \u65e0\uff08\u57fa\u672c\u4f4d\u57df\u7ed3\u6784\uff09\n*/\ntypedef struct {\n    unsigned int read: 1;\n    unsigned int write: 1;\n    unsigned int execute: 1;\n} file_permissions_t;\n\n/*\nfile_entry_t(\u7ed3\u6784\u4f53): \u8868\u793a\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5355\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u5143\u6570\u636e\uff1a\n- name: \u6587\u4ef6\u540d\uff0c\u6700\u5927\u957f\u5ea6\u7531MAX_FILENAME_LEN\u9650\u5236\n- type: \u6587\u4ef6\u7c7b\u578b\uff0c\u4f7f\u7528file_type_t\u679a\u4e3e\n- size: \u6587\u4ef6\u5927\u5c0f(\u5b57\u8282\u6570)\n- permissions: \u6587\u4ef6\u6743\u9650\uff0c\u4f7f\u7528file_permissions_t\u7ed3\u6784\n- created_time: \u6587\u4ef6\u521b\u5efa\u65f6\u95f4\u6233\n- modified_time: \u6587\u4ef6\u6700\u540e\u4fee\u6539\u65f6\u95f4\u6233\n- block_pointers: \u5b58\u50a8\u6307\u5411\u5b9e\u9645\u6570\u636e\u5757\u7684\u7d22\u5f15\u6570\u7ec4(\u7b80\u5316\u5b9e\u73b0)\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- file_type_t\u679a\u4e3e(\u6587\u4ef6\u7c7b\u578b\u5206\u7c7b)\n- file_permissions_t\u7ed3\u6784(\u6587\u4ef6\u6743\u9650\u8bbe\u7f6e)\n*/\ntypedef struct {\n    char name[MAX_FILENAME_LEN];\n    file_type_t type;\n    size_t size;\n    file_permissions_t permissions;\n    time_t created_time;\n    time_t modified_time;\n    int block_pointers[10];  // \u7b80\u5316\u7684\u5757\u6307\u9488\u6570\u7ec4\n} file_entry_t;\n\n\n/*\ndirectory_t(\u7ed3\u6784\u4f53): \u8868\u793a\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u76ee\u5f55\u7ed3\u6784\uff1a\n- name: \u76ee\u5f55\u540d\u79f0\uff0c\u6700\u5927\u957f\u5ea6\u7531MAX_FILENAME_LEN\u9650\u5236\n- files: \u5305\u542b\u7684\u6587\u4ef6\u548c\u5b50\u76ee\u5f55\u6570\u7ec4\uff0c\u6700\u5927\u5bb9\u91cf\u7531MAX_FILES_PER_DIR\u9650\u5236\n- file_count: \u5f53\u524d\u76ee\u5f55\u4e2d\u5b9e\u9645\u5305\u542b\u7684\u6587\u4ef6\u548c\u5b50\u76ee\u5f55\u6570\u91cf\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- MAX_FILENAME_LEN\u5e38\u91cf(\u76ee\u5f55\u540d\u957f\u5ea6\u9650\u5236)\n- MAX_FILES_PER_DIR\u5e38\u91cf(\u5355\u76ee\u5f55\u6700\u5927\u5bb9\u91cf)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n*/\ntypedef struct {\n    char name[MAX_FILENAME_LEN];\n    file_entry_t files[MAX_FILES_PER_DIR];\n    int file_count;\n} directory_t;", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "4", "labels": ["File"]}, "properties": {"path": "/usr/include/stdlib.h", "semantic_explanation": "[unexplaned]", "id": 8, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "5", "labels": ["File"]}, "properties": {"path": "main.c", "file_hash": "", "semantic_explanation": "[unexplaned]", "id": 17, "source_code": "#include \"constants.h\"\n#include <stdio.h>\n\nint main() {\n    printf(\"Welcome to the Simple File System!\\n\");\n    // Add initialization or test code here\n    return 0;\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "6", "labels": ["File"]}, "properties": {"path": "/usr/include/string.h", "semantic_explanation": "[unexplaned]", "id": 3, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "7", "labels": ["File"]}, "properties": {"path": "constants.h", "semantic_explanation": "[unexplaned]", "id": 18, "source_code": "/*\nMAX_FILENAME_LEN(\u5e38\u91cf): \u5b9a\u4e49\u6587\u4ef6\u540d\u6700\u5927\u957f\u5ea6\u4e3a256\u5b57\u7b26\uff0c\u9650\u5236\u5355\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u79f0\u7684\u5b57\u7b26\u6570\u91cf\u3002\n*/\n#define MAX_FILENAME_LEN 256\n\n/*\nMAX_PATH_LEN(\u5e38\u91cf): \u5b9a\u4e49\u5b8c\u6574\u6587\u4ef6\u8def\u5f84\u6700\u5927\u957f\u5ea6\u4e3a1024\u5b57\u7b26\uff0c\u9650\u5236\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4efb\u4f55\u8def\u5f84\u7684\u603b\u5b57\u7b26\u6570\u3002\n*/\n#define MAX_PATH_LEN 1024\n\n/*MAX_FILES_PER_DIR(\u5e38\u91cf): \u5b9a\u4e49\u5355\u4e2a\u76ee\u5f55\u53ef\u5305\u542b\u7684\u6700\u5927\u6587\u4ef6\u6216\u5b50\u76ee\u5f55\u6570\u4e3a100\uff0c\u9650\u5236\u76ee\u5f55\u9879\u6570\u91cf\u3002\n*/\n#define MAX_FILES_PER_DIR 100\n\n/*MAX_FILE_SIZE(\u5e38\u91cf): \u5b9a\u4e49\u5355\u4e2a\u6587\u4ef6\u6700\u5927\u5c3a\u5bf8\u4e3a1MB(1048576\u5b57\u8282)\uff0c\u8bbe\u7f6e\u6587\u4ef6\u7cfb\u7edf\u652f\u6301\u7684\u6587\u4ef6\u5927\u5c0f\u4e0a\u9650\u3002\n*/\n#define MAX_FILE_SIZE 1048576  // 1MB\n\n/*BLOCK_SIZE(\u5e38\u91cf): \u5b9a\u4e49\u6587\u4ef6\u7cfb\u7edf\u57fa\u672c\u5b58\u50a8\u5757\u5927\u5c0f\u4e3a4KB(4096\u5b57\u8282)\uff0c\u5f71\u54cd\u78c1\u76d8\u7a7a\u95f4\u5206\u914d\u7684\u7c92\u5ea6\u3002\n*/\n#define BLOCK_SIZE 4096\n\n/*\nfs_error_t(\u679a\u4e3e\u7c7b\u578b): \u5b9a\u4e49\u6587\u4ef6\u7cfb\u7edf\u64cd\u4f5c\u7684\u53ef\u80fd\u9519\u8bef\u7801\uff1a\n- SUCCESS: \u64cd\u4f5c\u6210\u529f\u5b8c\u6210(0)\n- ERR_FILE_NOT_FOUND: \u8bf7\u6c42\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u4e0d\u5b58\u5728(-1)\n- ERR_FILE_EXISTS: \u5c1d\u8bd5\u521b\u5efa\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u5df2\u5b58\u5728(-2)\n- ERR_DISK_FULL: \u5b58\u50a8\u7a7a\u95f4\u4e0d\u8db3\uff0c\u65e0\u6cd5\u5b8c\u6210\u64cd\u4f5c(-3)\n- ERR_INVALID_PATH: \u63d0\u4f9b\u7684\u8def\u5f84\u683c\u5f0f\u65e0\u6548\u6216\u8d85\u51fa\u957f\u5ea6\u9650\u5236(-4)\n- ERR_PERMISSION_DENIED: \u7528\u6237\u6743\u9650\u4e0d\u8db3\uff0c\u65e0\u6cd5\u6267\u884c\u8bf7\u6c42\u64cd\u4f5c(-5)\n*/\ntypedef enum {\n    SUCCESS = 0,\n    ERR_FILE_NOT_FOUND = -1,\n    ERR_FILE_EXISTS = -2,\n    ERR_DISK_FULL = -3,\n    ERR_INVALID_PATH = -4,\n    ERR_PERMISSION_DENIED = -5\n} fs_error_t;", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "8", "labels": ["File"]}, "properties": {"path": "/usr/include/stdio.h", "semantic_explanation": "[unexplaned]", "id": 4, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "9", "labels": ["File"]}, "properties": {"path": "/usr/include/time.h", "semantic_explanation": "[unexplaned]", "id": 20, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "10", "labels": ["File"]}, "properties": {"path": "/usr/include/clang/18.1.3/include/__stddef_size_t.h", "semantic_explanation": "[unexplaned]", "id": 21, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "11", "labels": ["File"]}, "properties": {"path": "/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h", "semantic_explanation": "[unexplaned]", "id": 22, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "12", "labels": ["File"]}, "properties": {"path": "utils.c", "file_hash": "", "semantic_explanation": "[unexplaned]", "id": 1, "source_code": "/* utils.c */\n#include \"file_types.h\"\n#include <string.h>\n#include <stdio.h>\n\n/*validate_path(\u51fd\u6570): \u9a8c\u8bc1\u6587\u4ef6\u8def\u5f84\u7684\u6709\u6548\u6027\u3002\n- \u68c0\u67e5\u8def\u5f84\u975e\u7a7a\u4e14\u957f\u5ea6\u672a\u8d85\u8fc7MAX_PATH_LEN\n- \u9a8c\u8bc1\u8def\u5f84\u4e0d\u5305\u542bWindows\u6587\u4ef6\u7cfb\u7edf\u7981\u6b62\u7684\u7279\u6b8a\u5b57\u7b26(<, >, |, *, ?)\n- \u6210\u529f\u8fd4\u56deSUCCESS\uff0c\u5931\u8d25\u8fd4\u56deERR_INVALID_PATH\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- MAX_PATH_LEN\u5e38\u91cf(\u8def\u5f84\u957f\u5ea6\u4e0a\u9650)\n- SUCCESS\u5e38\u91cf(\u6210\u529f\u72b6\u6001\u7801)\n- ERR_INVALID_PATH\u5e38\u91cf(\u8def\u5f84\u65e0\u6548\u9519\u8bef\u7801)\n*/\nint validate_path(const char *path) {\n    if (!path || strlen(path) >= MAX_PATH_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // \u68c0\u67e5\u8def\u5f84\u4e2d\u662f\u5426\u5305\u542b\u975e\u6cd5\u5b57\u7b26\n    for (int i = 0; path[i] != '\\0'; i++) {\n        if (path[i] == '<' || path[i] == '>' || path[i] == '|' || path[i] == '*' || path[i] == '?') {\n            return ERR_INVALID_PATH;\n        }\n    }\n    \n    return SUCCESS;\n}\n\n/*\nsplit_path(\u51fd\u6570): \u5c06\u5b8c\u6574\u6587\u4ef6\u8def\u5f84\u5206\u89e3\u4e3a\u7236\u76ee\u5f55\u8def\u5f84\u548c\u6587\u4ef6\u540d\u3002\n- \u67e5\u627e\u6700\u540e\u4e00\u4e2a\u659c\u6760\u4f4d\u7f6e\u786e\u5b9a\u5206\u5272\u70b9\n- \u63d0\u53d6\u7236\u76ee\u5f55\u8def\u5f84(\u659c\u6760\u524d\u7684\u90e8\u5206)\n- \u63d0\u53d6\u6587\u4ef6\u540d(\u6700\u540e\u4e00\u4e2a\u659c\u6760\u540e\u7684\u90e8\u5206)\n- \u5982\u65e0\u659c\u6760\uff0c\u5047\u5b9a\u4e3a\u5f53\u524d\u76ee\u5f55('.')\u4e2d\u7684\u6587\u4ef6\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9: \u65e0(\u57fa\u672c\u5b57\u7b26\u4e32\u64cd\u4f5c)\n*/\nvoid split_path(const char *path, char *parent_path, char *filename) {\n    const char *last_slash = strrchr(path, '/');\n    \n    if (last_slash) {\n        int parent_len = last_slash - path;\n        strncpy(parent_path, path, parent_len);\n        parent_path[parent_len] = '\\0';\n        strcpy(filename, last_slash + 1);\n    } else {\n        // \u6ca1\u6709\u659c\u6760\u8868\u793a\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\n        parent_path[0] = '.';\n        parent_path[1] = '\\0';\n        strcpy(filename, path);\n    }\n}\n\n/*\nallocate_blocks(\u51fd\u6570): \u5206\u914d\u6307\u5b9a\u6570\u91cf\u7684\u5b58\u50a8\u5757\u7528\u4e8e\u6587\u4ef6\u6570\u636e\u5b58\u50a8\u3002\n- \u5b9e\u73b0\u7b80\u5316\u7248\u672c\uff0c\u4f7f\u7528\u9759\u6001\u53d8\u91cf\u8ddf\u8e2a\u4e0b\u4e00\u4e2a\u53ef\u7528\u5757\n- \u68c0\u67e5\u5269\u4f59\u7a7a\u95f4\u662f\u5426\u8db3\u591f\u6ee1\u8db3\u8bf7\u6c42\n- \u6210\u529f\u8fd4\u56de\u5206\u914d\u7684\u7b2c\u4e00\u4e2a\u5757\u7d22\u5f15\uff0c\u5931\u8d25\u8fd4\u56deERR_DISK_FULL\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- MAX_FILE_SIZE\u5e38\u91cf(\u6587\u4ef6\u5927\u5c0f\u4e0a\u9650)\n- BLOCK_SIZE\u5e38\u91cf(\u5b58\u50a8\u5757\u5927\u5c0f)\n- ERR_DISK_FULL\u5e38\u91cf(\u78c1\u76d8\u7a7a\u95f4\u4e0d\u8db3\u9519\u8bef\u7801)\n*/\nint allocate_blocks(int num_blocks) {\n    // \u7b80\u5316\u7248\uff1a\u5047\u8bbe\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53ef\u7528\u5757\u7684\u7d22\u5f15\n    static int next_free_block = 0;\n    int start_block = next_free_block;\n    \n    // \u68c0\u67e5\u662f\u5426\u6709\u8db3\u591f\u7684\u5757\u53ef\u7528\n    if (next_free_block + num_blocks > MAX_FILE_SIZE / BLOCK_SIZE) {\n        return ERR_DISK_FULL;\n    }\n    \n    next_free_block += num_blocks;\n    return start_block;\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "13", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/string.h:407:15", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "", "name": "strlen", "op_source": "use", "id": 2, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "14", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/string.h:273:14", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "", "name": "strrchr", "op_source": "use", "id": 4, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "15", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/string.h:144:14", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "", "name": "strncpy", "op_source": "use", "id": 5, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "16", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/string.h:141:14", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "", "name": "strcpy", "op_source": "use", "id": 6, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "17", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/string.h:156:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "", "name": "strcmp", "op_source": "use", "id": 10, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "18", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/time.h:76:15", "def_loc": "undefined", "semantic_explanation": "[unexplaned]", "is_static": false, "ret_type": "", "name": "time", "op_source": "use", "id": 12, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "19", "labels": ["Function"]}, "properties": {"decl_loc": "file_ops.c:8:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "int", "name": "validate_path", "op_source": "declare", "id": 19, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "20", "labels": ["Function"]}, "properties": {"decl_loc": "file_ops.c:9:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "int", "name": "allocate_blocks", "op_source": "declare", "id": 17, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "21", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/stdlib.h:672:14", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "", "name": "malloc", "op_source": "use", "id": 33, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "22", "labels": ["Function"]}, "properties": {"decl_loc": "dir_ops.c:8:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "int", "name": "validate_path", "op_source": "declare", "id": 22, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "23", "labels": ["Function"]}, "properties": {"decl_loc": "dir_ops.c:9:13", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "void", "name": "split_path", "op_source": "declare", "id": 24, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "24", "labels": ["Function"]}, "properties": {"decl_loc": "dir_ops.c:12:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "int", "name": "create_file", "op_source": "declare", "id": 38, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "25", "labels": ["Function"]}, "properties": {"decl_loc": "/usr/include/stdio.h:363:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "", "name": "printf", "op_source": "use", "id": 40, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "26", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:7:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "int", "name": "validate_path", "op_source": "declare", "id": 42, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "27", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:8:13", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "void", "name": "split_path", "op_source": "declare", "id": 43, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "28", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:11:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "int", "name": "create_file", "op_source": "declare", "id": 45, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "29", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:12:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "int", "name": "read_file", "op_source": "declare", "id": 50, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "30", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:13:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "int", "name": "write_file", "op_source": "declare", "id": 55, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "31", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:16:21", "def_loc": "undefined", "semantic_explanation": "[unexplaned]", "is_static": false, "ret_type": "directory_t *", "name": "find_directory", "op_source": "declare", "id": 44, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "32", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:17:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "int", "name": "create_directory", "op_source": "declare", "id": 57, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "33", "labels": ["Function"]}, "properties": {"decl_loc": "fs_api.c:18:12", "def_loc": "undefined", "is_static": false, "semantic_explanation": "[unexplaned]", "ret_type": "int", "name": "list_directory", "op_source": "declare", "id": 59, "source_code": "", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "34", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "utils.c:67:5", "is_static": false, "semantic_explanation": "/*\nallocate_blocks(\u51fd\u6570): \u5206\u914d\u6307\u5b9a\u6570\u91cf\u7684\u5b58\u50a8\u5757\u7528\u4e8e\u6587\u4ef6\u6570\u636e\u5b58\u50a8\u3002\n- \u5b9e\u73b0\u7b80\u5316\u7248\u672c\uff0c\u4f7f\u7528\u9759\u6001\u53d8\u91cf\u8ddf\u8e2a\u4e0b\u4e00\u4e2a\u53ef\u7528\u5757\n- \u68c0\u67e5\u5269\u4f59\u7a7a\u95f4\u662f\u5426\u8db3\u591f\u6ee1\u8db3\u8bf7\u6c42\n- \u6210\u529f\u8fd4\u56de\u5206\u914d\u7684\u7b2c\u4e00\u4e2a\u5757\u7d22\u5f15\uff0c\u5931\u8d25\u8fd4\u56deERR_DISK_FULL\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- MAX_FILE_SIZE\u5e38\u91cf(\u6587\u4ef6\u5927\u5c0f\u4e0a\u9650)\n- BLOCK_SIZE\u5e38\u91cf(\u5b58\u50a8\u5757\u5927\u5c0f)\n- ERR_DISK_FULL\u5e38\u91cf(\u78c1\u76d8\u7a7a\u95f4\u4e0d\u8db3\u9519\u8bef\u7801)\n*/\n", "ret_type": "int", "name": "allocate_blocks", "op_source": "define", "id": 7, "source_code": "int allocate_blocks(int num_blocks) {\n    // \u7b80\u5316\u7248\uff1a\u5047\u8bbe\u8fd4\u56de\u7b2c\u4e00\u4e2a\u53ef\u7528\u5757\u7684\u7d22\u5f15\n    static int next_free_block = 0;\n    int start_block = next_free_block;\n    \n    // \u68c0\u67e5\u662f\u5426\u6709\u8db3\u591f\u7684\u5757\u53ef\u7528\n    if (next_free_block + num_blocks > MAX_FILE_SIZE / BLOCK_SIZE) {\n        return ERR_DISK_FULL;\n    }\n    \n    next_free_block += num_blocks;\n    return start_block;\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "35", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "dir_ops.c:191:5", "is_static": false, "semantic_explanation": "/*\nlist_directory(\u51fd\u6570): \u5217\u51fa\u76ee\u5f55\u5185\u5bb9\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u67e5\u627e\u6307\u5b9a\u8def\u5f84\u7684\u76ee\u5f55\n- \u63d0\u4f9b\u5bf9\u76ee\u5f55\u4e2d\u6240\u6709\u6587\u4ef6\u548c\u5b50\u76ee\u5f55\u6761\u76ee\u7684\u8bbf\u95ee\n\n\u53c2\u6570:\n- path: \u8981\u5217\u51fa\u5185\u5bb9\u7684\u76ee\u5f55\u8def\u5f84\n- entries: \u8f93\u51fa\u53c2\u6570\uff0c\u63a5\u6536\u76ee\u5f55\u6761\u76ee\u6570\u7ec4\u7684\u6307\u9488\n- count: \u8f93\u51fa\u53c2\u6570\uff0c\u63a5\u6536\u6761\u76ee\u6570\u91cf\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u64cd\u4f5c\u6210\u529f\n- ERR_FILE_NOT_FOUND: \u6307\u5b9a\u8def\u5f84\u7684\u76ee\u5f55\u4e0d\u5b58\u5728\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- find_directory\u51fd\u6570(\u76ee\u5f55\u67e5\u627e)\n- ERR_FILE_NOT_FOUND\u5e38\u91cf(\u6587\u4ef6\u4e0d\u5b58\u5728\u9519\u8bef\u7801)\n- SUCCESS\u5e38\u91cf(\u6210\u529f\u72b6\u6001\u7801)\n- directory_t\u7ed3\u6784(\u76ee\u5f55\u5185\u5bb9\u8868\u793a)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n*/\n", "ret_type": "int", "name": "list_directory", "op_source": "define", "id": 34, "source_code": "int list_directory(const char *path, file_entry_t **entries, int *count) {\n    // \u67e5\u627e\u76ee\u5f55\n    directory_t *dir = find_directory(path);\n    if (!dir) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // \u8bbe\u7f6e\u8f93\u51fa\u53c2\u6570\n    *entries = dir->files;\n    *count = dir->file_count;\n    \n    return SUCCESS;\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "36", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "fs_api.c:38:5", "is_static": false, "semantic_explanation": "/*\nfs_init(\u51fd\u6570): \u521d\u59cb\u5316\u6587\u4ef6\u7cfb\u7edf\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u51c6\u5907\u6587\u4ef6\u7cfb\u7edf\u4ee5\u4f9b\u4f7f\u7528\n- \u663e\u793a\u5173\u952e\u914d\u7f6e\u53c2\u6570\u5982\u5757\u5927\u5c0f\u548c\u6700\u5927\u6587\u4ef6\u5927\u5c0f\n- \u8bbe\u7f6e\u521d\u59cb\u72b6\u6001\u548c\u6570\u636e\u7ed3\u6784\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u521d\u59cb\u5316\u6210\u529f\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- BLOCK_SIZE\u5e38\u91cf(\u5b58\u50a8\u5757\u5927\u5c0f)\n- MAX_FILE_SIZE\u5e38\u91cf(\u6587\u4ef6\u5927\u5c0f\u4e0a\u9650)\n- SUCCESS\u5e38\u91cf(\u6210\u529f\u72b6\u6001\u7801)\n*/\n", "ret_type": "int", "name": "fs_init", "op_source": "define", "id": 39, "source_code": "int fs_init() {\n    // \u521d\u59cb\u5316\u6587\u4ef6\u7cfb\u7edf\n    printf(\"File system initialized with block size: %d bytes\\n\", BLOCK_SIZE);\n    printf(\"Maximum file size: %d bytes\\n\", MAX_FILE_SIZE);\n    \n    return SUCCESS;\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "37", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "fs_api.c:221:5", "is_static": false, "semantic_explanation": "/*\nfs_mkdir(\u51fd\u6570): \u521b\u5efa\u65b0\u76ee\u5f55\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u63d0\u4f9b\u76f4\u63a5\u7684\u76ee\u5f55\u521b\u5efa\u63a5\u53e3\n- \u5c06\u8bf7\u6c42\u59d4\u6258\u7ed9\u5e95\u5c42\u76ee\u5f55\u521b\u5efa\u529f\u80fd\n\n\u53c2\u6570:\n- path: \u8981\u521b\u5efa\u7684\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u76ee\u5f55\u521b\u5efa\u6210\u529f\n- \u9519\u8bef\u7801: \u7ee7\u627f\u81ea\u5e95\u5c42create_directory\u51fd\u6570\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- create_directory\u51fd\u6570(\u76ee\u5f55\u521b\u5efa)\n\n*/\n", "ret_type": "int", "name": "fs_mkdir", "op_source": "define", "id": 56, "source_code": "int fs_mkdir(const char *path) {\n    return create_directory(path);\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "38", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "main.c:4:5", "is_static": false, "semantic_explanation": "", "ret_type": "int", "name": "main", "op_source": "define", "id": 68, "source_code": "int main() {\n    printf(\"Welcome to the Simple File System!\\n\");\n    // Add initialization or test code here\n    return 0;\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "39", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "utils.c:16:5", "is_static": false, "semantic_explanation": "/*validate_path(\u51fd\u6570): \u9a8c\u8bc1\u6587\u4ef6\u8def\u5f84\u7684\u6709\u6548\u6027\u3002\n- \u68c0\u67e5\u8def\u5f84\u975e\u7a7a\u4e14\u957f\u5ea6\u672a\u8d85\u8fc7MAX_PATH_LEN\n- \u9a8c\u8bc1\u8def\u5f84\u4e0d\u5305\u542bWindows\u6587\u4ef6\u7cfb\u7edf\u7981\u6b62\u7684\u7279\u6b8a\u5b57\u7b26(<, >, |, *, ?)\n- \u6210\u529f\u8fd4\u56deSUCCESS\uff0c\u5931\u8d25\u8fd4\u56deERR_INVALID_PATH\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- MAX_PATH_LEN\u5e38\u91cf(\u8def\u5f84\u957f\u5ea6\u4e0a\u9650)\n- SUCCESS\u5e38\u91cf(\u6210\u529f\u72b6\u6001\u7801)\n- ERR_INVALID_PATH\u5e38\u91cf(\u8def\u5f84\u65e0\u6548\u9519\u8bef\u7801)\n*/\n", "ret_type": "int", "name": "validate_path", "op_source": "define", "id": 1, "source_code": "int validate_path(const char *path) {\n    if (!path || strlen(path) >= MAX_PATH_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // \u68c0\u67e5\u8def\u5f84\u4e2d\u662f\u5426\u5305\u542b\u975e\u6cd5\u5b57\u7b26\n    for (int i = 0; path[i] != '\\0'; i++) {\n        if (path[i] == '<' || path[i] == '>' || path[i] == '|' || path[i] == '*' || path[i] == '?') {\n            return ERR_INVALID_PATH;\n        }\n    }\n    \n    return SUCCESS;\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "40", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "utils.c:40:6", "is_static": false, "semantic_explanation": "/*\nsplit_path(\u51fd\u6570): \u5c06\u5b8c\u6574\u6587\u4ef6\u8def\u5f84\u5206\u89e3\u4e3a\u7236\u76ee\u5f55\u8def\u5f84\u548c\u6587\u4ef6\u540d\u3002\n- \u67e5\u627e\u6700\u540e\u4e00\u4e2a\u659c\u6760\u4f4d\u7f6e\u786e\u5b9a\u5206\u5272\u70b9\n- \u63d0\u53d6\u7236\u76ee\u5f55\u8def\u5f84(\u659c\u6760\u524d\u7684\u90e8\u5206)\n- \u63d0\u53d6\u6587\u4ef6\u540d(\u6700\u540e\u4e00\u4e2a\u659c\u6760\u540e\u7684\u90e8\u5206)\n- \u5982\u65e0\u659c\u6760\uff0c\u5047\u5b9a\u4e3a\u5f53\u524d\u76ee\u5f55('.')\u4e2d\u7684\u6587\u4ef6\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9: \u65e0(\u57fa\u672c\u5b57\u7b26\u4e32\u64cd\u4f5c)\n*/\n", "ret_type": "void", "name": "split_path", "op_source": "define", "id": 3, "source_code": "void split_path(const char *path, char *parent_path, char *filename) {\n    const char *last_slash = strrchr(path, '/');\n    \n    if (last_slash) {\n        int parent_len = last_slash - path;\n        strncpy(parent_path, path, parent_len);\n        parent_path[parent_len] = '\\0';\n        strcpy(filename, last_slash + 1);\n    } else {\n        // \u6ca1\u6709\u659c\u6760\u8868\u793a\u5f53\u524d\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\n        parent_path[0] = '.';\n        parent_path[1] = '\\0';\n        strcpy(filename, path);\n    }\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "41", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "dir_ops.c:42:14", "is_static": false, "semantic_explanation": "/*\nfind_directory(\u51fd\u6570): \u6839\u636e\u8def\u5f84\u67e5\u627e\u76ee\u5f55\u7ed3\u6784\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u9a8c\u8bc1\u63d0\u4f9b\u7684\u8def\u5f84\u683c\u5f0f\u662f\u5426\u6709\u6548\n- \u5728\u6587\u4ef6\u7cfb\u7edf\u5c42\u6b21\u7ed3\u6784\u4e2d\u67e5\u627e\u6307\u5b9a\u8def\u5f84\u7684\u76ee\u5f55\n- \u652f\u6301\u6839\u76ee\u5f55(\"/\")\u548c\u7b80\u5316\u7684\u4e24\u7ea7\u76ee\u5f55\u7ed3\u6784\n\n\u53c2\u6570:\n- path: \u8981\u67e5\u627e\u7684\u76ee\u5f55\u8def\u5f84\u5b57\u7b26\u4e32\n\n\u8fd4\u56de\u503c:\n- \u975eNULL: \u6307\u5411\u627e\u5230\u7684\u76ee\u5f55\u7ed3\u6784\u7684\u6307\u9488\n- NULL: \u76ee\u5f55\u4e0d\u5b58\u5728\u6216\u8def\u5f84\u65e0\u6548\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- validate_path\u51fd\u6570(\u8def\u5f84\u9a8c\u8bc1)\n- split_path\u51fd\u6570(\u8def\u5f84\u5206\u89e3)\n- MAX_PATH_LEN\u5e38\u91cf(\u8def\u5f84\u957f\u5ea6\u9650\u5236)\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- SUCCESS\u5e38\u91cf(\u6210\u529f\u72b6\u6001\u7801)\n- FILE_TYPE_DIRECTORY\u5e38\u91cf(\u76ee\u5f55\u7c7b\u578b\u6807\u8bc6)\n- directory_t\u7ed3\u6784(\u76ee\u5f55\u5185\u5bb9\u8868\u793a)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n*/\n", "ret_type": "directory_t *", "name": "find_directory", "op_source": "define", "id": 21, "source_code": "directory_t* find_directory(const char *path) {\n    if (validate_path(path) != SUCCESS) {\n        return NULL;\n    }\n    \n    // \u5982\u679c\u662f\u6839\u76ee\u5f55\n    if (strcmp(path, \"/\") == 0) {\n        return &root_directory;\n    }\n    \n    // \u7b80\u5316\u7248\uff1a\u53ea\u652f\u6301\u4e24\u7ea7\u76ee\u5f55\u7ed3\u6784\n    // \u5b9e\u9645\u5b9e\u73b0\u9700\u8981\u9012\u5f52\u67e5\u627e\n    \n    char parent_path[MAX_PATH_LEN];\n    char dirname[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, dirname);\n    \n    // \u53ea\u770b\u6839\u76ee\u5f55\u4e0b\u7684\u76ee\u5f55\n    if (strcmp(parent_path, \"/\") == 0) {\n        for (int i = 0; i < root_directory.file_count; i++) {\n            if (strcmp(root_directory.files[i].name, dirname) == 0 && \n                root_directory.files[i].type == FILE_TYPE_DIRECTORY) {\n                // \u5047\u8bbe\u76ee\u5f55\u5b9e\u9645\u5185\u5bb9\u5b58\u50a8\u5728\u4e0efile_entry\u5173\u8054\u7684\u67d0\u5904\n                // \u8fd9\u91cc\u7b80\u5316\u8fd4\u56de\u4e00\u4e2a\u6307\u5411\u76ee\u5f55\u7ed3\u6784\u7684\u6307\u9488\n                return (directory_t*)root_directory.files[i].block_pointers;\n            }\n        }\n    }\n    \n    return NULL;  // \u76ee\u5f55\u4e0d\u5b58\u5728\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "42", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "fs_api.c:133:5", "is_static": false, "semantic_explanation": "/*\nfs_read(\u51fd\u6570): \u4ece\u6587\u4ef6\u8bfb\u53d6\u6570\u636e\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u63d0\u4f9b\u9762\u5411\u8def\u5f84\u7684\u6587\u4ef6\u8bfb\u53d6\u63a5\u53e3\n- \u89e3\u6790\u8def\u5f84\u4ee5\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\n- \u4ece\u6307\u5b9a\u504f\u79fb\u5904\u8bfb\u53d6\u8bf7\u6c42\u7684\u6570\u636e\u91cf\n\n\u53c2\u6570:\n- path: \u76ee\u6807\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\n- buffer: \u5b58\u50a8\u8bfb\u53d6\u6570\u636e\u7684\u5185\u5b58\u7f13\u51b2\u533a\n- size: \u8981\u8bfb\u53d6\u7684\u6700\u5927\u5b57\u8282\u6570\n- offset: \u6587\u4ef6\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n\n\u8fd4\u56de\u503c:\n- \u6b63\u6570: \u5b9e\u9645\u8bfb\u53d6\u7684\u5b57\u8282\u6570\n- ERR_INVALID_PATH: \u8def\u5f84\u683c\u5f0f\u65e0\u6548\n- ERR_FILE_NOT_FOUND: \u6587\u4ef6\u6216\u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n- \u5176\u4ed6\u9519\u8bef\u7801: \u7ee7\u627f\u81ea\u5e95\u5c42\u51fd\u6570\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- validate_path\u51fd\u6570(\u8def\u5f84\u9a8c\u8bc1)\n- split_path\u51fd\u6570(\u8def\u5f84\u5206\u89e3)\n- find_directory\u51fd\u6570(\u76ee\u5f55\u67e5\u627e)\n- read_file\u51fd\u6570(\u6587\u4ef6\u8bfb\u53d6)\n- MAX_PATH_LEN\u5e38\u91cf(\u8def\u5f84\u957f\u5ea6\u9650\u5236)\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- ERR_INVALID_PATH\u5e38\u91cf(\u8def\u5f84\u65e0\u6548\u9519\u8bef\u7801)\n- ERR_FILE_NOT_FOUND\u5e38\u91cf(\u6587\u4ef6\u4e0d\u5b58\u5728\u9519\u8bef\u7801)\n*/\n", "ret_type": "int", "name": "fs_read", "op_source": "define", "id": 46, "source_code": "int fs_read(const char *path, void *buffer, size_t size, size_t offset) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // \u67e5\u627e\u7236\u76ee\u5f55\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_FILE_NOT_FOUND;  // \u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n    }\n    \n    // \u8bfb\u53d6\u6587\u4ef6\n    return read_file(parent, filename, buffer, size, offset);\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "43", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "fs_api.c:183:5", "is_static": false, "semantic_explanation": "/*\nfs_write(\u51fd\u6570): \u5411\u6587\u4ef6\u5199\u5165\u6570\u636e\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u63d0\u4f9b\u9762\u5411\u8def\u5f84\u7684\u6587\u4ef6\u5199\u5165\u63a5\u53e3\n- \u89e3\u6790\u8def\u5f84\u4ee5\u5b9a\u4f4d\u76ee\u6807\u6587\u4ef6\n- \u5728\u6307\u5b9a\u504f\u79fb\u5904\u5199\u5165\u6570\u636e\n\n\u53c2\u6570:\n- path: \u76ee\u6807\u6587\u4ef6\u7684\u5b8c\u6574\u8def\u5f84\n- buffer: \u5305\u542b\u8981\u5199\u5165\u6570\u636e\u7684\u5185\u5b58\u7f13\u51b2\u533a\n- size: \u8981\u5199\u5165\u7684\u5b57\u8282\u6570\n- offset: \u6587\u4ef6\u4e2d\u7684\u8d77\u59cb\u4f4d\u7f6e\n\n\u8fd4\u56de\u503c:\n- \u6b63\u6570: \u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570\n- ERR_INVALID_PATH: \u8def\u5f84\u683c\u5f0f\u65e0\u6548\n- ERR_FILE_NOT_FOUND: \u6587\u4ef6\u6216\u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n- \u5176\u4ed6\u9519\u8bef\u7801: \u7ee7\u627f\u81ea\u5e95\u5c42\u51fd\u6570\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- validate_path\u51fd\u6570(\u8def\u5f84\u9a8c\u8bc1)\n- split_path\u51fd\u6570(\u8def\u5f84\u5206\u89e3)\n- find_directory\u51fd\u6570(\u76ee\u5f55\u67e5\u627e)\n- write_file\u51fd\u6570(\u6587\u4ef6\u5199\u5165)\n- MAX_PATH_LEN\u5e38\u91cf(\u8def\u5f84\u957f\u5ea6\u9650\u5236)\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- ERR_INVALID_PATH\u5e38\u91cf(\u8def\u5f84\u65e0\u6548\u9519\u8bef\u7801)\n- ERR_FILE_NOT_FOUND\u5e38\u91cf(\u6587\u4ef6\u4e0d\u5b58\u5728\u9519\u8bef\u7801)\n*/\n", "ret_type": "int", "name": "fs_write", "op_source": "define", "id": 51, "source_code": "int fs_write(const char *path, const void *buffer, size_t size, size_t offset) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // \u67e5\u627e\u7236\u76ee\u5f55\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_FILE_NOT_FOUND;  // \u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n    }\n    \n    // \u5199\u5165\u6587\u4ef6\n    return write_file(parent, filename, buffer, size, offset);\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "44", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "fs_api.c:244:5", "is_static": false, "semantic_explanation": "/*\nfs_list(\u51fd\u6570): \u5217\u51fa\u76ee\u5f55\u5185\u5bb9\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u63d0\u4f9b\u76f4\u63a5\u7684\u76ee\u5f55\u5185\u5bb9\u5217\u4e3e\u63a5\u53e3\n- \u5c06\u8bf7\u6c42\u59d4\u6258\u7ed9\u5e95\u5c42\u76ee\u5f55\u5217\u4e3e\u529f\u80fd\n\n\u53c2\u6570:\n- path: \u8981\u5217\u51fa\u5185\u5bb9\u7684\u76ee\u5f55\u8def\u5f84\n- entries: \u8f93\u51fa\u53c2\u6570\uff0c\u5c06\u63a5\u6536\u76ee\u5f55\u6761\u76ee\u6570\u7ec4\u6307\u9488\n- count: \u8f93\u51fa\u53c2\u6570\uff0c\u5c06\u63a5\u6536\u6761\u76ee\u6570\u91cf\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u64cd\u4f5c\u6210\u529f\n- \u9519\u8bef\u7801: \u7ee7\u627f\u81ea\u5e95\u5c42list_directory\u51fd\u6570\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- list_directory\u51fd\u6570(\u76ee\u5f55\u5185\u5bb9\u5217\u4e3e)\n*/\n", "ret_type": "int", "name": "fs_list", "op_source": "define", "id": 58, "source_code": "int fs_list(const char *path, file_entry_t **entries, int *count) {\n    return list_directory(path, entries, count);\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "45", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "file_ops.c:41:5", "is_static": false, "semantic_explanation": "/*\ncreate_file(\u51fd\u6570): \u5728\u6307\u5b9a\u76ee\u5f55\u4e2d\u521b\u5efa\u65b0\u7684\u7a7a\u6587\u4ef6\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u5728\u7236\u76ee\u5f55\u4e2d\u521b\u5efa\u5177\u6709\u6307\u5b9a\u6587\u4ef6\u540d\u548c\u6743\u9650\u7684\u65b0\u6587\u4ef6\n- \u521d\u59cb\u5316\u6587\u4ef6\u5143\u6570\u636e\uff0c\u5305\u62ec\u7c7b\u578b\u3001\u5927\u5c0f\u548c\u65f6\u95f4\u6233\n- \u6587\u4ef6\u521b\u5efa\u65f6\u4e0d\u5206\u914d\u6570\u636e\u5757\uff0c\u521d\u59cb\u5927\u5c0f\u4e3a0\n\n\u53c2\u6570:\n- parent_dir: \u8981\u5728\u5176\u4e2d\u521b\u5efa\u6587\u4ef6\u7684\u76ee\u5f55\n- filename: \u65b0\u6587\u4ef6\u7684\u540d\u79f0\n- permissions: \u8981\u5e94\u7528\u7684\u8bfb/\u5199/\u6267\u884c\u6743\u9650\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u6587\u4ef6\u521b\u5efa\u6210\u529f\n- ERR_DISK_FULL: \u76ee\u5f55\u5df2\u8fbe\u5230\u6700\u5927\u6587\u4ef6\u6570\u9650\u5236\n- ERR_INVALID_PATH: \u6587\u4ef6\u540d\u957f\u5ea6\u8d85\u8fc7\u9650\u5236\n- ERR_FILE_EXISTS: \u540c\u540d\u6587\u4ef6\u5df2\u5b58\u5728\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- MAX_FILES_PER_DIR\u5e38\u91cf(\u76ee\u5f55\u5bb9\u91cf\u9650\u5236)\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- ERR_DISK_FULL\u5e38\u91cf(\u7a7a\u95f4\u4e0d\u8db3\u9519\u8bef\u7801)\n- ERR_INVALID_PATH\u5e38\u91cf(\u8def\u5f84\u65e0\u6548\u9519\u8bef\u7801)\n- ERR_FILE_EXISTS\u5e38\u91cf(\u6587\u4ef6\u5df2\u5b58\u5728\u9519\u8bef\u7801)\n- SUCCESS\u5e38\u91cf(\u6210\u529f\u72b6\u6001\u7801)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n- FILE_TYPE_REGULAR\u5e38\u91cf(\u5e38\u89c4\u6587\u4ef6\u7c7b\u578b\u6807\u8bc6)\n- directory_t\u7ed3\u6784(\u76ee\u5f55\u5185\u5bb9\u8868\u793a)\n*/\n", "ret_type": "int", "name": "create_file", "op_source": "define", "id": 8, "source_code": "int create_file(directory_t *parent_dir, const char *filename, file_permissions_t permissions) {\n    // \u68c0\u67e5\u76ee\u5f55\u662f\u5426\u5df2\u6ee1\n    if (parent_dir->file_count >= MAX_FILES_PER_DIR) {\n        return ERR_DISK_FULL;\n    }\n    \n    // \u68c0\u67e5\u6587\u4ef6\u540d\u957f\u5ea6\n    if (strlen(filename) >= MAX_FILENAME_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // \u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5df2\u5b58\u5728\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0) {\n            return ERR_FILE_EXISTS;\n        }\n    }\n    \n    // \u521b\u5efa\u65b0\u6587\u4ef6\u9879\n    file_entry_t *new_file = &parent_dir->files[parent_dir->file_count];\n    strcpy(new_file->name, filename);\n    new_file->type = FILE_TYPE_REGULAR;\n    new_file->size = 0;\n    new_file->permissions = permissions;\n    new_file->created_time = time(NULL);\n    new_file->modified_time = new_file->created_time;\n    \n    // \u589e\u52a0\u76ee\u5f55\u6587\u4ef6\u8ba1\u6570\n    parent_dir->file_count++;\n    \n    return SUCCESS;\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "46", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "file_ops.c:101:5", "is_static": false, "semantic_explanation": "/*\nread_file(\u51fd\u6570): \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u5728\u76ee\u5f55\u4e2d\u5b9a\u4f4d\u6307\u5b9a\u6587\u4ef6\n- \u9a8c\u8bc1\u8bf7\u6c42\u7684\u8bfb\u53d6\u6743\u9650\u548c\u8303\u56f4\n- \u4ece\u6587\u4ef6\u7684\u6307\u5b9a\u504f\u79fb\u4f4d\u7f6e\u8bfb\u53d6\u6570\u636e\n\n\u53c2\u6570:\n- parent_dir: \u5305\u542b\u76ee\u6807\u6587\u4ef6\u7684\u76ee\u5f55\n- filename: \u8981\u8bfb\u53d6\u7684\u6587\u4ef6\u540d\n- buffer: \u5b58\u653e\u8bfb\u53d6\u6570\u636e\u7684\u5185\u5b58\u7f13\u51b2\u533a\n- size: \u8981\u8bfb\u53d6\u7684\u6700\u5927\u5b57\u8282\u6570\n- offset: \u6587\u4ef6\u5185\u5f00\u59cb\u8bfb\u53d6\u7684\u4f4d\u7f6e(\u5b57\u8282\u504f\u79fb)\n\n\u8fd4\u56de\u503c:\n- \u6b63\u6570: \u5b9e\u9645\u8bfb\u53d6\u7684\u5b57\u8282\u6570\n- ERR_FILE_NOT_FOUND: \u6307\u5b9a\u6587\u4ef6\u4e0d\u5b58\u5728\n- ERR_PERMISSION_DENIED: \u7f3a\u5c11\u8bfb\u53d6\u6743\u9650\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- ERR_FILE_NOT_FOUND\u5e38\u91cf(\u6587\u4ef6\u4e0d\u5b58\u5728\u9519\u8bef\u7801)\n- ERR_PERMISSION_DENIED\u5e38\u91cf(\u6743\u9650\u4e0d\u8db3\u9519\u8bef\u7801)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n- FILE_TYPE_REGULAR\u5e38\u91cf(\u5e38\u89c4\u6587\u4ef6\u7c7b\u578b\u6807\u8bc6)\n- directory_t\u7ed3\u6784(\u76ee\u5f55\u5185\u5bb9\u8868\u793a)\n*/\n", "ret_type": "int", "name": "read_file", "op_source": "define", "id": 13, "source_code": "int read_file(directory_t *parent_dir, const char *filename, void *buffer, size_t size, size_t offset) {\n    // \u67e5\u627e\u6587\u4ef6\n    file_entry_t *file = NULL;\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0 && \n            parent_dir->files[i].type == FILE_TYPE_REGULAR) {\n            file = &parent_dir->files[i];\n            break;\n        }\n    }\n    \n    if (!file) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // \u68c0\u67e5\u8bfb\u53d6\u6743\u9650\n    if (!file->permissions.read) {\n        return ERR_PERMISSION_DENIED;\n    }\n    \n    // \u68c0\u67e5\u8bfb\u53d6\u8303\u56f4\u662f\u5426\u6709\u6548\n    if (offset >= file->size) {\n        return 0;  // \u6ca1\u6709\u53ef\u8bfb\u53d6\u7684\u5185\u5bb9\n    }\n    \n    // \u8ba1\u7b97\u5b9e\u9645\u53ef\u8bfb\u53d6\u7684\u5b57\u8282\u6570\n    size_t bytes_to_read = (offset + size <= file->size) ? size : (file->size - offset);\n    \n    // \u7b80\u5316\u7248\uff1a\u5b9e\u9645\u5e94\u8be5\u4eceblock_pointers\u6307\u5411\u7684\u5757\u4e2d\u8bfb\u53d6\u6570\u636e\n    // \u8fd9\u91cc\u53ea\u662f\u793a\u4f8b\uff0c\u6240\u4ee5\u8fd4\u56de\u53ef\u8bfb\u53d6\u7684\u5b57\u8282\u6570\n    \n    return bytes_to_read;\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "47", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "fs_api.c:77:5", "is_static": false, "semantic_explanation": "/*\nfs_create_file(\u51fd\u6570): \u5728\u6307\u5b9a\u8def\u5f84\u521b\u5efa\u65b0\u6587\u4ef6\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u63d0\u4f9b\u9762\u5411\u8def\u5f84\u7684\u6587\u4ef6\u521b\u5efa\u63a5\u53e3\n- \u89e3\u6790\u8def\u5f84\u4ee5\u786e\u5b9a\u7236\u76ee\u5f55\u548c\u6587\u4ef6\u540d\n- \u8bbe\u7f6e\u6307\u5b9a\u7684\u8bfb\u5199\u6267\u884c\u6743\u9650\n- \u5728\u9002\u5f53\u7684\u76ee\u5f55\u4e2d\u521b\u5efa\u6587\u4ef6\n\n\u53c2\u6570:\n- path: \u8981\u521b\u5efa\u7684\u6587\u4ef6\u5b8c\u6574\u8def\u5f84\n- read_perm: \u8bfb\u53d6\u6743\u9650\u6807\u5fd7(1=\u5141\u8bb8,0=\u7981\u6b62)\n- write_perm: \u5199\u5165\u6743\u9650\u6807\u5fd7(1=\u5141\u8bb8,0=\u7981\u6b62)\n- exec_perm: \u6267\u884c\u6743\u9650\u6807\u5fd7(1=\u5141\u8bb8,0=\u7981\u6b62)\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u6587\u4ef6\u521b\u5efa\u6210\u529f\n- ERR_INVALID_PATH: \u8def\u5f84\u65e0\u6548\n- ERR_FILE_EXISTS: \u6587\u4ef6\u5df2\u5b58\u5728\n- \u5176\u4ed6\u9519\u8bef\u7801: \u7ee7\u627f\u81ea\u5e95\u5c42\u51fd\u6570\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- validate_path\u51fd\u6570(\u8def\u5f84\u9a8c\u8bc1)\n- split_path\u51fd\u6570(\u8def\u5f84\u5206\u89e3)\n- find_directory\u51fd\u6570(\u76ee\u5f55\u67e5\u627e)\n- create_file\u51fd\u6570(\u6587\u4ef6\u521b\u5efa)\n- MAX_PATH_LEN\u5e38\u91cf(\u8def\u5f84\u957f\u5ea6\u9650\u5236)\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- ERR_INVALID_PATH\u5e38\u91cf(\u8def\u5f84\u65e0\u6548\u9519\u8bef\u7801)\n- file_permissions_t\u7ed3\u6784(\u6743\u9650\u8868\u793a)\n*/\n", "ret_type": "int", "name": "fs_create_file", "op_source": "define", "id": 41, "source_code": "int fs_create_file(const char *path, int read_perm, int write_perm, int exec_perm) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char filename[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, filename);\n    \n    // \u67e5\u627e\u7236\u76ee\u5f55\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_INVALID_PATH;  // \u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n    }\n    \n    // \u8bbe\u7f6e\u6743\u9650\n    file_permissions_t perms;\n    perms.read = read_perm ? 1 : 0;\n    perms.write = write_perm ? 1 : 0;\n    perms.execute = exec_perm ? 1 : 0;\n    \n    // \u521b\u5efa\u6587\u4ef6\n    return create_file(parent, filename, perms);\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "48", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "file_ops.c:168:5", "is_static": false, "semantic_explanation": "/*\nwrite_file(\u51fd\u6570): \u5411\u6587\u4ef6\u5199\u5165\u6570\u636e\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u5728\u76ee\u5f55\u4e2d\u5b9a\u4f4d\u6307\u5b9a\u6587\u4ef6\n- \u9a8c\u8bc1\u5199\u5165\u6743\u9650\n- \u5fc5\u8981\u65f6\u6269\u5c55\u6587\u4ef6\u5927\u5c0f\u5e76\u5206\u914d\u65b0\u5b58\u50a8\u5757\n- \u5728\u6307\u5b9a\u504f\u79fb\u5904\u5199\u5165\u6570\u636e\u5e76\u66f4\u65b0\u6587\u4ef6\u5143\u6570\u636e\n\n\u53c2\u6570:\n- parent_dir: \u5305\u542b\u76ee\u6807\u6587\u4ef6\u7684\u76ee\u5f55\n- filename: \u8981\u5199\u5165\u7684\u6587\u4ef6\u540d\n- buffer: \u5305\u542b\u8981\u5199\u5165\u6570\u636e\u7684\u5185\u5b58\u7f13\u51b2\u533a\n- size: \u8981\u5199\u5165\u7684\u5b57\u8282\u6570\n- offset: \u6587\u4ef6\u5185\u5f00\u59cb\u5199\u5165\u7684\u4f4d\u7f6e(\u5b57\u8282\u504f\u79fb)\n\n\u8fd4\u56de\u503c:\n- \u6b63\u6570: \u5b9e\u9645\u5199\u5165\u7684\u5b57\u8282\u6570\n- ERR_FILE_NOT_FOUND: \u6307\u5b9a\u6587\u4ef6\u4e0d\u5b58\u5728\n- ERR_PERMISSION_DENIED: \u7f3a\u5c11\u5199\u5165\u6743\u9650\n- ERR_DISK_FULL: \u5b58\u50a8\u7a7a\u95f4\u4e0d\u8db3\u6216\u6587\u4ef6\u5927\u5c0f\u8d85\u9650\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- ERR_FILE_NOT_FOUND\u5e38\u91cf(\u6587\u4ef6\u4e0d\u5b58\u5728\u9519\u8bef\u7801)\n- ERR_PERMISSION_DENIED\u5e38\u91cf(\u6743\u9650\u4e0d\u8db3\u9519\u8bef\u7801)\n- ERR_DISK_FULL\u5e38\u91cf(\u7a7a\u95f4\u4e0d\u8db3\u9519\u8bef\u7801)\n- MAX_FILE_SIZE\u5e38\u91cf(\u6587\u4ef6\u5927\u5c0f\u4e0a\u9650)\n- BLOCK_SIZE\u5e38\u91cf(\u5b58\u50a8\u5757\u5927\u5c0f)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n- FILE_TYPE_REGULAR\u5e38\u91cf(\u5e38\u89c4\u6587\u4ef6\u7c7b\u578b\u6807\u8bc6)\n- directory_t\u7ed3\u6784(\u76ee\u5f55\u5185\u5bb9\u8868\u793a)\n- allocate_blocks\u51fd\u6570(\u5b58\u50a8\u7a7a\u95f4\u5206\u914d)\n*/\n", "ret_type": "int", "name": "write_file", "op_source": "define", "id": 15, "source_code": "int write_file(directory_t *parent_dir, const char *filename, const void *buffer, size_t size, size_t offset) {\n    // \u67e5\u627e\u6587\u4ef6\n    file_entry_t *file = NULL;\n    for (int i = 0; i < parent_dir->file_count; i++) {\n        if (strcmp(parent_dir->files[i].name, filename) == 0 && \n            parent_dir->files[i].type == FILE_TYPE_REGULAR) {\n            file = &parent_dir->files[i];\n            break;\n        }\n    }\n    \n    if (!file) {\n        return ERR_FILE_NOT_FOUND;\n    }\n    \n    // \u68c0\u67e5\u5199\u5165\u6743\u9650\n    if (!file->permissions.write) {\n        return ERR_PERMISSION_DENIED;\n    }\n    \n    // \u68c0\u67e5\u662f\u5426\u9700\u8981\u6269\u5c55\u6587\u4ef6\u5927\u5c0f\n    size_t new_size = (offset + size > file->size) ? (offset + size) : file->size;\n    \n    // \u68c0\u67e5\u6587\u4ef6\u5927\u5c0f\u4e0a\u9650\n    if (new_size > MAX_FILE_SIZE) {\n        return ERR_DISK_FULL;\n    }\n    \n    // \u5982\u679c\u9700\u8981\u5206\u914d\u65b0\u5757\n    if (new_size > file->size) {\n        int blocks_needed = (new_size - file->size + BLOCK_SIZE - 1) / BLOCK_SIZE;\n        int start_block = allocate_blocks(blocks_needed);\n        if (start_block < 0) {\n            return start_block;  // \u8fd4\u56de\u9519\u8bef\u7801\n        }\n        \n        // \u7b80\u5316\u7248\uff1a\u5e94\u8be5\u66f4\u65b0file->block_pointers\uff0c\u5206\u914d\u65b0\u5757\n    }\n    \n    // \u66f4\u65b0\u6587\u4ef6\u5927\u5c0f\u548c\u4fee\u6539\u65f6\u95f4\n    file->size = new_size;\n    file->modified_time = time(NULL);\n    \n    return size;  // \u8fd4\u56de\u5199\u5165\u7684\u5b57\u8282\u6570\n}", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "49", "labels": ["Function"]}, "properties": {"decl_loc": "", "def_loc": "dir_ops.c:106:5", "is_static": false, "semantic_explanation": "/*\ncreate_directory(\u51fd\u6570): \u521b\u5efa\u65b0\u76ee\u5f55\u3002\n\n\u529f\u80fd\u63cf\u8ff0:\n- \u9a8c\u8bc1\u8def\u5f84\u5e76\u89e3\u6790\u7236\u76ee\u5f55\u548c\u76ee\u5f55\u540d\n- \u68c0\u67e5\u7236\u76ee\u5f55\u662f\u5426\u5b58\u5728\u53ca\u5176\u5bb9\u91cf\n- \u521b\u5efa\u65b0\u76ee\u5f55\u7ed3\u6784\u5e76\u5728\u7236\u76ee\u5f55\u4e2d\u6dfb\u52a0\u5bf9\u5e94\u6761\u76ee\n\n\u53c2\u6570:\n- path: \u8981\u521b\u5efa\u7684\u76ee\u5f55\u7684\u5b8c\u6574\u8def\u5f84\n\n\u8fd4\u56de\u503c:\n- SUCCESS: \u76ee\u5f55\u521b\u5efa\u6210\u529f\n- ERR_INVALID_PATH: \u8def\u5f84\u65e0\u6548\u6216\u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n- ERR_FILE_EXISTS: \u540c\u540d\u76ee\u5f55\u6216\u6587\u4ef6\u5df2\u5b58\u5728\n- ERR_DISK_FULL: \u5185\u5b58\u5206\u914d\u5931\u8d25\u6216\u76ee\u5f55\u5df2\u6ee1\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- validate_path\u51fd\u6570(\u8def\u5f84\u9a8c\u8bc1)\n- find_directory\u51fd\u6570(\u76ee\u5f55\u67e5\u627e)\n- split_path\u51fd\u6570(\u8def\u5f84\u5206\u89e3)\n- MAX_PATH_LEN\u5e38\u91cf(\u8def\u5f84\u957f\u5ea6\u9650\u5236)\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- ERR_INVALID_PATH\u5e38\u91cf(\u8def\u5f84\u65e0\u6548\u9519\u8bef\u7801)\n- ERR_FILE_EXISTS\u5e38\u91cf(\u6587\u4ef6\u5df2\u5b58\u5728\u9519\u8bef\u7801)\n- ERR_DISK_FULL\u5e38\u91cf(\u8d44\u6e90\u4e0d\u8db3\u9519\u8bef\u7801)\n- SUCCESS\u5e38\u91cf(\u6210\u529f\u72b6\u6001\u7801)\n- FILE_TYPE_DIRECTORY\u5e38\u91cf(\u76ee\u5f55\u7c7b\u578b\u6807\u8bc6)\n- directory_t\u7ed3\u6784(\u76ee\u5f55\u5185\u5bb9\u8868\u793a)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n*/\n", "ret_type": "int", "name": "create_directory", "op_source": "define", "id": 25, "source_code": "int create_directory(const char *path) {\n    if (validate_path(path) != SUCCESS) {\n        return ERR_INVALID_PATH;\n    }\n    \n    char parent_path[MAX_PATH_LEN];\n    char dirname[MAX_FILENAME_LEN];\n    \n    split_path(path, parent_path, dirname);\n    \n    // \u67e5\u627e\u7236\u76ee\u5f55\n    directory_t *parent = find_directory(parent_path);\n    if (!parent) {\n        return ERR_INVALID_PATH;  // \u7236\u76ee\u5f55\u4e0d\u5b58\u5728\n    }\n    \n    // \u68c0\u67e5\u76ee\u5f55\u540d\u957f\u5ea6\n    if (strlen(dirname) >= MAX_FILENAME_LEN) {\n        return ERR_INVALID_PATH;\n    }\n    \n    // \u68c0\u67e5\u76ee\u5f55\u662f\u5426\u5df2\u5b58\u5728\n    for (int i = 0; i < parent->file_count; i++) {\n        if (strcmp(parent->files[i].name, dirname) == 0) {\n            return ERR_FILE_EXISTS;\n        }\n    }\n    \n    // \u521b\u5efa\u76ee\u5f55\u9879\n    file_entry_t *dir_entry = &parent->files[parent->file_count];\n    strcpy(dir_entry->name, dirname);\n    dir_entry->type = FILE_TYPE_DIRECTORY;\n    dir_entry->size = 0;\n    \n    // \u8bbe\u7f6e\u9ed8\u8ba4\u6743\u9650 (\u8bfb/\u5199/\u6267\u884c)\n    dir_entry->permissions.read = 1;\n    dir_entry->permissions.write = 1;\n    dir_entry->permissions.execute = 1;\n    \n    dir_entry->created_time = time(NULL);\n    dir_entry->modified_time = dir_entry->created_time;\n    \n    // \u5206\u914d\u65b0\u76ee\u5f55\u7ed3\u6784\n    directory_t *new_dir = (directory_t*)malloc(sizeof(directory_t));\n    if (!new_dir) {\n        return ERR_DISK_FULL;  // \u5185\u5b58\u5206\u914d\u5931\u8d25\n    }\n    \n    // \u521d\u59cb\u5316\u65b0\u76ee\u5f55\n    strcpy(new_dir->name, dirname);\n    new_dir->file_count = 0;\n    \n    // \u5b58\u50a8\u76ee\u5f55\u7ed3\u6784\u6307\u9488\n    // \u7b80\u5316\u7248\uff1a\u5c06\u76ee\u5f55\u7ed3\u6784\u6307\u9488\u5b58\u50a8\u5728block_pointers[0]\n    dir_entry->block_pointers[0] = (int)new_dir;\n    \n    // \u589e\u52a0\u7236\u76ee\u5f55\u6587\u4ef6\u8ba1\u6570\n    parent->file_count++;\n    \n    return SUCCESS;\n}\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "50", "labels": ["Global"]}, "properties": {"decl_loc": "", "def_loc": "dir_ops.c:15:20", "is_static": false, "semantic_explanation": "", "is_extern": false, "name": "root_directory", "op_source": "define", "id": 1, "source_code": "/* dir_ops.c */\n#include \"file_types.h\"\n#include <string.h>\n#include <stdlib.h>\n#include <time.h>\n\n// \u58f0\u660e\u4eceutils.c\u5bfc\u5165\u7684\u51fd\u6570\nextern int validate_path(const char *path);\nextern void split_path(const char *path, char *parent_path, char *filename);\n\n// \u58f0\u660e\u4ecefile_ops.c\u5bfc\u5165\u7684\u51fd\u6570\nextern int create_file(directory_t *parent_dir, const char *filename, file_permissions_t permissions);\n\n// \u5168\u5c40\u6839\u76ee\u5f55\nstatic directory_t root_directory = { \"/\", {}, 0 };\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "51", "labels": ["Type"]}, "properties": {"decl_loc": "", "def_loc": "constants.h:32:9", "semantic_explanation": "/*\nfs_error_t(\u679a\u4e3e\u7c7b\u578b): \u5b9a\u4e49\u6587\u4ef6\u7cfb\u7edf\u64cd\u4f5c\u7684\u53ef\u80fd\u9519\u8bef\u7801\uff1a\n- SUCCESS: \u64cd\u4f5c\u6210\u529f\u5b8c\u6210(0)\n- ERR_FILE_NOT_FOUND: \u8bf7\u6c42\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u4e0d\u5b58\u5728(-1)\n- ERR_FILE_EXISTS: \u5c1d\u8bd5\u521b\u5efa\u7684\u6587\u4ef6\u6216\u76ee\u5f55\u5df2\u5b58\u5728(-2)\n- ERR_DISK_FULL: \u5b58\u50a8\u7a7a\u95f4\u4e0d\u8db3\uff0c\u65e0\u6cd5\u5b8c\u6210\u64cd\u4f5c(-3)\n- ERR_INVALID_PATH: \u63d0\u4f9b\u7684\u8def\u5f84\u683c\u5f0f\u65e0\u6548\u6216\u8d85\u51fa\u957f\u5ea6\u9650\u5236(-4)\n- ERR_PERMISSION_DENIED: \u7528\u6237\u6743\u9650\u4e0d\u8db3\uff0c\u65e0\u6cd5\u6267\u884c\u8bf7\u6c42\u64cd\u4f5c(-5)\n*/\n", "is_function_pointer": false, "kind": "", "name": "fs_error_t", "op_source": "use", "is_definition": false, "id": 1, "source_code": "typedef enum {\n    SUCCESS = 0,\n    ERR_FILE_NOT_FOUND = -1,\n    ERR_FILE_EXISTS = -2,\n    ERR_DISK_FULL = -3,\n    ERR_INVALID_PATH = -4,\n    ERR_PERMISSION_DENIED = -5\n} fs_error_t;", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "52", "labels": ["Type"]}, "properties": {"decl_loc": "", "def_loc": "file_types.h:74:3", "semantic_explanation": "/*\ndirectory_t(\u7ed3\u6784\u4f53): \u8868\u793a\u6587\u4ef6\u7cfb\u7edf\u4e2d\u7684\u76ee\u5f55\u7ed3\u6784\uff1a\n- name: \u76ee\u5f55\u540d\u79f0\uff0c\u6700\u5927\u957f\u5ea6\u7531MAX_FILENAME_LEN\u9650\u5236\n- files: \u5305\u542b\u7684\u6587\u4ef6\u548c\u5b50\u76ee\u5f55\u6570\u7ec4\uff0c\u6700\u5927\u5bb9\u91cf\u7531MAX_FILES_PER_DIR\u9650\u5236\n- file_count: \u5f53\u524d\u76ee\u5f55\u4e2d\u5b9e\u9645\u5305\u542b\u7684\u6587\u4ef6\u548c\u5b50\u76ee\u5f55\u6570\u91cf\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- MAX_FILENAME_LEN\u5e38\u91cf(\u76ee\u5f55\u540d\u957f\u5ea6\u9650\u5236)\n- MAX_FILES_PER_DIR\u5e38\u91cf(\u5355\u76ee\u5f55\u6700\u5927\u5bb9\u91cf)\n- file_entry_t\u7ed3\u6784(\u6587\u4ef6\u5143\u6570\u636e\u8868\u793a)\n*/\n", "is_function_pointer": false, "kind": "", "name": "directory_t", "op_source": "use", "is_definition": false, "id": 3, "source_code": "typedef struct {\n    char name[MAX_FILENAME_LEN];\n    file_entry_t files[MAX_FILES_PER_DIR];\n    int file_count;\n} directory_t;", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "53", "labels": ["Type"]}, "properties": {"decl_loc": "", "def_loc": "file_types.h:31:3", "semantic_explanation": "/*\nfile_permissions_t(\u7ed3\u6784\u4f53): \u4f7f\u7528\u4f4d\u57df\u8868\u793aUnix\u98ce\u683c\u7684\u6587\u4ef6\u6743\u9650\uff1a\n- read: 1\u4f4d\u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u5141\u8bb8\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\n- write: 1\u4f4d\u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u5141\u8bb8\u4fee\u6539\u6587\u4ef6\u5185\u5bb9\n- execute: 1\u4f4d\u5e03\u5c14\u503c\uff0c\u8868\u793a\u662f\u5426\u5141\u8bb8\u6267\u884c\u6587\u4ef6(\u4ec5\u5bf9\u666e\u901a\u6587\u4ef6\u6709\u610f\u4e49)\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9: \u65e0\uff08\u57fa\u672c\u4f4d\u57df\u7ed3\u6784\uff09\n*/\n", "is_function_pointer": false, "kind": "", "name": "file_permissions_t", "op_source": "use", "is_definition": false, "id": 4, "source_code": "typedef struct {\n    unsigned int read: 1;\n    unsigned int write: 1;\n    unsigned int execute: 1;\n} file_permissions_t;\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "54", "labels": ["Type"]}, "properties": {"decl_loc": "", "def_loc": "file_types.h:56:3", "semantic_explanation": "/*\nfile_entry_t(\u7ed3\u6784\u4f53): \u8868\u793a\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5355\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u5143\u6570\u636e\uff1a\n- name: \u6587\u4ef6\u540d\uff0c\u6700\u5927\u957f\u5ea6\u7531MAX_FILENAME_LEN\u9650\u5236\n- type: \u6587\u4ef6\u7c7b\u578b\uff0c\u4f7f\u7528file_type_t\u679a\u4e3e\n- size: \u6587\u4ef6\u5927\u5c0f(\u5b57\u8282\u6570)\n- permissions: \u6587\u4ef6\u6743\u9650\uff0c\u4f7f\u7528file_permissions_t\u7ed3\u6784\n- created_time: \u6587\u4ef6\u521b\u5efa\u65f6\u95f4\u6233\n- modified_time: \u6587\u4ef6\u6700\u540e\u4fee\u6539\u65f6\u95f4\u6233\n- block_pointers: \u5b58\u50a8\u6307\u5411\u5b9e\u9645\u6570\u636e\u5757\u7684\u7d22\u5f15\u6570\u7ec4(\u7b80\u5316\u5b9e\u73b0)\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9:\n- MAX_FILENAME_LEN\u5e38\u91cf(\u6587\u4ef6\u540d\u957f\u5ea6\u9650\u5236)\n- file_type_t\u679a\u4e3e(\u6587\u4ef6\u7c7b\u578b\u5206\u7c7b)\n- file_permissions_t\u7ed3\u6784(\u6587\u4ef6\u6743\u9650\u8bbe\u7f6e)\n*/\n", "is_function_pointer": false, "kind": "", "name": "file_entry_t", "op_source": "use", "is_definition": false, "id": 6, "source_code": "typedef struct {\n    char name[MAX_FILENAME_LEN];\n    file_type_t type;\n    size_t size;\n    file_permissions_t permissions;\n    time_t created_time;\n    time_t modified_time;\n    int block_pointers[10];  // \u7b80\u5316\u7684\u5757\u6307\u9488\u6570\u7ec4\n} file_entry_t;\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "55", "labels": ["Type"]}, "properties": {"decl_loc": "", "def_loc": "file_types.h:13:9", "semantic_explanation": "/*\nfile_type_t(\u679a\u4e3e\u7c7b\u578b): \u8868\u793a\u6587\u4ef6\u7cfb\u7edf\u4e2d\u652f\u6301\u7684\u4e0d\u540c\u7c7b\u578b\u7684\u6587\u4ef6\uff1a\n- FILE_TYPE_REGULAR: \u666e\u901a\u6587\u4ef6(\u503c\u4e3a1)\uff0c\u7528\u4e8e\u5b58\u50a8\u7528\u6237\u6570\u636e\n- FILE_TYPE_DIRECTORY: \u76ee\u5f55\u6587\u4ef6(\u503c\u4e3a2)\uff0c\u7528\u4e8e\u7ec4\u7ec7\u5176\u4ed6\u6587\u4ef6\n- FILE_TYPE_SYMLINK: \u7b26\u53f7\u94fe\u63a5(\u503c\u4e3a3)\uff0c\u6307\u5411\u5176\u4ed6\u6587\u4ef6\u6216\u76ee\u5f55\u7684\u5f15\u7528\n\n\u4f9d\u8d56\u7684\u5df2\u89e3\u91ca\u8282\u70b9: \u65e0\uff08\u57fa\u672c\u679a\u4e3e\u5b9a\u4e49\uff09\n*/\n", "is_function_pointer": false, "kind": "", "name": "file_type_t", "op_source": "use", "is_definition": false, "id": 7, "source_code": "typedef enum {\n    FILE_TYPE_REGULAR = 1,\n    FILE_TYPE_DIRECTORY = 2,\n    FILE_TYPE_SYMLINK = 3\n} file_type_t;\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "56", "labels": ["Type"]}, "properties": {"decl_loc": "", "def_loc": "/usr/include/clang/18.1.3/include/__stddef_size_t.h:18:23", "semantic_explanation": "", "kind": "", "is_function_pointer": false, "name": "size_t", "op_source": "use", "is_definition": false, "id": 9, "source_code": "typedef __SIZE_TYPE__ size_t;\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "57", "labels": ["Macro"]}, "properties": {"def_loc": "constants.h:13:9", "semantic_explanation": "/*MAX_FILES_PER_DIR(\u5e38\u91cf): \u5b9a\u4e49\u5355\u4e2a\u76ee\u5f55\u53ef\u5305\u542b\u7684\u6700\u5927\u6587\u4ef6\u6216\u5b50\u76ee\u5f55\u6570\u4e3a100\uff0c\u9650\u5236\u76ee\u5f55\u9879\u6570\u91cf\u3002\n*/\n", "name": "MAX_FILES_PER_DIR", "id": 4, "source_code": "#define MAX_FILES_PER_DIR 100\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "58", "labels": ["Macro"]}, "properties": {"def_loc": "/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9", "semantic_explanation": "", "name": "NULL", "id": 6, "source_code": "#define NULL ((void*)0)\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "59", "labels": ["Macro"]}, "properties": {"def_loc": "constants.h:21:9", "semantic_explanation": "/*BLOCK_SIZE(\u5e38\u91cf): \u5b9a\u4e49\u6587\u4ef6\u7cfb\u7edf\u57fa\u672c\u5b58\u50a8\u5757\u5927\u5c0f\u4e3a4KB(4096\u5b57\u8282)\uff0c\u5f71\u54cd\u78c1\u76d8\u7a7a\u95f4\u5206\u914d\u7684\u7c92\u5ea6\u3002\n*/\n", "name": "BLOCK_SIZE", "id": 3, "source_code": "#define BLOCK_SIZE 4096\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "60", "labels": ["Macro"]}, "properties": {"def_loc": "constants.h:17:9", "semantic_explanation": "/*MAX_FILE_SIZE(\u5e38\u91cf): \u5b9a\u4e49\u5355\u4e2a\u6587\u4ef6\u6700\u5927\u5c3a\u5bf8\u4e3a1MB(1048576\u5b57\u8282)\uff0c\u8bbe\u7f6e\u6587\u4ef6\u7cfb\u7edf\u652f\u6301\u7684\u6587\u4ef6\u5927\u5c0f\u4e0a\u9650\u3002\n*/\n", "name": "MAX_FILE_SIZE", "id": 2, "source_code": "#define MAX_FILE_SIZE 1048576  // 1MB\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "61", "labels": ["Macro"]}, "properties": {"def_loc": "constants.h:9:9", "semantic_explanation": "/*\nMAX_PATH_LEN(\u5e38\u91cf): \u5b9a\u4e49\u5b8c\u6574\u6587\u4ef6\u8def\u5f84\u6700\u5927\u957f\u5ea6\u4e3a1024\u5b57\u7b26\uff0c\u9650\u5236\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4efb\u4f55\u8def\u5f84\u7684\u603b\u5b57\u7b26\u6570\u3002\n*/\n", "name": "MAX_PATH_LEN", "id": 1, "source_code": "#define MAX_PATH_LEN 1024\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "node", "id": "62", "labels": ["Macro"]}, "properties": {"def_loc": "constants.h:4:9", "semantic_explanation": "/*\nMAX_FILENAME_LEN(\u5e38\u91cf): \u5b9a\u4e49\u6587\u4ef6\u540d\u6700\u5927\u957f\u5ea6\u4e3a256\u5b57\u7b26\uff0c\u9650\u5236\u5355\u4e2a\u6587\u4ef6\u6216\u76ee\u5f55\u540d\u79f0\u7684\u5b57\u7b26\u6570\u91cf\u3002\n*/\n", "name": "MAX_FILENAME_LEN", "id": 5, "source_code": "#define MAX_FILENAME_LEN 256\n", "hierarchy": {}}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "0", "labels": ["DEFINES_FUNCTION"], "start_id": "12", "end_id": "39"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "1", "labels": ["DEFINES_FUNCTION"], "start_id": "12", "end_id": "40"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "2", "labels": ["DEFINES_FUNCTION"], "start_id": "12", "end_id": "34"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "3", "labels": ["DEFINES_FUNCTION"], "start_id": "0", "end_id": "45"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "4", "labels": ["DEFINES_FUNCTION"], "start_id": "0", "end_id": "46"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "5", "labels": ["DEFINES_FUNCTION"], "start_id": "0", "end_id": "48"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "6", "labels": ["DEFINES_FUNCTION"], "start_id": "1", "end_id": "41"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "7", "labels": ["DEFINES_FUNCTION"], "start_id": "1", "end_id": "49"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "8", "labels": ["DEFINES_FUNCTION"], "start_id": "1", "end_id": "35"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "9", "labels": ["DEFINES_FUNCTION"], "start_id": "2", "end_id": "36"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "10", "labels": ["DEFINES_FUNCTION"], "start_id": "2", "end_id": "47"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "11", "labels": ["DEFINES_FUNCTION"], "start_id": "2", "end_id": "42"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "12", "labels": ["DEFINES_FUNCTION"], "start_id": "2", "end_id": "43"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "13", "labels": ["DEFINES_FUNCTION"], "start_id": "2", "end_id": "37"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "14", "labels": ["DEFINES_FUNCTION"], "start_id": "2", "end_id": "44"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "15", "labels": ["DEFINES_FUNCTION"], "start_id": "5", "end_id": "38"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "16", "labels": ["DECLARES_FUNCTION"], "start_id": "0", "end_id": "19"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "17", "labels": ["DECLARES_FUNCTION"], "start_id": "0", "end_id": "20"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "18", "labels": ["DECLARES_FUNCTION"], "start_id": "1", "end_id": "22"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "19", "labels": ["DECLARES_FUNCTION"], "start_id": "1", "end_id": "23"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "20", "labels": ["DECLARES_FUNCTION"], "start_id": "1", "end_id": "24"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "21", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "26"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "22", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "27"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "23", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "28"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "24", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "29"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "25", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "30"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "26", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "31"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "27", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "32"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "28", "labels": ["DECLARES_FUNCTION"], "start_id": "2", "end_id": "33"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "29", "labels": ["DECLARES_FUNCTION"], "start_id": "9", "end_id": "18"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "30", "labels": ["DEFINES_GLOBAL"], "start_id": "1", "end_id": "50"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "31", "labels": ["DEFINES_TYPE"], "start_id": "10", "end_id": "56"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "32", "labels": ["DEFINES_MACRO"], "start_id": "11", "end_id": "58"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "33", "labels": ["INCLUDES_FILE"], "start_id": "12", "end_id": "3"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "34", "labels": ["INCLUDES_FILE"], "start_id": "12", "end_id": "6"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "35", "labels": ["INCLUDES_FILE"], "start_id": "12", "end_id": "8"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "36", "labels": ["INCLUDES_FILE"], "start_id": "0", "end_id": "3"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "37", "labels": ["INCLUDES_FILE"], "start_id": "0", "end_id": "6"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "38", "labels": ["INCLUDES_FILE"], "start_id": "0", "end_id": "4"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "39", "labels": ["INCLUDES_FILE"], "start_id": "1", "end_id": "3"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "40", "labels": ["INCLUDES_FILE"], "start_id": "1", "end_id": "6"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "41", "labels": ["INCLUDES_FILE"], "start_id": "1", "end_id": "4"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "42", "labels": ["INCLUDES_FILE"], "start_id": "2", "end_id": "3"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "43", "labels": ["INCLUDES_FILE"], "start_id": "2", "end_id": "6"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "44", "labels": ["INCLUDES_FILE"], "start_id": "2", "end_id": "8"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "45", "labels": ["INCLUDES_FILE"], "start_id": "5", "end_id": "7"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "46", "labels": ["INCLUDES_FILE"], "start_id": "5", "end_id": "8"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "47", "labels": ["INVOKES"], "start_id": "39", "end_id": "13"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "48", "labels": ["INVOKES"], "start_id": "40", "end_id": "14"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "49", "labels": ["INVOKES"], "start_id": "40", "end_id": "15"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "50", "labels": ["INVOKES"], "start_id": "40", "end_id": "16"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "51", "labels": ["INVOKES"], "start_id": "45", "end_id": "13"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "52", "labels": ["INVOKES"], "start_id": "45", "end_id": "17"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "53", "labels": ["INVOKES"], "start_id": "45", "end_id": "16"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "54", "labels": ["INVOKES"], "start_id": "45", "end_id": "18"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "55", "labels": ["INVOKES"], "start_id": "46", "end_id": "17"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "56", "labels": ["INVOKES"], "start_id": "48", "end_id": "17"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "57", "labels": ["INVOKES"], "start_id": "48", "end_id": "20"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "58", "labels": ["INVOKES"], "start_id": "48", "end_id": "18"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "59", "labels": ["INVOKES"], "start_id": "41", "end_id": "22"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "60", "labels": ["INVOKES"], "start_id": "41", "end_id": "17"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "61", "labels": ["INVOKES"], "start_id": "41", "end_id": "23"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "62", "labels": ["INVOKES"], "start_id": "49", "end_id": "22"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "63", "labels": ["INVOKES"], "start_id": "49", "end_id": "23"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "64", "labels": ["INVOKES"], "start_id": "49", "end_id": "41"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "65", "labels": ["INVOKES"], "start_id": "49", "end_id": "13"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "66", "labels": ["INVOKES"], "start_id": "49", "end_id": "17"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "67", "labels": ["INVOKES"], "start_id": "49", "end_id": "16"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "68", "labels": ["INVOKES"], "start_id": "49", "end_id": "18"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "69", "labels": ["INVOKES"], "start_id": "49", "end_id": "21"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "70", "labels": ["INVOKES"], "start_id": "35", "end_id": "41"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "71", "labels": ["INVOKES"], "start_id": "36", "end_id": "25"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "72", "labels": ["INVOKES"], "start_id": "47", "end_id": "26"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "73", "labels": ["INVOKES"], "start_id": "47", "end_id": "27"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "74", "labels": ["INVOKES"], "start_id": "47", "end_id": "31"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "75", "labels": ["INVOKES"], "start_id": "47", "end_id": "28"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "76", "labels": ["INVOKES"], "start_id": "42", "end_id": "26"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "77", "labels": ["INVOKES"], "start_id": "42", "end_id": "27"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "78", "labels": ["INVOKES"], "start_id": "42", "end_id": "31"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "79", "labels": ["INVOKES"], "start_id": "42", "end_id": "29"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "80", "labels": ["INVOKES"], "start_id": "43", "end_id": "26"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "81", "labels": ["INVOKES"], "start_id": "43", "end_id": "27"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "82", "labels": ["INVOKES"], "start_id": "43", "end_id": "31"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "83", "labels": ["INVOKES"], "start_id": "43", "end_id": "30"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "84", "labels": ["INVOKES"], "start_id": "37", "end_id": "32"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "85", "labels": ["INVOKES"], "start_id": "44", "end_id": "33"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "86", "labels": ["INVOKES"], "start_id": "38", "end_id": "25"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "87", "labels": ["IMPLEMENTED_BY"], "start_id": "20", "end_id": "34"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "88", "labels": ["IMPLEMENTED_BY"], "start_id": "19", "end_id": "39"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "89", "labels": ["IMPLEMENTED_BY"], "start_id": "22", "end_id": "39"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "90", "labels": ["IMPLEMENTED_BY"], "start_id": "23", "end_id": "40"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "91", "labels": ["IMPLEMENTED_BY"], "start_id": "24", "end_id": "45"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "92", "labels": ["IMPLEMENTED_BY"], "start_id": "26", "end_id": "39"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "93", "labels": ["IMPLEMENTED_BY"], "start_id": "27", "end_id": "40"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "94", "labels": ["IMPLEMENTED_BY"], "start_id": "31", "end_id": "41"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "95", "labels": ["IMPLEMENTED_BY"], "start_id": "28", "end_id": "45"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "96", "labels": ["IMPLEMENTED_BY"], "start_id": "29", "end_id": "46"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "97", "labels": ["IMPLEMENTED_BY"], "start_id": "30", "end_id": "48"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "98", "labels": ["IMPLEMENTED_BY"], "start_id": "32", "end_id": "49"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "99", "labels": ["IMPLEMENTED_BY"], "start_id": "33", "end_id": "35"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "100", "labels": ["USES_GLOBAL"], "start_id": "41", "end_id": "50"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "101", "labels": ["USES_TYPE"], "start_id": "39", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "102", "labels": ["USES_TYPE"], "start_id": "34", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "103", "labels": ["USES_TYPE"], "start_id": "45", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "104", "labels": ["USES_TYPE"], "start_id": "45", "end_id": "53"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "105", "labels": ["USES_TYPE"], "start_id": "45", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "106", "labels": ["USES_TYPE"], "start_id": "45", "end_id": "54"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "107", "labels": ["USES_TYPE"], "start_id": "45", "end_id": "55"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "108", "labels": ["USES_TYPE"], "start_id": "46", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "109", "labels": ["USES_TYPE"], "start_id": "46", "end_id": "56"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "110", "labels": ["USES_TYPE"], "start_id": "46", "end_id": "54"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "111", "labels": ["USES_TYPE"], "start_id": "46", "end_id": "55"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "112", "labels": ["USES_TYPE"], "start_id": "46", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "113", "labels": ["USES_TYPE"], "start_id": "48", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "114", "labels": ["USES_TYPE"], "start_id": "48", "end_id": "56"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "115", "labels": ["USES_TYPE"], "start_id": "48", "end_id": "54"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "116", "labels": ["USES_TYPE"], "start_id": "48", "end_id": "55"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "117", "labels": ["USES_TYPE"], "start_id": "48", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "118", "labels": ["USES_TYPE"], "start_id": "41", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "119", "labels": ["USES_TYPE"], "start_id": "41", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "120", "labels": ["USES_TYPE"], "start_id": "41", "end_id": "55"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "121", "labels": ["USES_TYPE"], "start_id": "49", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "122", "labels": ["USES_TYPE"], "start_id": "49", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "123", "labels": ["USES_TYPE"], "start_id": "49", "end_id": "54"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "124", "labels": ["USES_TYPE"], "start_id": "49", "end_id": "55"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "125", "labels": ["USES_TYPE"], "start_id": "35", "end_id": "54"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "126", "labels": ["USES_TYPE"], "start_id": "35", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "127", "labels": ["USES_TYPE"], "start_id": "35", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "128", "labels": ["USES_TYPE"], "start_id": "36", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "129", "labels": ["USES_TYPE"], "start_id": "47", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "130", "labels": ["USES_TYPE"], "start_id": "47", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "131", "labels": ["USES_TYPE"], "start_id": "47", "end_id": "53"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "132", "labels": ["USES_TYPE"], "start_id": "42", "end_id": "56"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "133", "labels": ["USES_TYPE"], "start_id": "42", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "134", "labels": ["USES_TYPE"], "start_id": "42", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "135", "labels": ["USES_TYPE"], "start_id": "43", "end_id": "56"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "136", "labels": ["USES_TYPE"], "start_id": "43", "end_id": "51"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "137", "labels": ["USES_TYPE"], "start_id": "43", "end_id": "52"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "138", "labels": ["USES_TYPE"], "start_id": "44", "end_id": "54"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "139", "labels": ["USES_MACRO"], "start_id": "39", "end_id": "61"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "140", "labels": ["USES_MACRO"], "start_id": "34", "end_id": "60"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "141", "labels": ["USES_MACRO"], "start_id": "34", "end_id": "59"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "142", "labels": ["USES_MACRO"], "start_id": "45", "end_id": "57"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "143", "labels": ["USES_MACRO"], "start_id": "45", "end_id": "62"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "144", "labels": ["USES_MACRO"], "start_id": "45", "end_id": "58"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "145", "labels": ["USES_MACRO"], "start_id": "46", "end_id": "58"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "146", "labels": ["USES_MACRO"], "start_id": "48", "end_id": "58"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "147", "labels": ["USES_MACRO"], "start_id": "48", "end_id": "60"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "148", "labels": ["USES_MACRO"], "start_id": "48", "end_id": "59"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "149", "labels": ["USES_MACRO"], "start_id": "41", "end_id": "58"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "150", "labels": ["USES_MACRO"], "start_id": "41", "end_id": "61"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "151", "labels": ["USES_MACRO"], "start_id": "41", "end_id": "62"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "152", "labels": ["USES_MACRO"], "start_id": "49", "end_id": "61"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "153", "labels": ["USES_MACRO"], "start_id": "49", "end_id": "62"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "154", "labels": ["USES_MACRO"], "start_id": "49", "end_id": "58"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "155", "labels": ["USES_MACRO"], "start_id": "36", "end_id": "59"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "156", "labels": ["USES_MACRO"], "start_id": "36", "end_id": "60"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "157", "labels": ["USES_MACRO"], "start_id": "47", "end_id": "61"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "158", "labels": ["USES_MACRO"], "start_id": "47", "end_id": "62"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "159", "labels": ["USES_MACRO"], "start_id": "42", "end_id": "61"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "160", "labels": ["USES_MACRO"], "start_id": "42", "end_id": "62"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "161", "labels": ["USES_MACRO"], "start_id": "43", "end_id": "61"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "162", "labels": ["USES_MACRO"], "start_id": "43", "end_id": "62"}, "properties": {}}
{"operation": "insert", "update_fields": "", "meta_data": {"type": "relationship", "id": "163", "labels": ["USES_TYPE"], "start_id": "50", "end_id": "52"}, "properties": {}}
