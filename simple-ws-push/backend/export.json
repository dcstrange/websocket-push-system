
{"type":"node","id":"0","labels":["File"],"properties":{"path":"/usr/include/stdio.h","semantic_explanation":"[unexplaned]","id":2,"source_code":""}}
{"type":"node","id":"1","labels":["File"],"properties":{"path":"/usr/include/stdlib.h","semantic_explanation":"[unexplaned]","id":8,"source_code":""}}
{"type":"node","id":"2","labels":["File"],"properties":{"path":"/usr/include/string.h","semantic_explanation":"[unexplaned]","id":3,"source_code":""}}
{"type":"node","id":"3","labels":["File"],"properties":{"path":"main.c","file_hash":"","semantic_explanation":"[unexplaned]","id":1,"source_code":""}}
{"type":"node","id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}}
{"type":"node","id":"5","labels":["File"],"properties":{"path":"book.h","semantic_explanation":"[unexplaned]","id":4,"source_code":""}}
{"type":"node","id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}}
{"type":"node","id":"7","labels":["File"],"properties":{"path":"library.h","semantic_explanation":"[unexplaned]","id":5,"source_code":""}}
{"type":"node","id":"8","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdio.h:363:12","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"printf","op_source":"use","id":2,"source_code":""}}
{"type":"node","id":"9","labels":["Function"],"properties":{"decl_loc":"library.h:85:10","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"createLibrary","op_source":"use","id":4,"source_code":""}}
{"type":"node","id":"10","labels":["Function"],"properties":{"decl_loc":"book.h:82:7","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"createBook","op_source":"use","id":6,"source_code":""}}
{"type":"node","id":"11","labels":["Function"],"properties":{"decl_loc":"library.h:143:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"addBook","op_source":"use","id":7,"source_code":""}}
{"type":"node","id":"12","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdio.h:466:12","def_loc":"undefined","semantic_explanation":"[unexplaned]","is_static":false,"ret_type":"","name":"scanf","op_source":"use","id":9,"source_code":""}}
{"type":"node","id":"13","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdio.h:582:12","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"getchar","op_source":"use","id":10,"source_code":""}}
{"type":"node","id":"14","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdio.h:654:14","def_loc":"undefined","semantic_explanation":"[unexplaned]","is_static":false,"ret_type":"","name":"fgets","op_source":"use","id":11,"source_code":""}}
{"type":"node","id":"15","labels":["Function"],"properties":{"decl_loc":"/usr/include/string.h:293:15","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"strcspn","op_source":"use","id":12,"source_code":""}}
{"type":"node","id":"16","labels":["Function"],"properties":{"decl_loc":"book.h:111:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"destroyBook","op_source":"use","id":13,"source_code":""}}
{"type":"node","id":"17","labels":["Function"],"properties":{"decl_loc":"library.h:173:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"removeBook","op_source":"use","id":14,"source_code":""}}
{"type":"node","id":"18","labels":["Function"],"properties":{"decl_loc":"library.h:202:7","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"findBookByISBN","op_source":"use","id":15,"source_code":""}}
{"type":"node","id":"19","labels":["Function"],"properties":{"decl_loc":"book.h:140:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"printBook","op_source":"use","id":16,"source_code":""}}
{"type":"node","id":"20","labels":["Function"],"properties":{"decl_loc":"library.h:260:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"listAllBooks","op_source":"use","id":17,"source_code":""}}
{"type":"node","id":"21","labels":["Function"],"properties":{"decl_loc":"library.h:289:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"borrowBook","op_source":"use","id":18,"source_code":""}}
{"type":"node","id":"22","labels":["Function"],"properties":{"decl_loc":"library.h:318:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"returnBook","op_source":"use","id":19,"source_code":""}}
{"type":"node","id":"23","labels":["Function"],"properties":{"decl_loc":"library.h:375:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"sortBooksByTitle","op_source":"use","id":20,"source_code":""}}
{"type":"node","id":"24","labels":["Function"],"properties":{"decl_loc":"library.h:404:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"sortBooksByAuthor","op_source":"use","id":21,"source_code":""}}
{"type":"node","id":"25","labels":["Function"],"properties":{"decl_loc":"library.h:114:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"destroyLibrary","op_source":"use","id":22,"source_code":""}}
{"type":"node","id":"26","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdlib.h:672:14","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"malloc","op_source":"use","id":24,"source_code":""}}
{"type":"node","id":"27","labels":["Function"],"properties":{"decl_loc":"/usr/include/string.h:144:14","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"strncpy","op_source":"use","id":25,"source_code":""}}
{"type":"node","id":"28","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdlib.h:687:13","def_loc":"undefined","semantic_explanation":"[unexplaned]","is_static":false,"ret_type":"","name":"free","op_source":"use","id":27,"source_code":""}}
{"type":"node","id":"29","labels":["Function"],"properties":{"decl_loc":"/usr/include/string.h:156:12","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"strcmp","op_source":"use","id":44,"source_code":""}}
{"type":"node","id":"30","labels":["Function"],"properties":{"decl_loc":"/usr/include/string.h:350:14","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"strstr","op_source":"use","id":49,"source_code":""}}
{"type":"node","id":"31","labels":["Function"],"properties":{"decl_loc":"book.h:226:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"isBookAvailable","op_source":"use","id":55,"source_code":""}}
{"type":"node","id":"32","labels":["Function"],"properties":{"decl_loc":"book.h:254:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"setBookAvailability","op_source":"use","id":56,"source_code":""}}
{"type":"node","id":"33","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdlib.h:970:13","def_loc":"undefined","semantic_explanation":"[unexplaned]","is_static":false,"ret_type":"","name":"qsort","op_source":"use","id":67,"source_code":""}}
{"type":"node","id":"34","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:58:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书对象并初始化所有字段\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化所有字段，包括标题、作者、ISBN、价格、年份和可用性\",\n    \"Logic\": \"1. 使用malloc分配Book结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 使用strncpy安全复制字符串字段\\n4. 初始化数值字段\\n5. 设置默认可用性为1\\n6. 返回创建的图书对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"StringCopy\": \"使用strncpy确保字符串安全复制\",\n        \"NullTermination\": \"确保字符串正确终止\",\n        \"Initialization\": \"确保所有字段都被正确初始化\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配和字符串处理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"对象创建层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\"],\n        \"AbstractionLevel\": \"高抽象，作为图书对象的基础创建接口\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供标准化的对象创建服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"createBook","op_source":"define","id":23,"source_code":"Book* createBook(const char* title, const char* author, const char* isbn, float price, int year, int available) {\n    Book* book = (Book*)malloc(sizeof(Book));\n    if (book == NULL) return NULL;\n    \n    strncpy(book->title, title, MAX_TITLE_LEN - 1);\n    book->title[MAX_TITLE_LEN - 1] = '\\0';\n    \n    strncpy(book->author, author, MAX_AUTHOR_LEN - 1);\n    book->author[MAX_AUTHOR_LEN - 1] = '\\0';\n    \n    strncpy(book->isbn, isbn, MAX_ISBN_LEN - 1);\n    book->isbn[MAX_ISBN_LEN - 1] = '\\0';\n    \n    book->price = price;\n    book->year = year;\n    book->available = available;\n    \n    return book;\n}\n"}}
{"type":"node","id":"35","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:215:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"更新图书出版年份\",\n    \"When\": \"需要修改图书出版年份时，如信息更正、版本更新\",\n    \"Why\": \"提供图书出版年份修改接口，支持信息管理功能\",\n    \"How\": \"检查输入参数并更新年份字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 检查新年份是否有效\\n3. 更新年份字段\\n4. 返回更新是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"InvalidYear\": \"检查年份是否在合理范围内\",\n        \"UpdateStatus\": \"返回布尔值表示更新是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书出版年份的标准化更新，支持信息管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据更新层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"信息管理功能\", \"版本管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据更新\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心年份更新接口\",\n            \"InChild\": \"为信息管理和版本管理提供标准化的年份更新服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"updateBookYear","op_source":"define","id":31,"source_code":"int updateBookYear(Book* book, int newYear) {\n    if (book == NULL || newYear <= 0 || newYear > 2024) {\n        return 0;\n    }\n    \n    book->year = newYear;\n    return 1;\n}\n"}}
{"type":"node","id":"36","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:406:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取当前图书数量\",\n    \"When\": \"需要查询图书馆藏书量时，如统计报表、容量管理\",\n    \"Why\": \"提供图书馆容量查询接口，支持系统管理和决策\",\n    \"How\": \"返回bookCount字段的值\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 如果有效，返回bookCount\\n3. 如果无效，返回0\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"DefaultValue\": \"无效指针时返回0\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆容量的查询，支持系统管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"统计功能\", \"管理功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心容量查询接口\",\n            \"InChild\": \"为统计和管理功能提供标准化的容量查询服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"getBookCount","op_source":"define","id":61,"source_code":"int getBookCount(const Library* library) {\n    return library != NULL ? library->bookCount : 0;\n}\n"}}
{"type":"node","id":"37","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:69:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"显示图书管理系统的主菜单\",\n    \"When\": \"系统启动时和每次操作完成后\",\n    \"Why\": \"提供清晰的用户界面，展示所有可用功能，引导用户进行系统操作\",\n    \"How\": \"使用printf函数格式化输出菜单选项\",\n    \"Logic\": \"1. 输出系统标题\\n2. 按功能分类输出所有菜单选项\\n3. 使用数字编号标识每个选项\\n4. 为每个选项提供简短描述\\n5. 输出退出选项\",\n    \"ErrorHandling\": {\n        \"OutputError\": \"假设标准输出可用\",\n        \"Formatting\": \"使用统一的格式确保显示一致性\"\n    },\n    \"Context\": {\n        \"Module\": \"用户界面模块\",\n        \"DesignIntent\": \"实现直观的用户交互界面，提供清晰的功能导航\",\n        \"Dependencies\": \"依赖标准库的输出函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"用户界面层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"菜单导航\", \"用户交互\"],\n        \"AbstractionLevel\": \"高抽象，专注于用户交互\",\n        \"Role\": {\n            \"InParent\": \"作为系统的主要用户界面入口\",\n            \"InChild\": \"为用户提供标准化的功能导航服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"printMenu","op_source":"define","id":1,"source_code":"void printMenu(void) {\n    printf(\"\\n=== 图书管理系统 ===\\n\");\n    printf(\"1. 添加新书\\n\");\n    printf(\"2. 删除图书\\n\");\n    printf(\"3. 查找图书\\n\");\n    printf(\"4. 显示所有图书\\n\");\n    printf(\"5. 借阅图书\\n\");\n    printf(\"6. 归还图书\\n\");\n    printf(\"7. 按标题排序\\n\");\n    printf(\"8. 按作者排序\\n\");\n    printf(\"0. 退出系统\\n\");\n    printf(\"请选择操作 (0-8): \");\n}\n"}}
{"type":"node","id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}}
{"type":"node","id":"39","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:250:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"检查图书是否可借\",\n    \"When\": \"需要查询图书状态时，如借阅前检查、库存查询\",\n    \"Why\": \"提供图书状态查询接口，支持借阅管理功能\",\n    \"How\": \"检查输入指针并返回可用性状态\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回available字段的值\\n3. 如果无效，返回0\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"DefaultValue\": \"无效指针时返回0\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书状态的标准化查询，支持借阅管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"状态查询层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"库存查询功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问状态\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心状态查询接口\",\n            \"InChild\": \"为借阅管理和库存查询提供标准化的状态查询服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"isBookAvailable","op_source":"define","id":32,"source_code":"int isBookAvailable(const Book* book) {\n    return book != NULL ? book->available : 0;\n}\n"}}
{"type":"node","id":"40","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:217:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过ISBN查找图书\",\n    \"When\": \"需要查找特定图书时，如借阅、归还、查询\",\n    \"Why\": \"提供快速查找接口，ISBN是唯一标识符，确保查找的准确性和效率\",\n    \"How\": \"遍历图书数组查找匹配的ISBN\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strcmp比较ISBN\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringComparison\": \"使用安全的字符串比较\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的快速查找，支持各种业务操作\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅功能\", \"归还功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心查找接口\",\n            \"InChild\": \"为借阅、归还和查询功能提供标准化的查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByISBN","op_source":"define","id":46,"source_code":"Book* findBookByISBN(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}}
{"type":"node","id":"41","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:436:12","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按标题比较两本图书\",\n    \"When\": \"在排序函数中使用\",\n    \"Why\": \"提供qsort函数所需的比较函数，支持图书标题的标准化排序\",\n    \"How\": \"使用strcmp比较图书标题\",\n    \"Logic\": \"1. 将void指针转换为Book指针\\n2. 使用strcmp比较两本图书的标题\\n3. 返回比较结果\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"假设输入指针有效（由qsort保证）\",\n        \"StringComparison\": \"使用标准库的字符串比较函数\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书标题的标准化比较，支持排序功能\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"排序功能\"],\n        \"AbstractionLevel\": \"低抽象，专注于比较操作\",\n        \"Role\": {\n            \"InParent\": \"作为排序功能的辅助函数\",\n            \"InChild\": \"为排序算法提供标准化的比较服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"compareByTitle","op_source":"define","id":62,"source_code":"static int compareByTitle(const void* a, const void* b) {\n    return strcmp((*(Book**)a)->title, (*(Book**)b)->title);\n}\n"}}
{"type":"node","id":"42","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:105:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"销毁图书对象并释放内存\",\n    \"When\": \"图书对象不再需要时，如删除图书、系统关闭\",\n    \"Why\": \"防止内存泄漏，确保系统资源被正确释放，维护系统稳定性\",\n    \"How\": \"使用free函数释放图书对象占用的内存\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，释放内存\\n3. 不返回任何值，因为释放后指针已失效\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"安全处理NULL指针输入\",\n        \"MemoryLeak\": \"确保内存被正确释放\",\n        \"DanglingPointer\": \"调用者负责将指针设为NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的资源清理，确保内存管理安全\",\n        \"Dependencies\": \"依赖标准库的内存释放函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"资源清理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"系统关闭处理\"],\n        \"AbstractionLevel\": \"高抽象，负责对象资源管理\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心资源清理接口\",\n            \"InChild\": \"为图书删除和系统关闭提供标准化的资源释放服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"destroyBook","op_source":"define","id":26,"source_code":"void destroyBook(Book* book) {\n    if (book != NULL) {\n        free(book);\n    }\n}\n"}}
{"type":"node","id":"43","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:138:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"打印图书的详细信息\",\n    \"When\": \"需要显示图书信息时，如查询结果、列表显示\",\n    \"Why\": \"提供标准化的图书信息展示功能，确保信息显示的一致性和完整性\",\n    \"How\": \"使用printf函数格式化输出所有字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，按格式输出所有字段\\n3. 使用条件运算符显示可用性状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"OutputError\": \"假设标准输出可用\",\n        \"Formatting\": \"使用统一的格式确保显示一致性\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书信息的标准化展示，提供完整的图书视图\",\n        \"Dependencies\": \"依赖标准库的输出函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"信息展示层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"查询功能\", \"列表显示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于信息展示\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心信息展示接口\",\n            \"InChild\": \"为查询和列表显示提供标准化的信息展示服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"printBook","op_source":"define","id":28,"source_code":"void printBook(const Book* book) {\n    if (book == NULL) {\n        printf(\"无效的图书对象！\\n\");\n        return;\n    }\n    \n    printf(\"书名：%s\\n\", book->title);\n    printf(\"作者：%s\\n\", book->author);\n    printf(\"ISBN：%s\\n\", book->isbn);\n    printf(\"价格：%.2f\\n\", book->price);\n    printf(\"出版年份：%d\\n\", book->year);\n    printf(\"状态：%s\\n\", book->available ? \"可借\" : \"已借出\");\n}\n"}}
{"type":"node","id":"44","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:315:13","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取图书标题\",\n    \"When\": \"需要访问图书标题时，如显示、搜索、排序\",\n    \"Why\": \"提供图书标题的只读访问接口，确保数据封装性\",\n    \"How\": \"检查输入指针并返回标题字符串\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回title字段\\n3. 如果无效，返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"ReturnValue\": \"无效指针时返回NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书标题的安全访问，支持信息展示和搜索\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"显示功能\", \"搜索功能\", \"排序功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心标题访问接口\",\n            \"InChild\": \"为显示、搜索和排序功能提供标准化的标题访问服务\"\n        }\n    }\n} */\n","ret_type":"const char *","name":"getBookTitle","op_source":"define","id":34,"source_code":"const char* getBookTitle(const Book* book) {\n    return book != NULL ? book->title : NULL;\n}\n"}}
{"type":"node","id":"45","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:345:13","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取图书作者\",\n    \"When\": \"需要访问图书作者时，如显示、搜索、排序\",\n    \"Why\": \"提供图书作者的只读访问接口，确保数据封装性\",\n    \"How\": \"检查输入指针并返回作者字符串\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回author字段\\n3. 如果无效，返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"ReturnValue\": \"无效指针时返回NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书作者的安全访问，支持信息展示和搜索\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"显示功能\", \"搜索功能\", \"排序功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心作者访问接口\",\n            \"InChild\": \"为显示、搜索和排序功能提供标准化的作者访问服务\"\n        }\n    }\n} */\n","ret_type":"const char *","name":"getBookAuthor","op_source":"define","id":35,"source_code":"const char* getBookAuthor(const Book* book) {\n    return book != NULL ? book->author : NULL;\n}\n"}}
{"type":"node","id":"46","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:101:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"销毁图书馆对象并释放所有资源\",\n    \"When\": \"图书馆对象不再需要时，如系统关闭、重置图书馆\",\n    \"Why\": \"防止内存泄漏，确保所有资源被正确释放，维护系统稳定性\",\n    \"How\": \"递归释放所有图书对象和图书馆对象的内存\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 遍历所有图书对象\\n3. 调用destroyBook释放每本图书\\n4. 释放图书馆对象本身\\n5. 不返回任何值，因为释放后指针已失效\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"安全处理NULL指针输入\",\n        \"MemoryLeak\": \"确保所有子对象内存被正确释放\",\n        \"DanglingPointer\": \"调用者负责将指针设为NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的资源清理，确保内存管理安全\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"资源清理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"系统关闭处理\"],\n        \"AbstractionLevel\": \"高抽象，负责整体资源管理\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心资源清理接口\",\n            \"InChild\": \"为系统关闭和重置提供标准化的资源释放服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"destroyLibrary","op_source":"define","id":39,"source_code":"void destroyLibrary(Library* library) {\n    if (library == NULL) return;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        destroyBook(library->books[i]);\n    }\n    free(library);\n}\n"}}
{"type":"node","id":"47","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:293:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"列出所有图书\",\n    \"When\": \"需要显示图书馆所有藏书时，如库存盘点、目录浏览\",\n    \"Why\": \"提供完整的图书列表展示功能，支持系统管理和用户浏览\",\n    \"How\": \"遍历并打印所有图书信息，包括总数统计\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 输出总藏书量信息\\n3. 遍历所有图书\\n4. 为每本图书输出序号\\n5. 调用printBook显示详细信息\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"OutputError\": \"假设标准输出可用\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书列表的标准化展示，提供完整的库存视图\",\n        \"Dependencies\": \"依赖book.h中的printBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"信息展示层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"库存管理功能\", \"用户界面功能\"],\n        \"AbstractionLevel\": \"较高抽象，专注于信息展示\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心列表展示接口\",\n            \"InChild\": \"为库存管理和用户界面提供标准化的列表展示服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"listAllBooks","op_source":"define","id":50,"source_code":"void listAllBooks(const Library* library) {\n    if (library == NULL) {\n        printf(\"图书馆不存在\\n\");\n        return;\n    }\n    \n    printf(\"图书馆藏书列表（共%d本）：\\n\", library->bookCount);\n    for (int i = 0; i < library->bookCount; i++) {\n        printf(\"\\n--- 第%d本书 ---\\n\", i + 1);\n        printBook(library->books[i]);\n    }\n}\n"}}
{"type":"node","id":"48","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:466:12","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按作者比较两本图书\",\n    \"When\": \"在排序函数中使用\",\n    \"Why\": \"提供qsort函数所需的比较函数，支持图书作者的标准化排序\",\n    \"How\": \"使用strcmp比较作者名字\",\n    \"Logic\": \"1. 将void指针转换为Book指针\\n2. 使用strcmp比较两本图书的作者\\n3. 返回比较结果\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"假设输入指针有效（由qsort保证）\",\n        \"StringComparison\": \"使用标准库的字符串比较函数\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书作者的标准化比较，支持排序功能\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"排序功能\"],\n        \"AbstractionLevel\": \"低抽象，专注于比较操作\",\n        \"Role\": {\n            \"InParent\": \"作为排序功能的辅助函数\",\n            \"InChild\": \"为排序算法提供标准化的比较服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"compareByAuthor","op_source":"define","id":64,"source_code":"static int compareByAuthor(const void* a, const void* b) {\n    return strcmp((*(Book**)a)->author, (*(Book**)b)->author);\n}\n"}}
{"type":"node","id":"49","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:529:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按作者排序图书\",\n    \"When\": \"需要按作者组织图书时，如作者作品集整理、分类浏览\",\n    \"Why\": \"提供图书排序功能，便于按作者查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByAuthor比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByAuthor作为比较函数\\n4. 排序完成后数组按作者名字字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"作者作品管理功能\", \"分类浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为作者作品管理和分类浏览提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByAuthor","op_source":"define","id":69,"source_code":"void sortBooksByAuthor(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByAuthor);\n} "}}
{"type":"node","id":"50","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:179:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"更新图书价格\",\n    \"When\": \"需要修改图书价格时，如价格调整、折扣更新\",\n    \"Why\": \"提供图书价格修改接口，支持价格管理功能\",\n    \"How\": \"检查输入参数并更新价格字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 检查新价格是否有效\\n3. 更新价格字段\\n4. 返回更新是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"InvalidPrice\": \"检查价格是否为正数\",\n        \"UpdateStatus\": \"返回布尔值表示更新是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书价格的标准化更新，支持价格管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据更新层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"价格管理功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据更新\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心价格更新接口\",\n            \"InChild\": \"为价格管理和库存管理提供标准化的价格更新服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"updateBookPrice","op_source":"define","id":30,"source_code":"int updateBookPrice(Book* book, float newPrice) {\n    if (book == NULL || newPrice <= 0) {\n        return 0;\n    }\n    \n    book->price = newPrice;\n    return 1;\n}\n"}}
{"type":"node","id":"51","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:280:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"设置图书的可用性状态\",\n    \"When\": \"需要修改图书状态时，如借阅、归还、状态更新\",\n    \"Why\": \"提供图书状态修改接口，支持借阅管理功能\",\n    \"How\": \"检查输入参数并更新可用性状态\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 更新available字段\\n3. 返回更新是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"UpdateStatus\": \"返回布尔值表示更新是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书状态的标准化更新，支持借阅管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"状态管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"状态管理功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接修改状态\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心状态更新接口\",\n            \"InChild\": \"为借阅管理和状态管理提供标准化的状态更新服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"setBookAvailability","op_source":"define","id":33,"source_code":"int setBookAvailability(Book* book, int available) {\n    if (book == NULL) {\n        return 0;\n    }\n    \n    book->available = available;\n    return 1;\n}\n"}}
{"type":"node","id":"52","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:375:13","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取图书ISBN\",\n    \"When\": \"需要访问图书ISBN时，如查找、标识、管理\",\n    \"Why\": \"提供图书ISBN的只读访问接口，确保数据封装性\",\n    \"How\": \"检查输入指针并返回ISBN字符串\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回isbn字段\\n3. 如果无效，返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"ReturnValue\": \"无效指针时返回NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书ISBN的安全访问，支持查找和管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"查找功能\", \"标识功能\", \"管理功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心ISBN访问接口\",\n            \"InChild\": \"为查找、标识和管理功能提供标准化的ISBN访问服务\"\n        }\n    }\n} */\n","ret_type":"const char *","name":"getBookISBN","op_source":"define","id":36,"source_code":"const char* getBookISBN(const Book* book) {\n    return book != NULL ? book->isbn : NULL;\n} "}}
{"type":"node","id":"53","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:62:10","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书馆对象并初始化所有字段\",\n    \"When\": \"系统初始化时，需要建立新的图书馆实例\",\n    \"Why\": \"提供统一的图书馆对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化图书数组和计数器\",\n    \"Logic\": \"1. 使用malloc分配Library结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 初始化bookCount为0\\n4. 使用循环将所有图书指针初始化为NULL\\n5. 返回创建的图书馆对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"Initialization\": \"确保所有字段都被正确初始化\",\n        \"NullPointer\": \"返回NULL表示创建失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统初始化层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"高抽象，作为整个系统的核心对象\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供基础设施\"\n        }\n    }\n} */\n","ret_type":"Library *","name":"createLibrary","op_source":"define","id":37,"source_code":"Library* createLibrary(void) {\n    Library* library = (Library*)malloc(sizeof(Library));\n    if (library == NULL) return NULL;\n    \n    library->bookCount = 0;\n    for (int i = 0; i < MAX_BOOKS; i++) {\n        library->books[i] = NULL;\n    }\n    \n    return library;\n}\n"}}
{"type":"node","id":"54","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:137:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"添加新书到图书馆\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书添加接口，确保图书馆容量限制，维护数据一致性\",\n    \"How\": \"检查容量限制，如果未满则添加图书并更新计数器\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 检查图书馆是否已满\\n3. 将图书添加到数组末尾\\n4. 更新图书计数\\n5. 返回添加是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"CapacityLimit\": \"检查是否超过最大图书数量限制\",\n        \"AddStatus\": \"返回布尔值表示添加是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全添加，确保数据完整性\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书入库功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据添加操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据添加接口\",\n            \"InChild\": \"为图书入库和库存管理提供标准化的添加服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"addBook","op_source":"define","id":42,"source_code":"int addBook(Library* library, Book* book) {\n    if (library == NULL || book == NULL || library->bookCount >= MAX_BOOKS) {\n        return 0;\n    }\n    \n    library->books[library->bookCount++] = book;\n    return 1;\n}\n"}}
{"type":"node","id":"55","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:174:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"从图书馆移除图书\",\n    \"When\": \"需要删除图书时，如图书报废、信息错误\",\n    \"Why\": \"提供统一的图书删除接口，确保安全移除，维护数据一致性\",\n    \"How\": \"通过ISBN查找图书，移除后重新排列数组\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历查找匹配的ISBN\\n3. 找到后释放图书对象\\n4. 重新排列数组以保持连续性\\n5. 更新图书计数\\n6. 返回删除是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"处理未找到图书的情况\",\n        \"ArrayReorganization\": \"确保数组连续性\",\n        \"DeleteStatus\": \"返回布尔值表示删除是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全删除，确保数据一致性\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书删除功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据删除操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据删除接口\",\n            \"InChild\": \"为图书删除和库存管理提供标准化的删除服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"removeBook","op_source":"define","id":43,"source_code":"int removeBook(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return 0;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            destroyBook(library->books[i]);\n            for (int j = i; j < library->bookCount - 1; j++) {\n                library->books[j] = library->books[j + 1];\n            }\n            library->bookCount--;\n            return 1;\n        }\n    }\n    return 0;\n}\n"}}
{"type":"node","id":"56","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:255:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过标题查找图书\",\n    \"When\": \"需要按标题搜索图书时，如模糊查询、分类浏览\",\n    \"Why\": \"提供按标题搜索的接口，支持模糊查找，提高用户查询便利性\",\n    \"How\": \"使用strstr函数进行子串匹配\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strstr进行子串匹配\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringMatching\": \"使用安全的字符串匹配\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的模糊查找，支持用户友好的搜索\",\n        \"Dependencies\": \"依赖标准库的字符串匹配函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"搜索功能\", \"浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于模糊查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心模糊查找接口\",\n            \"InChild\": \"为搜索和浏览功能提供标准化的模糊查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByTitle","op_source":"define","id":48,"source_code":"Book* findBookByTitle(Library* library, const char* title) {\n    if (library == NULL || title == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strstr(library->books[i]->title, title) != NULL) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}}
{"type":"node","id":"57","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:333:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"借出图书\",\n    \"When\": \"用户需要借书时，如读者借阅、预约取书\",\n    \"Why\": \"提供图书借阅功能，管理图书可用性，支持图书馆核心业务\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否可用\\n4. 更新图书可用性状态\\n5. 返回借阅是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"NotAvailable\": \"处理图书不可借的情况\",\n        \"BorrowStatus\": \"返回布尔值表示借阅是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全借阅，确保借阅流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心借阅接口\",\n            \"InChild\": \"为借阅和预约管理提供标准化的借阅服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"borrowBook","op_source":"define","id":53,"source_code":"int borrowBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || !isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 0);\n    return 1;\n}\n"}}
{"type":"node","id":"58","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:370:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"归还图书\",\n    \"When\": \"用户归还图书时，如读者还书、预约归还\",\n    \"Why\": \"提供图书归还功能，恢复图书可用性，完成借阅流程\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否已借出\\n4. 更新图书可用性状态\\n5. 返回归还是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"AlreadyAvailable\": \"处理图书未借出的情况\",\n        \"ReturnStatus\": \"返回布尔值表示归还是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全归还，确保归还流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"归还管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心归还接口\",\n            \"InChild\": \"为归还和预约管理提供标准化的归还服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"returnBook","op_source":"define","id":57,"source_code":"int returnBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 1);\n    return 1;\n}\n"}}
{"type":"node","id":"59","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:497:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按标题排序图书\",\n    \"When\": \"需要按标题组织图书时，如目录整理、展示优化\",\n    \"Why\": \"提供图书排序功能，便于查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByTitle比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByTitle作为比较函数\\n4. 排序完成后数组按标题字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"目录管理功能\", \"展示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为目录管理和展示功能提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByTitle","op_source":"define","id":66,"source_code":"void sortBooksByTitle(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByTitle);\n}\n"}}
{"type":"node","id":"60","labels":["Global"],"properties":{"decl_loc":"/usr/include/stdio.h:149:14","def_loc":"undefined","semantic_explanation":"[unexplaned]","is_static":false,"is_extern":false,"name":"stdin","op_source":"use","id":1,"source_code":"extern FILE *stdin;\t\t/* Standard input stream.  */\n"}}
{"type":"node","id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}
{"type":"node","id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}
{"type":"node","id":"63","labels":["Macro"],"properties":{"def_loc":"/usr/include/stdio.h:153:9","semantic_explanation":"/* C89/C99 say they're macros.  Make them happy.  */\n","name":"stdin","id":5,"source_code":"#define stdin stdin\n"}}
{"type":"node","id":"64","labels":["Macro"],"properties":{"def_loc":"book.h:43:9","semantic_explanation":"/* {\n    \"What\": \"定义图书标题的最大长度\",\n    \"When\": \"在创建新图书对象时使用\",\n    \"Why\": \"限制图书标题的长度以确保内存使用合理\",\n    \"How\": \"通过宏定义设置为100个字符\"\n} */\n","name":"MAX_TITLE_LEN","id":3,"source_code":"#define MAX_TITLE_LEN 100\n"}}
{"type":"node","id":"65","labels":["Macro"],"properties":{"def_loc":"book.h:51:9","semantic_explanation":"/* {\n    \"What\": \"定义作者名字的最大长度\",\n    \"When\": \"在创建新图书对象时使用\",\n    \"Why\": \"限制作者名字的长度以确保内存使用合理\",\n    \"How\": \"通过宏定义设置为50个字符\"\n} */\n","name":"MAX_AUTHOR_LEN","id":4,"source_code":"#define MAX_AUTHOR_LEN 50\n"}}
{"type":"node","id":"66","labels":["Macro"],"properties":{"def_loc":"book.h:59:9","semantic_explanation":"/* {\n    \"What\": \"定义ISBN号码的最大长度\",\n    \"When\": \"在创建新图书对象时使用\",\n    \"Why\": \"限制ISBN的长度以符合标准ISBN-13格式\",\n    \"How\": \"通过宏定义设置为13个字符\"\n} */\n","name":"MAX_ISBN_LEN","id":2,"source_code":"#define MAX_ISBN_LEN 13\n"}}
{"type":"node","id":"67","labels":["Macro"],"properties":{"def_loc":"library.h:45:9","semantic_explanation":"/* {\n    \"What\": \"定义图书馆可以存储的最大图书数量\",\n    \"When\": \"在创建图书馆对象和添加新书时使用\",\n    \"Why\": \"限制图书馆容量以确保系统性能和内存使用合理\",\n    \"How\": \"通过宏定义设置为1000本\"\n} */\n","name":"MAX_BOOKS","id":20,"source_code":"#define MAX_BOOKS 1000\n"}}
{"type":"node","id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}
{"type":"relationship","id":"0","label":"DEFINES_FUNCTION","start":{"id":"3","labels":["File"],"properties":{"path":"main.c","file_hash":"","semantic_explanation":"[unexplaned]","id":1,"source_code":""}},"end":{"id":"37","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:69:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"显示图书管理系统的主菜单\",\n    \"When\": \"系统启动时和每次操作完成后\",\n    \"Why\": \"提供清晰的用户界面，展示所有可用功能，引导用户进行系统操作\",\n    \"How\": \"使用printf函数格式化输出菜单选项\",\n    \"Logic\": \"1. 输出系统标题\\n2. 按功能分类输出所有菜单选项\\n3. 使用数字编号标识每个选项\\n4. 为每个选项提供简短描述\\n5. 输出退出选项\",\n    \"ErrorHandling\": {\n        \"OutputError\": \"假设标准输出可用\",\n        \"Formatting\": \"使用统一的格式确保显示一致性\"\n    },\n    \"Context\": {\n        \"Module\": \"用户界面模块\",\n        \"DesignIntent\": \"实现直观的用户交互界面，提供清晰的功能导航\",\n        \"Dependencies\": \"依赖标准库的输出函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"用户界面层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"菜单导航\", \"用户交互\"],\n        \"AbstractionLevel\": \"高抽象，专注于用户交互\",\n        \"Role\": {\n            \"InParent\": \"作为系统的主要用户界面入口\",\n            \"InChild\": \"为用户提供标准化的功能导航服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"printMenu","op_source":"define","id":1,"source_code":"void printMenu(void) {\n    printf(\"\\n=== 图书管理系统 ===\\n\");\n    printf(\"1. 添加新书\\n\");\n    printf(\"2. 删除图书\\n\");\n    printf(\"3. 查找图书\\n\");\n    printf(\"4. 显示所有图书\\n\");\n    printf(\"5. 借阅图书\\n\");\n    printf(\"6. 归还图书\\n\");\n    printf(\"7. 按标题排序\\n\");\n    printf(\"8. 按作者排序\\n\");\n    printf(\"0. 退出系统\\n\");\n    printf(\"请选择操作 (0-8): \");\n}\n"}}}
{"type":"relationship","id":"1","label":"DEFINES_FUNCTION","start":{"id":"3","labels":["File"],"properties":{"path":"main.c","file_hash":"","semantic_explanation":"[unexplaned]","id":1,"source_code":""}},"end":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}}}
{"type":"relationship","id":"2","label":"DEFINES_FUNCTION","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"34","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:58:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书对象并初始化所有字段\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化所有字段，包括标题、作者、ISBN、价格、年份和可用性\",\n    \"Logic\": \"1. 使用malloc分配Book结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 使用strncpy安全复制字符串字段\\n4. 初始化数值字段\\n5. 设置默认可用性为1\\n6. 返回创建的图书对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"StringCopy\": \"使用strncpy确保字符串安全复制\",\n        \"NullTermination\": \"确保字符串正确终止\",\n        \"Initialization\": \"确保所有字段都被正确初始化\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配和字符串处理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"对象创建层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\"],\n        \"AbstractionLevel\": \"高抽象，作为图书对象的基础创建接口\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供标准化的对象创建服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"createBook","op_source":"define","id":23,"source_code":"Book* createBook(const char* title, const char* author, const char* isbn, float price, int year, int available) {\n    Book* book = (Book*)malloc(sizeof(Book));\n    if (book == NULL) return NULL;\n    \n    strncpy(book->title, title, MAX_TITLE_LEN - 1);\n    book->title[MAX_TITLE_LEN - 1] = '\\0';\n    \n    strncpy(book->author, author, MAX_AUTHOR_LEN - 1);\n    book->author[MAX_AUTHOR_LEN - 1] = '\\0';\n    \n    strncpy(book->isbn, isbn, MAX_ISBN_LEN - 1);\n    book->isbn[MAX_ISBN_LEN - 1] = '\\0';\n    \n    book->price = price;\n    book->year = year;\n    book->available = available;\n    \n    return book;\n}\n"}}}
{"type":"relationship","id":"3","label":"DEFINES_FUNCTION","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"42","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:105:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"销毁图书对象并释放内存\",\n    \"When\": \"图书对象不再需要时，如删除图书、系统关闭\",\n    \"Why\": \"防止内存泄漏，确保系统资源被正确释放，维护系统稳定性\",\n    \"How\": \"使用free函数释放图书对象占用的内存\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，释放内存\\n3. 不返回任何值，因为释放后指针已失效\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"安全处理NULL指针输入\",\n        \"MemoryLeak\": \"确保内存被正确释放\",\n        \"DanglingPointer\": \"调用者负责将指针设为NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的资源清理，确保内存管理安全\",\n        \"Dependencies\": \"依赖标准库的内存释放函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"资源清理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"系统关闭处理\"],\n        \"AbstractionLevel\": \"高抽象，负责对象资源管理\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心资源清理接口\",\n            \"InChild\": \"为图书删除和系统关闭提供标准化的资源释放服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"destroyBook","op_source":"define","id":26,"source_code":"void destroyBook(Book* book) {\n    if (book != NULL) {\n        free(book);\n    }\n}\n"}}}
{"type":"relationship","id":"4","label":"DEFINES_FUNCTION","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"43","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:138:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"打印图书的详细信息\",\n    \"When\": \"需要显示图书信息时，如查询结果、列表显示\",\n    \"Why\": \"提供标准化的图书信息展示功能，确保信息显示的一致性和完整性\",\n    \"How\": \"使用printf函数格式化输出所有字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，按格式输出所有字段\\n3. 使用条件运算符显示可用性状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"OutputError\": \"假设标准输出可用\",\n        \"Formatting\": \"使用统一的格式确保显示一致性\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书信息的标准化展示，提供完整的图书视图\",\n        \"Dependencies\": \"依赖标准库的输出函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"信息展示层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"查询功能\", \"列表显示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于信息展示\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心信息展示接口\",\n            \"InChild\": \"为查询和列表显示提供标准化的信息展示服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"printBook","op_source":"define","id":28,"source_code":"void printBook(const Book* book) {\n    if (book == NULL) {\n        printf(\"无效的图书对象！\\n\");\n        return;\n    }\n    \n    printf(\"书名：%s\\n\", book->title);\n    printf(\"作者：%s\\n\", book->author);\n    printf(\"ISBN：%s\\n\", book->isbn);\n    printf(\"价格：%.2f\\n\", book->price);\n    printf(\"出版年份：%d\\n\", book->year);\n    printf(\"状态：%s\\n\", book->available ? \"可借\" : \"已借出\");\n}\n"}}}
{"type":"relationship","id":"5","label":"DEFINES_FUNCTION","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"50","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:179:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"更新图书价格\",\n    \"When\": \"需要修改图书价格时，如价格调整、折扣更新\",\n    \"Why\": \"提供图书价格修改接口，支持价格管理功能\",\n    \"How\": \"检查输入参数并更新价格字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 检查新价格是否有效\\n3. 更新价格字段\\n4. 返回更新是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"InvalidPrice\": \"检查价格是否为正数\",\n        \"UpdateStatus\": \"返回布尔值表示更新是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书价格的标准化更新，支持价格管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据更新层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"价格管理功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据更新\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心价格更新接口\",\n            \"InChild\": \"为价格管理和库存管理提供标准化的价格更新服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"updateBookPrice","op_source":"define","id":30,"source_code":"int updateBookPrice(Book* book, float newPrice) {\n    if (book == NULL || newPrice <= 0) {\n        return 0;\n    }\n    \n    book->price = newPrice;\n    return 1;\n}\n"}}}
{"type":"relationship","id":"6","label":"DEFINES_FUNCTION","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"35","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:215:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"更新图书出版年份\",\n    \"When\": \"需要修改图书出版年份时，如信息更正、版本更新\",\n    \"Why\": \"提供图书出版年份修改接口，支持信息管理功能\",\n    \"How\": \"检查输入参数并更新年份字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 检查新年份是否有效\\n3. 更新年份字段\\n4. 返回更新是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"InvalidYear\": \"检查年份是否在合理范围内\",\n        \"UpdateStatus\": \"返回布尔值表示更新是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书出版年份的标准化更新，支持信息管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据更新层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"信息管理功能\", \"版本管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据更新\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心年份更新接口\",\n            \"InChild\": \"为信息管理和版本管理提供标准化的年份更新服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"updateBookYear","op_source":"define","id":31,"source_code":"int updateBookYear(Book* book, int newYear) {\n    if (book == NULL || newYear <= 0 || newYear > 2024) {\n        return 0;\n    }\n    \n    book->year = newYear;\n    return 1;\n}\n"}}}
{"type":"relationship","id":"7","label":"DEFINES_FUNCTION","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"39","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:250:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"检查图书是否可借\",\n    \"When\": \"需要查询图书状态时，如借阅前检查、库存查询\",\n    \"Why\": \"提供图书状态查询接口，支持借阅管理功能\",\n    \"How\": \"检查输入指针并返回可用性状态\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回available字段的值\\n3. 如果无效，返回0\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"DefaultValue\": \"无效指针时返回0\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书状态的标准化查询，支持借阅管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"状态查询层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"库存查询功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问状态\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心状态查询接口\",\n            \"InChild\": \"为借阅管理和库存查询提供标准化的状态查询服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"isBookAvailable","op_source":"define","id":32,"source_code":"int isBookAvailable(const Book* book) {\n    return book != NULL ? book->available : 0;\n}\n"}}}
{"type":"relationship","id":"8","label":"DEFINES_FUNCTION","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"51","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:280:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"设置图书的可用性状态\",\n    \"When\": \"需要修改图书状态时，如借阅、归还、状态更新\",\n    \"Why\": \"提供图书状态修改接口，支持借阅管理功能\",\n    \"How\": \"检查输入参数并更新可用性状态\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 更新available字段\\n3. 返回更新是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"UpdateStatus\": \"返回布尔值表示更新是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书状态的标准化更新，支持借阅管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"状态管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"状态管理功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接修改状态\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心状态更新接口\",\n            \"InChild\": \"为借阅管理和状态管理提供标准化的状态更新服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"setBookAvailability","op_source":"define","id":33,"source_code":"int setBookAvailability(Book* book, int available) {\n    if (book == NULL) {\n        return 0;\n    }\n    \n    book->available = available;\n    return 1;\n}\n"}}}
{"type":"relationship","id":"9","label":"DEFINES_FUNCTION","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"44","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:315:13","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取图书标题\",\n    \"When\": \"需要访问图书标题时，如显示、搜索、排序\",\n    \"Why\": \"提供图书标题的只读访问接口，确保数据封装性\",\n    \"How\": \"检查输入指针并返回标题字符串\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回title字段\\n3. 如果无效，返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"ReturnValue\": \"无效指针时返回NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书标题的安全访问，支持信息展示和搜索\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"显示功能\", \"搜索功能\", \"排序功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心标题访问接口\",\n            \"InChild\": \"为显示、搜索和排序功能提供标准化的标题访问服务\"\n        }\n    }\n} */\n","ret_type":"const char *","name":"getBookTitle","op_source":"define","id":34,"source_code":"const char* getBookTitle(const Book* book) {\n    return book != NULL ? book->title : NULL;\n}\n"}}}
{"type":"relationship","id":"10","label":"DEFINES_FUNCTION","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"45","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:345:13","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取图书作者\",\n    \"When\": \"需要访问图书作者时，如显示、搜索、排序\",\n    \"Why\": \"提供图书作者的只读访问接口，确保数据封装性\",\n    \"How\": \"检查输入指针并返回作者字符串\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回author字段\\n3. 如果无效，返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"ReturnValue\": \"无效指针时返回NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书作者的安全访问，支持信息展示和搜索\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"显示功能\", \"搜索功能\", \"排序功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心作者访问接口\",\n            \"InChild\": \"为显示、搜索和排序功能提供标准化的作者访问服务\"\n        }\n    }\n} */\n","ret_type":"const char *","name":"getBookAuthor","op_source":"define","id":35,"source_code":"const char* getBookAuthor(const Book* book) {\n    return book != NULL ? book->author : NULL;\n}\n"}}}
{"type":"relationship","id":"11","label":"DEFINES_FUNCTION","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"52","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:375:13","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取图书ISBN\",\n    \"When\": \"需要访问图书ISBN时，如查找、标识、管理\",\n    \"Why\": \"提供图书ISBN的只读访问接口，确保数据封装性\",\n    \"How\": \"检查输入指针并返回ISBN字符串\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回isbn字段\\n3. 如果无效，返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"ReturnValue\": \"无效指针时返回NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书ISBN的安全访问，支持查找和管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"查找功能\", \"标识功能\", \"管理功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心ISBN访问接口\",\n            \"InChild\": \"为查找、标识和管理功能提供标准化的ISBN访问服务\"\n        }\n    }\n} */\n","ret_type":"const char *","name":"getBookISBN","op_source":"define","id":36,"source_code":"const char* getBookISBN(const Book* book) {\n    return book != NULL ? book->isbn : NULL;\n} "}}}
{"type":"relationship","id":"12","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"53","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:62:10","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书馆对象并初始化所有字段\",\n    \"When\": \"系统初始化时，需要建立新的图书馆实例\",\n    \"Why\": \"提供统一的图书馆对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化图书数组和计数器\",\n    \"Logic\": \"1. 使用malloc分配Library结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 初始化bookCount为0\\n4. 使用循环将所有图书指针初始化为NULL\\n5. 返回创建的图书馆对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"Initialization\": \"确保所有字段都被正确初始化\",\n        \"NullPointer\": \"返回NULL表示创建失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统初始化层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"高抽象，作为整个系统的核心对象\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供基础设施\"\n        }\n    }\n} */\n","ret_type":"Library *","name":"createLibrary","op_source":"define","id":37,"source_code":"Library* createLibrary(void) {\n    Library* library = (Library*)malloc(sizeof(Library));\n    if (library == NULL) return NULL;\n    \n    library->bookCount = 0;\n    for (int i = 0; i < MAX_BOOKS; i++) {\n        library->books[i] = NULL;\n    }\n    \n    return library;\n}\n"}}}
{"type":"relationship","id":"13","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"46","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:101:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"销毁图书馆对象并释放所有资源\",\n    \"When\": \"图书馆对象不再需要时，如系统关闭、重置图书馆\",\n    \"Why\": \"防止内存泄漏，确保所有资源被正确释放，维护系统稳定性\",\n    \"How\": \"递归释放所有图书对象和图书馆对象的内存\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 遍历所有图书对象\\n3. 调用destroyBook释放每本图书\\n4. 释放图书馆对象本身\\n5. 不返回任何值，因为释放后指针已失效\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"安全处理NULL指针输入\",\n        \"MemoryLeak\": \"确保所有子对象内存被正确释放\",\n        \"DanglingPointer\": \"调用者负责将指针设为NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的资源清理，确保内存管理安全\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"资源清理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"系统关闭处理\"],\n        \"AbstractionLevel\": \"高抽象，负责整体资源管理\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心资源清理接口\",\n            \"InChild\": \"为系统关闭和重置提供标准化的资源释放服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"destroyLibrary","op_source":"define","id":39,"source_code":"void destroyLibrary(Library* library) {\n    if (library == NULL) return;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        destroyBook(library->books[i]);\n    }\n    free(library);\n}\n"}}}
{"type":"relationship","id":"14","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"54","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:137:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"添加新书到图书馆\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书添加接口，确保图书馆容量限制，维护数据一致性\",\n    \"How\": \"检查容量限制，如果未满则添加图书并更新计数器\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 检查图书馆是否已满\\n3. 将图书添加到数组末尾\\n4. 更新图书计数\\n5. 返回添加是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"CapacityLimit\": \"检查是否超过最大图书数量限制\",\n        \"AddStatus\": \"返回布尔值表示添加是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全添加，确保数据完整性\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书入库功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据添加操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据添加接口\",\n            \"InChild\": \"为图书入库和库存管理提供标准化的添加服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"addBook","op_source":"define","id":42,"source_code":"int addBook(Library* library, Book* book) {\n    if (library == NULL || book == NULL || library->bookCount >= MAX_BOOKS) {\n        return 0;\n    }\n    \n    library->books[library->bookCount++] = book;\n    return 1;\n}\n"}}}
{"type":"relationship","id":"15","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"55","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:174:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"从图书馆移除图书\",\n    \"When\": \"需要删除图书时，如图书报废、信息错误\",\n    \"Why\": \"提供统一的图书删除接口，确保安全移除，维护数据一致性\",\n    \"How\": \"通过ISBN查找图书，移除后重新排列数组\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历查找匹配的ISBN\\n3. 找到后释放图书对象\\n4. 重新排列数组以保持连续性\\n5. 更新图书计数\\n6. 返回删除是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"处理未找到图书的情况\",\n        \"ArrayReorganization\": \"确保数组连续性\",\n        \"DeleteStatus\": \"返回布尔值表示删除是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全删除，确保数据一致性\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书删除功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据删除操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据删除接口\",\n            \"InChild\": \"为图书删除和库存管理提供标准化的删除服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"removeBook","op_source":"define","id":43,"source_code":"int removeBook(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return 0;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            destroyBook(library->books[i]);\n            for (int j = i; j < library->bookCount - 1; j++) {\n                library->books[j] = library->books[j + 1];\n            }\n            library->bookCount--;\n            return 1;\n        }\n    }\n    return 0;\n}\n"}}}
{"type":"relationship","id":"16","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"40","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:217:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过ISBN查找图书\",\n    \"When\": \"需要查找特定图书时，如借阅、归还、查询\",\n    \"Why\": \"提供快速查找接口，ISBN是唯一标识符，确保查找的准确性和效率\",\n    \"How\": \"遍历图书数组查找匹配的ISBN\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strcmp比较ISBN\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringComparison\": \"使用安全的字符串比较\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的快速查找，支持各种业务操作\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅功能\", \"归还功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心查找接口\",\n            \"InChild\": \"为借阅、归还和查询功能提供标准化的查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByISBN","op_source":"define","id":46,"source_code":"Book* findBookByISBN(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}}}
{"type":"relationship","id":"17","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"56","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:255:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过标题查找图书\",\n    \"When\": \"需要按标题搜索图书时，如模糊查询、分类浏览\",\n    \"Why\": \"提供按标题搜索的接口，支持模糊查找，提高用户查询便利性\",\n    \"How\": \"使用strstr函数进行子串匹配\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strstr进行子串匹配\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringMatching\": \"使用安全的字符串匹配\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的模糊查找，支持用户友好的搜索\",\n        \"Dependencies\": \"依赖标准库的字符串匹配函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"搜索功能\", \"浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于模糊查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心模糊查找接口\",\n            \"InChild\": \"为搜索和浏览功能提供标准化的模糊查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByTitle","op_source":"define","id":48,"source_code":"Book* findBookByTitle(Library* library, const char* title) {\n    if (library == NULL || title == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strstr(library->books[i]->title, title) != NULL) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}}}
{"type":"relationship","id":"18","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"47","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:293:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"列出所有图书\",\n    \"When\": \"需要显示图书馆所有藏书时，如库存盘点、目录浏览\",\n    \"Why\": \"提供完整的图书列表展示功能，支持系统管理和用户浏览\",\n    \"How\": \"遍历并打印所有图书信息，包括总数统计\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 输出总藏书量信息\\n3. 遍历所有图书\\n4. 为每本图书输出序号\\n5. 调用printBook显示详细信息\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"OutputError\": \"假设标准输出可用\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书列表的标准化展示，提供完整的库存视图\",\n        \"Dependencies\": \"依赖book.h中的printBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"信息展示层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"库存管理功能\", \"用户界面功能\"],\n        \"AbstractionLevel\": \"较高抽象，专注于信息展示\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心列表展示接口\",\n            \"InChild\": \"为库存管理和用户界面提供标准化的列表展示服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"listAllBooks","op_source":"define","id":50,"source_code":"void listAllBooks(const Library* library) {\n    if (library == NULL) {\n        printf(\"图书馆不存在\\n\");\n        return;\n    }\n    \n    printf(\"图书馆藏书列表（共%d本）：\\n\", library->bookCount);\n    for (int i = 0; i < library->bookCount; i++) {\n        printf(\"\\n--- 第%d本书 ---\\n\", i + 1);\n        printBook(library->books[i]);\n    }\n}\n"}}}
{"type":"relationship","id":"19","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"57","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:333:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"借出图书\",\n    \"When\": \"用户需要借书时，如读者借阅、预约取书\",\n    \"Why\": \"提供图书借阅功能，管理图书可用性，支持图书馆核心业务\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否可用\\n4. 更新图书可用性状态\\n5. 返回借阅是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"NotAvailable\": \"处理图书不可借的情况\",\n        \"BorrowStatus\": \"返回布尔值表示借阅是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全借阅，确保借阅流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心借阅接口\",\n            \"InChild\": \"为借阅和预约管理提供标准化的借阅服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"borrowBook","op_source":"define","id":53,"source_code":"int borrowBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || !isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 0);\n    return 1;\n}\n"}}}
{"type":"relationship","id":"20","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"58","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:370:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"归还图书\",\n    \"When\": \"用户归还图书时，如读者还书、预约归还\",\n    \"Why\": \"提供图书归还功能，恢复图书可用性，完成借阅流程\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否已借出\\n4. 更新图书可用性状态\\n5. 返回归还是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"AlreadyAvailable\": \"处理图书未借出的情况\",\n        \"ReturnStatus\": \"返回布尔值表示归还是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全归还，确保归还流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"归还管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心归还接口\",\n            \"InChild\": \"为归还和预约管理提供标准化的归还服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"returnBook","op_source":"define","id":57,"source_code":"int returnBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 1);\n    return 1;\n}\n"}}}
{"type":"relationship","id":"21","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"36","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:406:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取当前图书数量\",\n    \"When\": \"需要查询图书馆藏书量时，如统计报表、容量管理\",\n    \"Why\": \"提供图书馆容量查询接口，支持系统管理和决策\",\n    \"How\": \"返回bookCount字段的值\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 如果有效，返回bookCount\\n3. 如果无效，返回0\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"DefaultValue\": \"无效指针时返回0\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆容量的查询，支持系统管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"统计功能\", \"管理功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心容量查询接口\",\n            \"InChild\": \"为统计和管理功能提供标准化的容量查询服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"getBookCount","op_source":"define","id":61,"source_code":"int getBookCount(const Library* library) {\n    return library != NULL ? library->bookCount : 0;\n}\n"}}}
{"type":"relationship","id":"22","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"41","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:436:12","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按标题比较两本图书\",\n    \"When\": \"在排序函数中使用\",\n    \"Why\": \"提供qsort函数所需的比较函数，支持图书标题的标准化排序\",\n    \"How\": \"使用strcmp比较图书标题\",\n    \"Logic\": \"1. 将void指针转换为Book指针\\n2. 使用strcmp比较两本图书的标题\\n3. 返回比较结果\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"假设输入指针有效（由qsort保证）\",\n        \"StringComparison\": \"使用标准库的字符串比较函数\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书标题的标准化比较，支持排序功能\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"排序功能\"],\n        \"AbstractionLevel\": \"低抽象，专注于比较操作\",\n        \"Role\": {\n            \"InParent\": \"作为排序功能的辅助函数\",\n            \"InChild\": \"为排序算法提供标准化的比较服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"compareByTitle","op_source":"define","id":62,"source_code":"static int compareByTitle(const void* a, const void* b) {\n    return strcmp((*(Book**)a)->title, (*(Book**)b)->title);\n}\n"}}}
{"type":"relationship","id":"23","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"48","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:466:12","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按作者比较两本图书\",\n    \"When\": \"在排序函数中使用\",\n    \"Why\": \"提供qsort函数所需的比较函数，支持图书作者的标准化排序\",\n    \"How\": \"使用strcmp比较作者名字\",\n    \"Logic\": \"1. 将void指针转换为Book指针\\n2. 使用strcmp比较两本图书的作者\\n3. 返回比较结果\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"假设输入指针有效（由qsort保证）\",\n        \"StringComparison\": \"使用标准库的字符串比较函数\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书作者的标准化比较，支持排序功能\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"排序功能\"],\n        \"AbstractionLevel\": \"低抽象，专注于比较操作\",\n        \"Role\": {\n            \"InParent\": \"作为排序功能的辅助函数\",\n            \"InChild\": \"为排序算法提供标准化的比较服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"compareByAuthor","op_source":"define","id":64,"source_code":"static int compareByAuthor(const void* a, const void* b) {\n    return strcmp((*(Book**)a)->author, (*(Book**)b)->author);\n}\n"}}}
{"type":"relationship","id":"24","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"59","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:497:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按标题排序图书\",\n    \"When\": \"需要按标题组织图书时，如目录整理、展示优化\",\n    \"Why\": \"提供图书排序功能，便于查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByTitle比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByTitle作为比较函数\\n4. 排序完成后数组按标题字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"目录管理功能\", \"展示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为目录管理和展示功能提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByTitle","op_source":"define","id":66,"source_code":"void sortBooksByTitle(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByTitle);\n}\n"}}}
{"type":"relationship","id":"25","label":"DEFINES_FUNCTION","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"49","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:529:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按作者排序图书\",\n    \"When\": \"需要按作者组织图书时，如作者作品集整理、分类浏览\",\n    \"Why\": \"提供图书排序功能，便于按作者查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByAuthor比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByAuthor作为比较函数\\n4. 排序完成后数组按作者名字字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"作者作品管理功能\", \"分类浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为作者作品管理和分类浏览提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByAuthor","op_source":"define","id":69,"source_code":"void sortBooksByAuthor(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByAuthor);\n} "}}}
{"type":"relationship","id":"26","label":"INCLUDES_FILE","start":{"id":"3","labels":["File"],"properties":{"path":"main.c","file_hash":"","semantic_explanation":"[unexplaned]","id":1,"source_code":""}},"end":{"id":"0","labels":["File"],"properties":{"path":"/usr/include/stdio.h","semantic_explanation":"[unexplaned]","id":2,"source_code":""}}}
{"type":"relationship","id":"27","label":"INCLUDES_FILE","start":{"id":"3","labels":["File"],"properties":{"path":"main.c","file_hash":"","semantic_explanation":"[unexplaned]","id":1,"source_code":""}},"end":{"id":"2","labels":["File"],"properties":{"path":"/usr/include/string.h","semantic_explanation":"[unexplaned]","id":3,"source_code":""}}}
{"type":"relationship","id":"28","label":"INCLUDES_FILE","start":{"id":"3","labels":["File"],"properties":{"path":"main.c","file_hash":"","semantic_explanation":"[unexplaned]","id":1,"source_code":""}},"end":{"id":"5","labels":["File"],"properties":{"path":"book.h","semantic_explanation":"[unexplaned]","id":4,"source_code":""}}}
{"type":"relationship","id":"29","label":"INCLUDES_FILE","start":{"id":"3","labels":["File"],"properties":{"path":"main.c","file_hash":"","semantic_explanation":"[unexplaned]","id":1,"source_code":""}},"end":{"id":"7","labels":["File"],"properties":{"path":"library.h","semantic_explanation":"[unexplaned]","id":5,"source_code":""}}}
{"type":"relationship","id":"30","label":"INCLUDES_FILE","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"0","labels":["File"],"properties":{"path":"/usr/include/stdio.h","semantic_explanation":"[unexplaned]","id":2,"source_code":""}}}
{"type":"relationship","id":"31","label":"INCLUDES_FILE","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"1","labels":["File"],"properties":{"path":"/usr/include/stdlib.h","semantic_explanation":"[unexplaned]","id":8,"source_code":""}}}
{"type":"relationship","id":"32","label":"INCLUDES_FILE","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"2","labels":["File"],"properties":{"path":"/usr/include/string.h","semantic_explanation":"[unexplaned]","id":3,"source_code":""}}}
{"type":"relationship","id":"33","label":"INCLUDES_FILE","start":{"id":"4","labels":["File"],"properties":{"path":"book.c","file_hash":"","semantic_explanation":"[unexplaned]","id":6,"source_code":""}},"end":{"id":"5","labels":["File"],"properties":{"path":"book.h","semantic_explanation":"[unexplaned]","id":4,"source_code":""}}}
{"type":"relationship","id":"34","label":"INCLUDES_FILE","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"0","labels":["File"],"properties":{"path":"/usr/include/stdio.h","semantic_explanation":"[unexplaned]","id":2,"source_code":""}}}
{"type":"relationship","id":"35","label":"INCLUDES_FILE","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"1","labels":["File"],"properties":{"path":"/usr/include/stdlib.h","semantic_explanation":"[unexplaned]","id":8,"source_code":""}}}
{"type":"relationship","id":"36","label":"INCLUDES_FILE","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"2","labels":["File"],"properties":{"path":"/usr/include/string.h","semantic_explanation":"[unexplaned]","id":3,"source_code":""}}}
{"type":"relationship","id":"37","label":"INCLUDES_FILE","start":{"id":"6","labels":["File"],"properties":{"path":"library.c","file_hash":"","semantic_explanation":"[unexplaned]","id":11,"source_code":""}},"end":{"id":"7","labels":["File"],"properties":{"path":"library.h","semantic_explanation":"[unexplaned]","id":5,"source_code":""}}}
{"type":"relationship","id":"38","label":"INVOKES","start":{"id":"37","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:69:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"显示图书管理系统的主菜单\",\n    \"When\": \"系统启动时和每次操作完成后\",\n    \"Why\": \"提供清晰的用户界面，展示所有可用功能，引导用户进行系统操作\",\n    \"How\": \"使用printf函数格式化输出菜单选项\",\n    \"Logic\": \"1. 输出系统标题\\n2. 按功能分类输出所有菜单选项\\n3. 使用数字编号标识每个选项\\n4. 为每个选项提供简短描述\\n5. 输出退出选项\",\n    \"ErrorHandling\": {\n        \"OutputError\": \"假设标准输出可用\",\n        \"Formatting\": \"使用统一的格式确保显示一致性\"\n    },\n    \"Context\": {\n        \"Module\": \"用户界面模块\",\n        \"DesignIntent\": \"实现直观的用户交互界面，提供清晰的功能导航\",\n        \"Dependencies\": \"依赖标准库的输出函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"用户界面层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"菜单导航\", \"用户交互\"],\n        \"AbstractionLevel\": \"高抽象，专注于用户交互\",\n        \"Role\": {\n            \"InParent\": \"作为系统的主要用户界面入口\",\n            \"InChild\": \"为用户提供标准化的功能导航服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"printMenu","op_source":"define","id":1,"source_code":"void printMenu(void) {\n    printf(\"\\n=== 图书管理系统 ===\\n\");\n    printf(\"1. 添加新书\\n\");\n    printf(\"2. 删除图书\\n\");\n    printf(\"3. 查找图书\\n\");\n    printf(\"4. 显示所有图书\\n\");\n    printf(\"5. 借阅图书\\n\");\n    printf(\"6. 归还图书\\n\");\n    printf(\"7. 按标题排序\\n\");\n    printf(\"8. 按作者排序\\n\");\n    printf(\"0. 退出系统\\n\");\n    printf(\"请选择操作 (0-8): \");\n}\n"}},"end":{"id":"8","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdio.h:363:12","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"printf","op_source":"use","id":2,"source_code":""}}}
{"type":"relationship","id":"39","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"9","labels":["Function"],"properties":{"decl_loc":"library.h:85:10","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"createLibrary","op_source":"use","id":4,"source_code":""}}}
{"type":"relationship","id":"40","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"8","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdio.h:363:12","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"printf","op_source":"use","id":2,"source_code":""}}}
{"type":"relationship","id":"41","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"10","labels":["Function"],"properties":{"decl_loc":"book.h:82:7","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"createBook","op_source":"use","id":6,"source_code":""}}}
{"type":"relationship","id":"42","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"11","labels":["Function"],"properties":{"decl_loc":"library.h:143:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"addBook","op_source":"use","id":7,"source_code":""}}}
{"type":"relationship","id":"43","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"37","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:69:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"显示图书管理系统的主菜单\",\n    \"When\": \"系统启动时和每次操作完成后\",\n    \"Why\": \"提供清晰的用户界面，展示所有可用功能，引导用户进行系统操作\",\n    \"How\": \"使用printf函数格式化输出菜单选项\",\n    \"Logic\": \"1. 输出系统标题\\n2. 按功能分类输出所有菜单选项\\n3. 使用数字编号标识每个选项\\n4. 为每个选项提供简短描述\\n5. 输出退出选项\",\n    \"ErrorHandling\": {\n        \"OutputError\": \"假设标准输出可用\",\n        \"Formatting\": \"使用统一的格式确保显示一致性\"\n    },\n    \"Context\": {\n        \"Module\": \"用户界面模块\",\n        \"DesignIntent\": \"实现直观的用户交互界面，提供清晰的功能导航\",\n        \"Dependencies\": \"依赖标准库的输出函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"用户界面层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"菜单导航\", \"用户交互\"],\n        \"AbstractionLevel\": \"高抽象，专注于用户交互\",\n        \"Role\": {\n            \"InParent\": \"作为系统的主要用户界面入口\",\n            \"InChild\": \"为用户提供标准化的功能导航服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"printMenu","op_source":"define","id":1,"source_code":"void printMenu(void) {\n    printf(\"\\n=== 图书管理系统 ===\\n\");\n    printf(\"1. 添加新书\\n\");\n    printf(\"2. 删除图书\\n\");\n    printf(\"3. 查找图书\\n\");\n    printf(\"4. 显示所有图书\\n\");\n    printf(\"5. 借阅图书\\n\");\n    printf(\"6. 归还图书\\n\");\n    printf(\"7. 按标题排序\\n\");\n    printf(\"8. 按作者排序\\n\");\n    printf(\"0. 退出系统\\n\");\n    printf(\"请选择操作 (0-8): \");\n}\n"}}}
{"type":"relationship","id":"44","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"12","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdio.h:466:12","def_loc":"undefined","semantic_explanation":"[unexplaned]","is_static":false,"ret_type":"","name":"scanf","op_source":"use","id":9,"source_code":""}}}
{"type":"relationship","id":"45","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"13","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdio.h:582:12","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"getchar","op_source":"use","id":10,"source_code":""}}}
{"type":"relationship","id":"46","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"14","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdio.h:654:14","def_loc":"undefined","semantic_explanation":"[unexplaned]","is_static":false,"ret_type":"","name":"fgets","op_source":"use","id":11,"source_code":""}}}
{"type":"relationship","id":"47","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"15","labels":["Function"],"properties":{"decl_loc":"/usr/include/string.h:293:15","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"strcspn","op_source":"use","id":12,"source_code":""}}}
{"type":"relationship","id":"48","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"16","labels":["Function"],"properties":{"decl_loc":"book.h:111:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"destroyBook","op_source":"use","id":13,"source_code":""}}}
{"type":"relationship","id":"49","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"17","labels":["Function"],"properties":{"decl_loc":"library.h:173:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"removeBook","op_source":"use","id":14,"source_code":""}}}
{"type":"relationship","id":"50","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"18","labels":["Function"],"properties":{"decl_loc":"library.h:202:7","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"findBookByISBN","op_source":"use","id":15,"source_code":""}}}
{"type":"relationship","id":"51","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"19","labels":["Function"],"properties":{"decl_loc":"book.h:140:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"printBook","op_source":"use","id":16,"source_code":""}}}
{"type":"relationship","id":"52","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"20","labels":["Function"],"properties":{"decl_loc":"library.h:260:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"listAllBooks","op_source":"use","id":17,"source_code":""}}}
{"type":"relationship","id":"53","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"21","labels":["Function"],"properties":{"decl_loc":"library.h:289:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"borrowBook","op_source":"use","id":18,"source_code":""}}}
{"type":"relationship","id":"54","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"22","labels":["Function"],"properties":{"decl_loc":"library.h:318:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"returnBook","op_source":"use","id":19,"source_code":""}}}
{"type":"relationship","id":"55","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"23","labels":["Function"],"properties":{"decl_loc":"library.h:375:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"sortBooksByTitle","op_source":"use","id":20,"source_code":""}}}
{"type":"relationship","id":"56","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"24","labels":["Function"],"properties":{"decl_loc":"library.h:404:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"sortBooksByAuthor","op_source":"use","id":21,"source_code":""}}}
{"type":"relationship","id":"57","label":"INVOKES","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"25","labels":["Function"],"properties":{"decl_loc":"library.h:114:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"destroyLibrary","op_source":"use","id":22,"source_code":""}}}
{"type":"relationship","id":"58","label":"INVOKES","start":{"id":"34","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:58:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书对象并初始化所有字段\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化所有字段，包括标题、作者、ISBN、价格、年份和可用性\",\n    \"Logic\": \"1. 使用malloc分配Book结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 使用strncpy安全复制字符串字段\\n4. 初始化数值字段\\n5. 设置默认可用性为1\\n6. 返回创建的图书对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"StringCopy\": \"使用strncpy确保字符串安全复制\",\n        \"NullTermination\": \"确保字符串正确终止\",\n        \"Initialization\": \"确保所有字段都被正确初始化\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配和字符串处理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"对象创建层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\"],\n        \"AbstractionLevel\": \"高抽象，作为图书对象的基础创建接口\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供标准化的对象创建服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"createBook","op_source":"define","id":23,"source_code":"Book* createBook(const char* title, const char* author, const char* isbn, float price, int year, int available) {\n    Book* book = (Book*)malloc(sizeof(Book));\n    if (book == NULL) return NULL;\n    \n    strncpy(book->title, title, MAX_TITLE_LEN - 1);\n    book->title[MAX_TITLE_LEN - 1] = '\\0';\n    \n    strncpy(book->author, author, MAX_AUTHOR_LEN - 1);\n    book->author[MAX_AUTHOR_LEN - 1] = '\\0';\n    \n    strncpy(book->isbn, isbn, MAX_ISBN_LEN - 1);\n    book->isbn[MAX_ISBN_LEN - 1] = '\\0';\n    \n    book->price = price;\n    book->year = year;\n    book->available = available;\n    \n    return book;\n}\n"}},"end":{"id":"26","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdlib.h:672:14","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"malloc","op_source":"use","id":24,"source_code":""}}}
{"type":"relationship","id":"59","label":"INVOKES","start":{"id":"34","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:58:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书对象并初始化所有字段\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化所有字段，包括标题、作者、ISBN、价格、年份和可用性\",\n    \"Logic\": \"1. 使用malloc分配Book结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 使用strncpy安全复制字符串字段\\n4. 初始化数值字段\\n5. 设置默认可用性为1\\n6. 返回创建的图书对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"StringCopy\": \"使用strncpy确保字符串安全复制\",\n        \"NullTermination\": \"确保字符串正确终止\",\n        \"Initialization\": \"确保所有字段都被正确初始化\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配和字符串处理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"对象创建层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\"],\n        \"AbstractionLevel\": \"高抽象，作为图书对象的基础创建接口\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供标准化的对象创建服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"createBook","op_source":"define","id":23,"source_code":"Book* createBook(const char* title, const char* author, const char* isbn, float price, int year, int available) {\n    Book* book = (Book*)malloc(sizeof(Book));\n    if (book == NULL) return NULL;\n    \n    strncpy(book->title, title, MAX_TITLE_LEN - 1);\n    book->title[MAX_TITLE_LEN - 1] = '\\0';\n    \n    strncpy(book->author, author, MAX_AUTHOR_LEN - 1);\n    book->author[MAX_AUTHOR_LEN - 1] = '\\0';\n    \n    strncpy(book->isbn, isbn, MAX_ISBN_LEN - 1);\n    book->isbn[MAX_ISBN_LEN - 1] = '\\0';\n    \n    book->price = price;\n    book->year = year;\n    book->available = available;\n    \n    return book;\n}\n"}},"end":{"id":"27","labels":["Function"],"properties":{"decl_loc":"/usr/include/string.h:144:14","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"strncpy","op_source":"use","id":25,"source_code":""}}}
{"type":"relationship","id":"60","label":"INVOKES","start":{"id":"42","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:105:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"销毁图书对象并释放内存\",\n    \"When\": \"图书对象不再需要时，如删除图书、系统关闭\",\n    \"Why\": \"防止内存泄漏，确保系统资源被正确释放，维护系统稳定性\",\n    \"How\": \"使用free函数释放图书对象占用的内存\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，释放内存\\n3. 不返回任何值，因为释放后指针已失效\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"安全处理NULL指针输入\",\n        \"MemoryLeak\": \"确保内存被正确释放\",\n        \"DanglingPointer\": \"调用者负责将指针设为NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的资源清理，确保内存管理安全\",\n        \"Dependencies\": \"依赖标准库的内存释放函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"资源清理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"系统关闭处理\"],\n        \"AbstractionLevel\": \"高抽象，负责对象资源管理\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心资源清理接口\",\n            \"InChild\": \"为图书删除和系统关闭提供标准化的资源释放服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"destroyBook","op_source":"define","id":26,"source_code":"void destroyBook(Book* book) {\n    if (book != NULL) {\n        free(book);\n    }\n}\n"}},"end":{"id":"28","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdlib.h:687:13","def_loc":"undefined","semantic_explanation":"[unexplaned]","is_static":false,"ret_type":"","name":"free","op_source":"use","id":27,"source_code":""}}}
{"type":"relationship","id":"61","label":"INVOKES","start":{"id":"43","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:138:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"打印图书的详细信息\",\n    \"When\": \"需要显示图书信息时，如查询结果、列表显示\",\n    \"Why\": \"提供标准化的图书信息展示功能，确保信息显示的一致性和完整性\",\n    \"How\": \"使用printf函数格式化输出所有字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，按格式输出所有字段\\n3. 使用条件运算符显示可用性状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"OutputError\": \"假设标准输出可用\",\n        \"Formatting\": \"使用统一的格式确保显示一致性\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书信息的标准化展示，提供完整的图书视图\",\n        \"Dependencies\": \"依赖标准库的输出函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"信息展示层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"查询功能\", \"列表显示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于信息展示\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心信息展示接口\",\n            \"InChild\": \"为查询和列表显示提供标准化的信息展示服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"printBook","op_source":"define","id":28,"source_code":"void printBook(const Book* book) {\n    if (book == NULL) {\n        printf(\"无效的图书对象！\\n\");\n        return;\n    }\n    \n    printf(\"书名：%s\\n\", book->title);\n    printf(\"作者：%s\\n\", book->author);\n    printf(\"ISBN：%s\\n\", book->isbn);\n    printf(\"价格：%.2f\\n\", book->price);\n    printf(\"出版年份：%d\\n\", book->year);\n    printf(\"状态：%s\\n\", book->available ? \"可借\" : \"已借出\");\n}\n"}},"end":{"id":"8","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdio.h:363:12","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"printf","op_source":"use","id":2,"source_code":""}}}
{"type":"relationship","id":"62","label":"INVOKES","start":{"id":"53","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:62:10","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书馆对象并初始化所有字段\",\n    \"When\": \"系统初始化时，需要建立新的图书馆实例\",\n    \"Why\": \"提供统一的图书馆对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化图书数组和计数器\",\n    \"Logic\": \"1. 使用malloc分配Library结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 初始化bookCount为0\\n4. 使用循环将所有图书指针初始化为NULL\\n5. 返回创建的图书馆对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"Initialization\": \"确保所有字段都被正确初始化\",\n        \"NullPointer\": \"返回NULL表示创建失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统初始化层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"高抽象，作为整个系统的核心对象\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供基础设施\"\n        }\n    }\n} */\n","ret_type":"Library *","name":"createLibrary","op_source":"define","id":37,"source_code":"Library* createLibrary(void) {\n    Library* library = (Library*)malloc(sizeof(Library));\n    if (library == NULL) return NULL;\n    \n    library->bookCount = 0;\n    for (int i = 0; i < MAX_BOOKS; i++) {\n        library->books[i] = NULL;\n    }\n    \n    return library;\n}\n"}},"end":{"id":"26","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdlib.h:672:14","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"malloc","op_source":"use","id":24,"source_code":""}}}
{"type":"relationship","id":"63","label":"INVOKES","start":{"id":"46","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:101:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"销毁图书馆对象并释放所有资源\",\n    \"When\": \"图书馆对象不再需要时，如系统关闭、重置图书馆\",\n    \"Why\": \"防止内存泄漏，确保所有资源被正确释放，维护系统稳定性\",\n    \"How\": \"递归释放所有图书对象和图书馆对象的内存\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 遍历所有图书对象\\n3. 调用destroyBook释放每本图书\\n4. 释放图书馆对象本身\\n5. 不返回任何值，因为释放后指针已失效\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"安全处理NULL指针输入\",\n        \"MemoryLeak\": \"确保所有子对象内存被正确释放\",\n        \"DanglingPointer\": \"调用者负责将指针设为NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的资源清理，确保内存管理安全\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"资源清理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"系统关闭处理\"],\n        \"AbstractionLevel\": \"高抽象，负责整体资源管理\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心资源清理接口\",\n            \"InChild\": \"为系统关闭和重置提供标准化的资源释放服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"destroyLibrary","op_source":"define","id":39,"source_code":"void destroyLibrary(Library* library) {\n    if (library == NULL) return;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        destroyBook(library->books[i]);\n    }\n    free(library);\n}\n"}},"end":{"id":"16","labels":["Function"],"properties":{"decl_loc":"book.h:111:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"destroyBook","op_source":"use","id":13,"source_code":""}}}
{"type":"relationship","id":"64","label":"INVOKES","start":{"id":"46","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:101:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"销毁图书馆对象并释放所有资源\",\n    \"When\": \"图书馆对象不再需要时，如系统关闭、重置图书馆\",\n    \"Why\": \"防止内存泄漏，确保所有资源被正确释放，维护系统稳定性\",\n    \"How\": \"递归释放所有图书对象和图书馆对象的内存\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 遍历所有图书对象\\n3. 调用destroyBook释放每本图书\\n4. 释放图书馆对象本身\\n5. 不返回任何值，因为释放后指针已失效\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"安全处理NULL指针输入\",\n        \"MemoryLeak\": \"确保所有子对象内存被正确释放\",\n        \"DanglingPointer\": \"调用者负责将指针设为NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的资源清理，确保内存管理安全\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"资源清理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"系统关闭处理\"],\n        \"AbstractionLevel\": \"高抽象，负责整体资源管理\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心资源清理接口\",\n            \"InChild\": \"为系统关闭和重置提供标准化的资源释放服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"destroyLibrary","op_source":"define","id":39,"source_code":"void destroyLibrary(Library* library) {\n    if (library == NULL) return;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        destroyBook(library->books[i]);\n    }\n    free(library);\n}\n"}},"end":{"id":"28","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdlib.h:687:13","def_loc":"undefined","semantic_explanation":"[unexplaned]","is_static":false,"ret_type":"","name":"free","op_source":"use","id":27,"source_code":""}}}
{"type":"relationship","id":"65","label":"INVOKES","start":{"id":"55","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:174:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"从图书馆移除图书\",\n    \"When\": \"需要删除图书时，如图书报废、信息错误\",\n    \"Why\": \"提供统一的图书删除接口，确保安全移除，维护数据一致性\",\n    \"How\": \"通过ISBN查找图书，移除后重新排列数组\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历查找匹配的ISBN\\n3. 找到后释放图书对象\\n4. 重新排列数组以保持连续性\\n5. 更新图书计数\\n6. 返回删除是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"处理未找到图书的情况\",\n        \"ArrayReorganization\": \"确保数组连续性\",\n        \"DeleteStatus\": \"返回布尔值表示删除是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全删除，确保数据一致性\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书删除功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据删除操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据删除接口\",\n            \"InChild\": \"为图书删除和库存管理提供标准化的删除服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"removeBook","op_source":"define","id":43,"source_code":"int removeBook(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return 0;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            destroyBook(library->books[i]);\n            for (int j = i; j < library->bookCount - 1; j++) {\n                library->books[j] = library->books[j + 1];\n            }\n            library->bookCount--;\n            return 1;\n        }\n    }\n    return 0;\n}\n"}},"end":{"id":"29","labels":["Function"],"properties":{"decl_loc":"/usr/include/string.h:156:12","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"strcmp","op_source":"use","id":44,"source_code":""}}}
{"type":"relationship","id":"66","label":"INVOKES","start":{"id":"55","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:174:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"从图书馆移除图书\",\n    \"When\": \"需要删除图书时，如图书报废、信息错误\",\n    \"Why\": \"提供统一的图书删除接口，确保安全移除，维护数据一致性\",\n    \"How\": \"通过ISBN查找图书，移除后重新排列数组\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历查找匹配的ISBN\\n3. 找到后释放图书对象\\n4. 重新排列数组以保持连续性\\n5. 更新图书计数\\n6. 返回删除是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"处理未找到图书的情况\",\n        \"ArrayReorganization\": \"确保数组连续性\",\n        \"DeleteStatus\": \"返回布尔值表示删除是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全删除，确保数据一致性\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书删除功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据删除操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据删除接口\",\n            \"InChild\": \"为图书删除和库存管理提供标准化的删除服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"removeBook","op_source":"define","id":43,"source_code":"int removeBook(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return 0;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            destroyBook(library->books[i]);\n            for (int j = i; j < library->bookCount - 1; j++) {\n                library->books[j] = library->books[j + 1];\n            }\n            library->bookCount--;\n            return 1;\n        }\n    }\n    return 0;\n}\n"}},"end":{"id":"16","labels":["Function"],"properties":{"decl_loc":"book.h:111:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"destroyBook","op_source":"use","id":13,"source_code":""}}}
{"type":"relationship","id":"67","label":"INVOKES","start":{"id":"40","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:217:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过ISBN查找图书\",\n    \"When\": \"需要查找特定图书时，如借阅、归还、查询\",\n    \"Why\": \"提供快速查找接口，ISBN是唯一标识符，确保查找的准确性和效率\",\n    \"How\": \"遍历图书数组查找匹配的ISBN\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strcmp比较ISBN\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringComparison\": \"使用安全的字符串比较\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的快速查找，支持各种业务操作\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅功能\", \"归还功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心查找接口\",\n            \"InChild\": \"为借阅、归还和查询功能提供标准化的查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByISBN","op_source":"define","id":46,"source_code":"Book* findBookByISBN(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}},"end":{"id":"29","labels":["Function"],"properties":{"decl_loc":"/usr/include/string.h:156:12","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"strcmp","op_source":"use","id":44,"source_code":""}}}
{"type":"relationship","id":"68","label":"INVOKES","start":{"id":"56","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:255:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过标题查找图书\",\n    \"When\": \"需要按标题搜索图书时，如模糊查询、分类浏览\",\n    \"Why\": \"提供按标题搜索的接口，支持模糊查找，提高用户查询便利性\",\n    \"How\": \"使用strstr函数进行子串匹配\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strstr进行子串匹配\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringMatching\": \"使用安全的字符串匹配\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的模糊查找，支持用户友好的搜索\",\n        \"Dependencies\": \"依赖标准库的字符串匹配函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"搜索功能\", \"浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于模糊查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心模糊查找接口\",\n            \"InChild\": \"为搜索和浏览功能提供标准化的模糊查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByTitle","op_source":"define","id":48,"source_code":"Book* findBookByTitle(Library* library, const char* title) {\n    if (library == NULL || title == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strstr(library->books[i]->title, title) != NULL) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}},"end":{"id":"30","labels":["Function"],"properties":{"decl_loc":"/usr/include/string.h:350:14","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"strstr","op_source":"use","id":49,"source_code":""}}}
{"type":"relationship","id":"69","label":"INVOKES","start":{"id":"47","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:293:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"列出所有图书\",\n    \"When\": \"需要显示图书馆所有藏书时，如库存盘点、目录浏览\",\n    \"Why\": \"提供完整的图书列表展示功能，支持系统管理和用户浏览\",\n    \"How\": \"遍历并打印所有图书信息，包括总数统计\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 输出总藏书量信息\\n3. 遍历所有图书\\n4. 为每本图书输出序号\\n5. 调用printBook显示详细信息\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"OutputError\": \"假设标准输出可用\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书列表的标准化展示，提供完整的库存视图\",\n        \"Dependencies\": \"依赖book.h中的printBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"信息展示层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"库存管理功能\", \"用户界面功能\"],\n        \"AbstractionLevel\": \"较高抽象，专注于信息展示\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心列表展示接口\",\n            \"InChild\": \"为库存管理和用户界面提供标准化的列表展示服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"listAllBooks","op_source":"define","id":50,"source_code":"void listAllBooks(const Library* library) {\n    if (library == NULL) {\n        printf(\"图书馆不存在\\n\");\n        return;\n    }\n    \n    printf(\"图书馆藏书列表（共%d本）：\\n\", library->bookCount);\n    for (int i = 0; i < library->bookCount; i++) {\n        printf(\"\\n--- 第%d本书 ---\\n\", i + 1);\n        printBook(library->books[i]);\n    }\n}\n"}},"end":{"id":"8","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdio.h:363:12","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"printf","op_source":"use","id":2,"source_code":""}}}
{"type":"relationship","id":"70","label":"INVOKES","start":{"id":"47","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:293:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"列出所有图书\",\n    \"When\": \"需要显示图书馆所有藏书时，如库存盘点、目录浏览\",\n    \"Why\": \"提供完整的图书列表展示功能，支持系统管理和用户浏览\",\n    \"How\": \"遍历并打印所有图书信息，包括总数统计\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 输出总藏书量信息\\n3. 遍历所有图书\\n4. 为每本图书输出序号\\n5. 调用printBook显示详细信息\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"OutputError\": \"假设标准输出可用\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书列表的标准化展示，提供完整的库存视图\",\n        \"Dependencies\": \"依赖book.h中的printBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"信息展示层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"库存管理功能\", \"用户界面功能\"],\n        \"AbstractionLevel\": \"较高抽象，专注于信息展示\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心列表展示接口\",\n            \"InChild\": \"为库存管理和用户界面提供标准化的列表展示服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"listAllBooks","op_source":"define","id":50,"source_code":"void listAllBooks(const Library* library) {\n    if (library == NULL) {\n        printf(\"图书馆不存在\\n\");\n        return;\n    }\n    \n    printf(\"图书馆藏书列表（共%d本）：\\n\", library->bookCount);\n    for (int i = 0; i < library->bookCount; i++) {\n        printf(\"\\n--- 第%d本书 ---\\n\", i + 1);\n        printBook(library->books[i]);\n    }\n}\n"}},"end":{"id":"19","labels":["Function"],"properties":{"decl_loc":"book.h:140:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"printBook","op_source":"use","id":16,"source_code":""}}}
{"type":"relationship","id":"71","label":"INVOKES","start":{"id":"57","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:333:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"借出图书\",\n    \"When\": \"用户需要借书时，如读者借阅、预约取书\",\n    \"Why\": \"提供图书借阅功能，管理图书可用性，支持图书馆核心业务\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否可用\\n4. 更新图书可用性状态\\n5. 返回借阅是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"NotAvailable\": \"处理图书不可借的情况\",\n        \"BorrowStatus\": \"返回布尔值表示借阅是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全借阅，确保借阅流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心借阅接口\",\n            \"InChild\": \"为借阅和预约管理提供标准化的借阅服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"borrowBook","op_source":"define","id":53,"source_code":"int borrowBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || !isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 0);\n    return 1;\n}\n"}},"end":{"id":"40","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:217:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过ISBN查找图书\",\n    \"When\": \"需要查找特定图书时，如借阅、归还、查询\",\n    \"Why\": \"提供快速查找接口，ISBN是唯一标识符，确保查找的准确性和效率\",\n    \"How\": \"遍历图书数组查找匹配的ISBN\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strcmp比较ISBN\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringComparison\": \"使用安全的字符串比较\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的快速查找，支持各种业务操作\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅功能\", \"归还功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心查找接口\",\n            \"InChild\": \"为借阅、归还和查询功能提供标准化的查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByISBN","op_source":"define","id":46,"source_code":"Book* findBookByISBN(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}}}
{"type":"relationship","id":"72","label":"INVOKES","start":{"id":"57","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:333:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"借出图书\",\n    \"When\": \"用户需要借书时，如读者借阅、预约取书\",\n    \"Why\": \"提供图书借阅功能，管理图书可用性，支持图书馆核心业务\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否可用\\n4. 更新图书可用性状态\\n5. 返回借阅是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"NotAvailable\": \"处理图书不可借的情况\",\n        \"BorrowStatus\": \"返回布尔值表示借阅是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全借阅，确保借阅流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心借阅接口\",\n            \"InChild\": \"为借阅和预约管理提供标准化的借阅服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"borrowBook","op_source":"define","id":53,"source_code":"int borrowBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || !isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 0);\n    return 1;\n}\n"}},"end":{"id":"31","labels":["Function"],"properties":{"decl_loc":"book.h:226:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"isBookAvailable","op_source":"use","id":55,"source_code":""}}}
{"type":"relationship","id":"73","label":"INVOKES","start":{"id":"57","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:333:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"借出图书\",\n    \"When\": \"用户需要借书时，如读者借阅、预约取书\",\n    \"Why\": \"提供图书借阅功能，管理图书可用性，支持图书馆核心业务\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否可用\\n4. 更新图书可用性状态\\n5. 返回借阅是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"NotAvailable\": \"处理图书不可借的情况\",\n        \"BorrowStatus\": \"返回布尔值表示借阅是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全借阅，确保借阅流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心借阅接口\",\n            \"InChild\": \"为借阅和预约管理提供标准化的借阅服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"borrowBook","op_source":"define","id":53,"source_code":"int borrowBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || !isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 0);\n    return 1;\n}\n"}},"end":{"id":"32","labels":["Function"],"properties":{"decl_loc":"book.h:254:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"setBookAvailability","op_source":"use","id":56,"source_code":""}}}
{"type":"relationship","id":"74","label":"INVOKES","start":{"id":"58","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:370:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"归还图书\",\n    \"When\": \"用户归还图书时，如读者还书、预约归还\",\n    \"Why\": \"提供图书归还功能，恢复图书可用性，完成借阅流程\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否已借出\\n4. 更新图书可用性状态\\n5. 返回归还是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"AlreadyAvailable\": \"处理图书未借出的情况\",\n        \"ReturnStatus\": \"返回布尔值表示归还是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全归还，确保归还流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"归还管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心归还接口\",\n            \"InChild\": \"为归还和预约管理提供标准化的归还服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"returnBook","op_source":"define","id":57,"source_code":"int returnBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 1);\n    return 1;\n}\n"}},"end":{"id":"40","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:217:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过ISBN查找图书\",\n    \"When\": \"需要查找特定图书时，如借阅、归还、查询\",\n    \"Why\": \"提供快速查找接口，ISBN是唯一标识符，确保查找的准确性和效率\",\n    \"How\": \"遍历图书数组查找匹配的ISBN\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strcmp比较ISBN\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringComparison\": \"使用安全的字符串比较\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的快速查找，支持各种业务操作\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅功能\", \"归还功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心查找接口\",\n            \"InChild\": \"为借阅、归还和查询功能提供标准化的查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByISBN","op_source":"define","id":46,"source_code":"Book* findBookByISBN(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}}}
{"type":"relationship","id":"75","label":"INVOKES","start":{"id":"58","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:370:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"归还图书\",\n    \"When\": \"用户归还图书时，如读者还书、预约归还\",\n    \"Why\": \"提供图书归还功能，恢复图书可用性，完成借阅流程\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否已借出\\n4. 更新图书可用性状态\\n5. 返回归还是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"AlreadyAvailable\": \"处理图书未借出的情况\",\n        \"ReturnStatus\": \"返回布尔值表示归还是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全归还，确保归还流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"归还管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心归还接口\",\n            \"InChild\": \"为归还和预约管理提供标准化的归还服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"returnBook","op_source":"define","id":57,"source_code":"int returnBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 1);\n    return 1;\n}\n"}},"end":{"id":"31","labels":["Function"],"properties":{"decl_loc":"book.h:226:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"isBookAvailable","op_source":"use","id":55,"source_code":""}}}
{"type":"relationship","id":"76","label":"INVOKES","start":{"id":"58","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:370:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"归还图书\",\n    \"When\": \"用户归还图书时，如读者还书、预约归还\",\n    \"Why\": \"提供图书归还功能，恢复图书可用性，完成借阅流程\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否已借出\\n4. 更新图书可用性状态\\n5. 返回归还是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"AlreadyAvailable\": \"处理图书未借出的情况\",\n        \"ReturnStatus\": \"返回布尔值表示归还是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全归还，确保归还流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"归还管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心归还接口\",\n            \"InChild\": \"为归还和预约管理提供标准化的归还服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"returnBook","op_source":"define","id":57,"source_code":"int returnBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 1);\n    return 1;\n}\n"}},"end":{"id":"32","labels":["Function"],"properties":{"decl_loc":"book.h:254:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"setBookAvailability","op_source":"use","id":56,"source_code":""}}}
{"type":"relationship","id":"77","label":"INVOKES","start":{"id":"41","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:436:12","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按标题比较两本图书\",\n    \"When\": \"在排序函数中使用\",\n    \"Why\": \"提供qsort函数所需的比较函数，支持图书标题的标准化排序\",\n    \"How\": \"使用strcmp比较图书标题\",\n    \"Logic\": \"1. 将void指针转换为Book指针\\n2. 使用strcmp比较两本图书的标题\\n3. 返回比较结果\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"假设输入指针有效（由qsort保证）\",\n        \"StringComparison\": \"使用标准库的字符串比较函数\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书标题的标准化比较，支持排序功能\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"排序功能\"],\n        \"AbstractionLevel\": \"低抽象，专注于比较操作\",\n        \"Role\": {\n            \"InParent\": \"作为排序功能的辅助函数\",\n            \"InChild\": \"为排序算法提供标准化的比较服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"compareByTitle","op_source":"define","id":62,"source_code":"static int compareByTitle(const void* a, const void* b) {\n    return strcmp((*(Book**)a)->title, (*(Book**)b)->title);\n}\n"}},"end":{"id":"29","labels":["Function"],"properties":{"decl_loc":"/usr/include/string.h:156:12","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"strcmp","op_source":"use","id":44,"source_code":""}}}
{"type":"relationship","id":"78","label":"INVOKES","start":{"id":"48","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:466:12","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按作者比较两本图书\",\n    \"When\": \"在排序函数中使用\",\n    \"Why\": \"提供qsort函数所需的比较函数，支持图书作者的标准化排序\",\n    \"How\": \"使用strcmp比较作者名字\",\n    \"Logic\": \"1. 将void指针转换为Book指针\\n2. 使用strcmp比较两本图书的作者\\n3. 返回比较结果\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"假设输入指针有效（由qsort保证）\",\n        \"StringComparison\": \"使用标准库的字符串比较函数\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书作者的标准化比较，支持排序功能\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"排序功能\"],\n        \"AbstractionLevel\": \"低抽象，专注于比较操作\",\n        \"Role\": {\n            \"InParent\": \"作为排序功能的辅助函数\",\n            \"InChild\": \"为排序算法提供标准化的比较服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"compareByAuthor","op_source":"define","id":64,"source_code":"static int compareByAuthor(const void* a, const void* b) {\n    return strcmp((*(Book**)a)->author, (*(Book**)b)->author);\n}\n"}},"end":{"id":"29","labels":["Function"],"properties":{"decl_loc":"/usr/include/string.h:156:12","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"strcmp","op_source":"use","id":44,"source_code":""}}}
{"type":"relationship","id":"79","label":"INVOKES","start":{"id":"59","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:497:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按标题排序图书\",\n    \"When\": \"需要按标题组织图书时，如目录整理、展示优化\",\n    \"Why\": \"提供图书排序功能，便于查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByTitle比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByTitle作为比较函数\\n4. 排序完成后数组按标题字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"目录管理功能\", \"展示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为目录管理和展示功能提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByTitle","op_source":"define","id":66,"source_code":"void sortBooksByTitle(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByTitle);\n}\n"}},"end":{"id":"33","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdlib.h:970:13","def_loc":"undefined","semantic_explanation":"[unexplaned]","is_static":false,"ret_type":"","name":"qsort","op_source":"use","id":67,"source_code":""}}}
{"type":"relationship","id":"80","label":"REF_AS_POINTER","start":{"id":"59","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:497:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按标题排序图书\",\n    \"When\": \"需要按标题组织图书时，如目录整理、展示优化\",\n    \"Why\": \"提供图书排序功能，便于查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByTitle比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByTitle作为比较函数\\n4. 排序完成后数组按标题字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"目录管理功能\", \"展示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为目录管理和展示功能提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByTitle","op_source":"define","id":66,"source_code":"void sortBooksByTitle(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByTitle);\n}\n"}},"end":{"id":"41","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:436:12","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按标题比较两本图书\",\n    \"When\": \"在排序函数中使用\",\n    \"Why\": \"提供qsort函数所需的比较函数，支持图书标题的标准化排序\",\n    \"How\": \"使用strcmp比较图书标题\",\n    \"Logic\": \"1. 将void指针转换为Book指针\\n2. 使用strcmp比较两本图书的标题\\n3. 返回比较结果\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"假设输入指针有效（由qsort保证）\",\n        \"StringComparison\": \"使用标准库的字符串比较函数\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书标题的标准化比较，支持排序功能\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"排序功能\"],\n        \"AbstractionLevel\": \"低抽象，专注于比较操作\",\n        \"Role\": {\n            \"InParent\": \"作为排序功能的辅助函数\",\n            \"InChild\": \"为排序算法提供标准化的比较服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"compareByTitle","op_source":"define","id":62,"source_code":"static int compareByTitle(const void* a, const void* b) {\n    return strcmp((*(Book**)a)->title, (*(Book**)b)->title);\n}\n"}}}
{"type":"relationship","id":"81","label":"INVOKES","start":{"id":"49","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:529:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按作者排序图书\",\n    \"When\": \"需要按作者组织图书时，如作者作品集整理、分类浏览\",\n    \"Why\": \"提供图书排序功能，便于按作者查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByAuthor比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByAuthor作为比较函数\\n4. 排序完成后数组按作者名字字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"作者作品管理功能\", \"分类浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为作者作品管理和分类浏览提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByAuthor","op_source":"define","id":69,"source_code":"void sortBooksByAuthor(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByAuthor);\n} "}},"end":{"id":"33","labels":["Function"],"properties":{"decl_loc":"/usr/include/stdlib.h:970:13","def_loc":"undefined","semantic_explanation":"[unexplaned]","is_static":false,"ret_type":"","name":"qsort","op_source":"use","id":67,"source_code":""}}}
{"type":"relationship","id":"82","label":"REF_AS_POINTER","start":{"id":"49","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:529:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按作者排序图书\",\n    \"When\": \"需要按作者组织图书时，如作者作品集整理、分类浏览\",\n    \"Why\": \"提供图书排序功能，便于按作者查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByAuthor比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByAuthor作为比较函数\\n4. 排序完成后数组按作者名字字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"作者作品管理功能\", \"分类浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为作者作品管理和分类浏览提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByAuthor","op_source":"define","id":69,"source_code":"void sortBooksByAuthor(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByAuthor);\n} "}},"end":{"id":"48","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:466:12","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按作者比较两本图书\",\n    \"When\": \"在排序函数中使用\",\n    \"Why\": \"提供qsort函数所需的比较函数，支持图书作者的标准化排序\",\n    \"How\": \"使用strcmp比较作者名字\",\n    \"Logic\": \"1. 将void指针转换为Book指针\\n2. 使用strcmp比较两本图书的作者\\n3. 返回比较结果\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"假设输入指针有效（由qsort保证）\",\n        \"StringComparison\": \"使用标准库的字符串比较函数\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书作者的标准化比较，支持排序功能\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"排序功能\"],\n        \"AbstractionLevel\": \"低抽象，专注于比较操作\",\n        \"Role\": {\n            \"InParent\": \"作为排序功能的辅助函数\",\n            \"InChild\": \"为排序算法提供标准化的比较服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"compareByAuthor","op_source":"define","id":64,"source_code":"static int compareByAuthor(const void* a, const void* b) {\n    return strcmp((*(Book**)a)->author, (*(Book**)b)->author);\n}\n"}}}
{"type":"relationship","id":"83","label":"IMPLEMENTED_BY","start":{"id":"9","labels":["Function"],"properties":{"decl_loc":"library.h:85:10","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"createLibrary","op_source":"use","id":4,"source_code":""}},"end":{"id":"53","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:62:10","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书馆对象并初始化所有字段\",\n    \"When\": \"系统初始化时，需要建立新的图书馆实例\",\n    \"Why\": \"提供统一的图书馆对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化图书数组和计数器\",\n    \"Logic\": \"1. 使用malloc分配Library结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 初始化bookCount为0\\n4. 使用循环将所有图书指针初始化为NULL\\n5. 返回创建的图书馆对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"Initialization\": \"确保所有字段都被正确初始化\",\n        \"NullPointer\": \"返回NULL表示创建失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统初始化层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"高抽象，作为整个系统的核心对象\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供基础设施\"\n        }\n    }\n} */\n","ret_type":"Library *","name":"createLibrary","op_source":"define","id":37,"source_code":"Library* createLibrary(void) {\n    Library* library = (Library*)malloc(sizeof(Library));\n    if (library == NULL) return NULL;\n    \n    library->bookCount = 0;\n    for (int i = 0; i < MAX_BOOKS; i++) {\n        library->books[i] = NULL;\n    }\n    \n    return library;\n}\n"}}}
{"type":"relationship","id":"84","label":"IMPLEMENTED_BY","start":{"id":"10","labels":["Function"],"properties":{"decl_loc":"book.h:82:7","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"createBook","op_source":"use","id":6,"source_code":""}},"end":{"id":"34","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:58:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书对象并初始化所有字段\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化所有字段，包括标题、作者、ISBN、价格、年份和可用性\",\n    \"Logic\": \"1. 使用malloc分配Book结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 使用strncpy安全复制字符串字段\\n4. 初始化数值字段\\n5. 设置默认可用性为1\\n6. 返回创建的图书对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"StringCopy\": \"使用strncpy确保字符串安全复制\",\n        \"NullTermination\": \"确保字符串正确终止\",\n        \"Initialization\": \"确保所有字段都被正确初始化\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配和字符串处理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"对象创建层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\"],\n        \"AbstractionLevel\": \"高抽象，作为图书对象的基础创建接口\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供标准化的对象创建服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"createBook","op_source":"define","id":23,"source_code":"Book* createBook(const char* title, const char* author, const char* isbn, float price, int year, int available) {\n    Book* book = (Book*)malloc(sizeof(Book));\n    if (book == NULL) return NULL;\n    \n    strncpy(book->title, title, MAX_TITLE_LEN - 1);\n    book->title[MAX_TITLE_LEN - 1] = '\\0';\n    \n    strncpy(book->author, author, MAX_AUTHOR_LEN - 1);\n    book->author[MAX_AUTHOR_LEN - 1] = '\\0';\n    \n    strncpy(book->isbn, isbn, MAX_ISBN_LEN - 1);\n    book->isbn[MAX_ISBN_LEN - 1] = '\\0';\n    \n    book->price = price;\n    book->year = year;\n    book->available = available;\n    \n    return book;\n}\n"}}}
{"type":"relationship","id":"85","label":"IMPLEMENTED_BY","start":{"id":"11","labels":["Function"],"properties":{"decl_loc":"library.h:143:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"addBook","op_source":"use","id":7,"source_code":""}},"end":{"id":"54","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:137:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"添加新书到图书馆\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书添加接口，确保图书馆容量限制，维护数据一致性\",\n    \"How\": \"检查容量限制，如果未满则添加图书并更新计数器\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 检查图书馆是否已满\\n3. 将图书添加到数组末尾\\n4. 更新图书计数\\n5. 返回添加是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"CapacityLimit\": \"检查是否超过最大图书数量限制\",\n        \"AddStatus\": \"返回布尔值表示添加是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全添加，确保数据完整性\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书入库功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据添加操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据添加接口\",\n            \"InChild\": \"为图书入库和库存管理提供标准化的添加服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"addBook","op_source":"define","id":42,"source_code":"int addBook(Library* library, Book* book) {\n    if (library == NULL || book == NULL || library->bookCount >= MAX_BOOKS) {\n        return 0;\n    }\n    \n    library->books[library->bookCount++] = book;\n    return 1;\n}\n"}}}
{"type":"relationship","id":"86","label":"IMPLEMENTED_BY","start":{"id":"16","labels":["Function"],"properties":{"decl_loc":"book.h:111:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"destroyBook","op_source":"use","id":13,"source_code":""}},"end":{"id":"42","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:105:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"销毁图书对象并释放内存\",\n    \"When\": \"图书对象不再需要时，如删除图书、系统关闭\",\n    \"Why\": \"防止内存泄漏，确保系统资源被正确释放，维护系统稳定性\",\n    \"How\": \"使用free函数释放图书对象占用的内存\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，释放内存\\n3. 不返回任何值，因为释放后指针已失效\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"安全处理NULL指针输入\",\n        \"MemoryLeak\": \"确保内存被正确释放\",\n        \"DanglingPointer\": \"调用者负责将指针设为NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的资源清理，确保内存管理安全\",\n        \"Dependencies\": \"依赖标准库的内存释放函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"资源清理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"系统关闭处理\"],\n        \"AbstractionLevel\": \"高抽象，负责对象资源管理\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心资源清理接口\",\n            \"InChild\": \"为图书删除和系统关闭提供标准化的资源释放服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"destroyBook","op_source":"define","id":26,"source_code":"void destroyBook(Book* book) {\n    if (book != NULL) {\n        free(book);\n    }\n}\n"}}}
{"type":"relationship","id":"87","label":"IMPLEMENTED_BY","start":{"id":"17","labels":["Function"],"properties":{"decl_loc":"library.h:173:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"removeBook","op_source":"use","id":14,"source_code":""}},"end":{"id":"55","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:174:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"从图书馆移除图书\",\n    \"When\": \"需要删除图书时，如图书报废、信息错误\",\n    \"Why\": \"提供统一的图书删除接口，确保安全移除，维护数据一致性\",\n    \"How\": \"通过ISBN查找图书，移除后重新排列数组\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历查找匹配的ISBN\\n3. 找到后释放图书对象\\n4. 重新排列数组以保持连续性\\n5. 更新图书计数\\n6. 返回删除是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"处理未找到图书的情况\",\n        \"ArrayReorganization\": \"确保数组连续性\",\n        \"DeleteStatus\": \"返回布尔值表示删除是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全删除，确保数据一致性\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书删除功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据删除操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据删除接口\",\n            \"InChild\": \"为图书删除和库存管理提供标准化的删除服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"removeBook","op_source":"define","id":43,"source_code":"int removeBook(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return 0;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            destroyBook(library->books[i]);\n            for (int j = i; j < library->bookCount - 1; j++) {\n                library->books[j] = library->books[j + 1];\n            }\n            library->bookCount--;\n            return 1;\n        }\n    }\n    return 0;\n}\n"}}}
{"type":"relationship","id":"88","label":"IMPLEMENTED_BY","start":{"id":"18","labels":["Function"],"properties":{"decl_loc":"library.h:202:7","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"findBookByISBN","op_source":"use","id":15,"source_code":""}},"end":{"id":"40","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:217:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过ISBN查找图书\",\n    \"When\": \"需要查找特定图书时，如借阅、归还、查询\",\n    \"Why\": \"提供快速查找接口，ISBN是唯一标识符，确保查找的准确性和效率\",\n    \"How\": \"遍历图书数组查找匹配的ISBN\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strcmp比较ISBN\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringComparison\": \"使用安全的字符串比较\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的快速查找，支持各种业务操作\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅功能\", \"归还功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心查找接口\",\n            \"InChild\": \"为借阅、归还和查询功能提供标准化的查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByISBN","op_source":"define","id":46,"source_code":"Book* findBookByISBN(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}}}
{"type":"relationship","id":"89","label":"IMPLEMENTED_BY","start":{"id":"19","labels":["Function"],"properties":{"decl_loc":"book.h:140:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"printBook","op_source":"use","id":16,"source_code":""}},"end":{"id":"43","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:138:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"打印图书的详细信息\",\n    \"When\": \"需要显示图书信息时，如查询结果、列表显示\",\n    \"Why\": \"提供标准化的图书信息展示功能，确保信息显示的一致性和完整性\",\n    \"How\": \"使用printf函数格式化输出所有字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，按格式输出所有字段\\n3. 使用条件运算符显示可用性状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"OutputError\": \"假设标准输出可用\",\n        \"Formatting\": \"使用统一的格式确保显示一致性\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书信息的标准化展示，提供完整的图书视图\",\n        \"Dependencies\": \"依赖标准库的输出函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"信息展示层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"查询功能\", \"列表显示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于信息展示\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心信息展示接口\",\n            \"InChild\": \"为查询和列表显示提供标准化的信息展示服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"printBook","op_source":"define","id":28,"source_code":"void printBook(const Book* book) {\n    if (book == NULL) {\n        printf(\"无效的图书对象！\\n\");\n        return;\n    }\n    \n    printf(\"书名：%s\\n\", book->title);\n    printf(\"作者：%s\\n\", book->author);\n    printf(\"ISBN：%s\\n\", book->isbn);\n    printf(\"价格：%.2f\\n\", book->price);\n    printf(\"出版年份：%d\\n\", book->year);\n    printf(\"状态：%s\\n\", book->available ? \"可借\" : \"已借出\");\n}\n"}}}
{"type":"relationship","id":"90","label":"IMPLEMENTED_BY","start":{"id":"20","labels":["Function"],"properties":{"decl_loc":"library.h:260:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"listAllBooks","op_source":"use","id":17,"source_code":""}},"end":{"id":"47","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:293:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"列出所有图书\",\n    \"When\": \"需要显示图书馆所有藏书时，如库存盘点、目录浏览\",\n    \"Why\": \"提供完整的图书列表展示功能，支持系统管理和用户浏览\",\n    \"How\": \"遍历并打印所有图书信息，包括总数统计\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 输出总藏书量信息\\n3. 遍历所有图书\\n4. 为每本图书输出序号\\n5. 调用printBook显示详细信息\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"OutputError\": \"假设标准输出可用\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书列表的标准化展示，提供完整的库存视图\",\n        \"Dependencies\": \"依赖book.h中的printBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"信息展示层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"库存管理功能\", \"用户界面功能\"],\n        \"AbstractionLevel\": \"较高抽象，专注于信息展示\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心列表展示接口\",\n            \"InChild\": \"为库存管理和用户界面提供标准化的列表展示服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"listAllBooks","op_source":"define","id":50,"source_code":"void listAllBooks(const Library* library) {\n    if (library == NULL) {\n        printf(\"图书馆不存在\\n\");\n        return;\n    }\n    \n    printf(\"图书馆藏书列表（共%d本）：\\n\", library->bookCount);\n    for (int i = 0; i < library->bookCount; i++) {\n        printf(\"\\n--- 第%d本书 ---\\n\", i + 1);\n        printBook(library->books[i]);\n    }\n}\n"}}}
{"type":"relationship","id":"91","label":"IMPLEMENTED_BY","start":{"id":"21","labels":["Function"],"properties":{"decl_loc":"library.h:289:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"borrowBook","op_source":"use","id":18,"source_code":""}},"end":{"id":"57","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:333:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"借出图书\",\n    \"When\": \"用户需要借书时，如读者借阅、预约取书\",\n    \"Why\": \"提供图书借阅功能，管理图书可用性，支持图书馆核心业务\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否可用\\n4. 更新图书可用性状态\\n5. 返回借阅是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"NotAvailable\": \"处理图书不可借的情况\",\n        \"BorrowStatus\": \"返回布尔值表示借阅是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全借阅，确保借阅流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心借阅接口\",\n            \"InChild\": \"为借阅和预约管理提供标准化的借阅服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"borrowBook","op_source":"define","id":53,"source_code":"int borrowBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || !isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 0);\n    return 1;\n}\n"}}}
{"type":"relationship","id":"92","label":"IMPLEMENTED_BY","start":{"id":"22","labels":["Function"],"properties":{"decl_loc":"library.h:318:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"returnBook","op_source":"use","id":19,"source_code":""}},"end":{"id":"58","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:370:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"归还图书\",\n    \"When\": \"用户归还图书时，如读者还书、预约归还\",\n    \"Why\": \"提供图书归还功能，恢复图书可用性，完成借阅流程\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否已借出\\n4. 更新图书可用性状态\\n5. 返回归还是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"AlreadyAvailable\": \"处理图书未借出的情况\",\n        \"ReturnStatus\": \"返回布尔值表示归还是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全归还，确保归还流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"归还管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心归还接口\",\n            \"InChild\": \"为归还和预约管理提供标准化的归还服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"returnBook","op_source":"define","id":57,"source_code":"int returnBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 1);\n    return 1;\n}\n"}}}
{"type":"relationship","id":"93","label":"IMPLEMENTED_BY","start":{"id":"23","labels":["Function"],"properties":{"decl_loc":"library.h:375:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"sortBooksByTitle","op_source":"use","id":20,"source_code":""}},"end":{"id":"59","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:497:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按标题排序图书\",\n    \"When\": \"需要按标题组织图书时，如目录整理、展示优化\",\n    \"Why\": \"提供图书排序功能，便于查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByTitle比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByTitle作为比较函数\\n4. 排序完成后数组按标题字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"目录管理功能\", \"展示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为目录管理和展示功能提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByTitle","op_source":"define","id":66,"source_code":"void sortBooksByTitle(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByTitle);\n}\n"}}}
{"type":"relationship","id":"94","label":"IMPLEMENTED_BY","start":{"id":"24","labels":["Function"],"properties":{"decl_loc":"library.h:404:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"sortBooksByAuthor","op_source":"use","id":21,"source_code":""}},"end":{"id":"49","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:529:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按作者排序图书\",\n    \"When\": \"需要按作者组织图书时，如作者作品集整理、分类浏览\",\n    \"Why\": \"提供图书排序功能，便于按作者查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByAuthor比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByAuthor作为比较函数\\n4. 排序完成后数组按作者名字字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"作者作品管理功能\", \"分类浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为作者作品管理和分类浏览提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByAuthor","op_source":"define","id":69,"source_code":"void sortBooksByAuthor(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByAuthor);\n} "}}}
{"type":"relationship","id":"95","label":"IMPLEMENTED_BY","start":{"id":"25","labels":["Function"],"properties":{"decl_loc":"library.h:114:6","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"destroyLibrary","op_source":"use","id":22,"source_code":""}},"end":{"id":"46","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:101:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"销毁图书馆对象并释放所有资源\",\n    \"When\": \"图书馆对象不再需要时，如系统关闭、重置图书馆\",\n    \"Why\": \"防止内存泄漏，确保所有资源被正确释放，维护系统稳定性\",\n    \"How\": \"递归释放所有图书对象和图书馆对象的内存\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 遍历所有图书对象\\n3. 调用destroyBook释放每本图书\\n4. 释放图书馆对象本身\\n5. 不返回任何值，因为释放后指针已失效\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"安全处理NULL指针输入\",\n        \"MemoryLeak\": \"确保所有子对象内存被正确释放\",\n        \"DanglingPointer\": \"调用者负责将指针设为NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的资源清理，确保内存管理安全\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"资源清理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"系统关闭处理\"],\n        \"AbstractionLevel\": \"高抽象，负责整体资源管理\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心资源清理接口\",\n            \"InChild\": \"为系统关闭和重置提供标准化的资源释放服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"destroyLibrary","op_source":"define","id":39,"source_code":"void destroyLibrary(Library* library) {\n    if (library == NULL) return;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        destroyBook(library->books[i]);\n    }\n    free(library);\n}\n"}}}
{"type":"relationship","id":"96","label":"IMPLEMENTED_BY","start":{"id":"31","labels":["Function"],"properties":{"decl_loc":"book.h:226:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"isBookAvailable","op_source":"use","id":55,"source_code":""}},"end":{"id":"39","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:250:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"检查图书是否可借\",\n    \"When\": \"需要查询图书状态时，如借阅前检查、库存查询\",\n    \"Why\": \"提供图书状态查询接口，支持借阅管理功能\",\n    \"How\": \"检查输入指针并返回可用性状态\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回available字段的值\\n3. 如果无效，返回0\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"DefaultValue\": \"无效指针时返回0\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书状态的标准化查询，支持借阅管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"状态查询层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"库存查询功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问状态\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心状态查询接口\",\n            \"InChild\": \"为借阅管理和库存查询提供标准化的状态查询服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"isBookAvailable","op_source":"define","id":32,"source_code":"int isBookAvailable(const Book* book) {\n    return book != NULL ? book->available : 0;\n}\n"}}}
{"type":"relationship","id":"97","label":"IMPLEMENTED_BY","start":{"id":"32","labels":["Function"],"properties":{"decl_loc":"book.h:254:5","def_loc":"undefined","is_static":false,"semantic_explanation":"[unexplaned]","ret_type":"","name":"setBookAvailability","op_source":"use","id":56,"source_code":""}},"end":{"id":"51","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:280:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"设置图书的可用性状态\",\n    \"When\": \"需要修改图书状态时，如借阅、归还、状态更新\",\n    \"Why\": \"提供图书状态修改接口，支持借阅管理功能\",\n    \"How\": \"检查输入参数并更新可用性状态\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 更新available字段\\n3. 返回更新是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"UpdateStatus\": \"返回布尔值表示更新是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书状态的标准化更新，支持借阅管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"状态管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"状态管理功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接修改状态\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心状态更新接口\",\n            \"InChild\": \"为借阅管理和状态管理提供标准化的状态更新服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"setBookAvailability","op_source":"define","id":33,"source_code":"int setBookAvailability(Book* book, int available) {\n    if (book == NULL) {\n        return 0;\n    }\n    \n    book->available = available;\n    return 1;\n}\n"}}}
{"type":"relationship","id":"98","label":"USES_GLOBAL","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"60","labels":["Global"],"properties":{"decl_loc":"/usr/include/stdio.h:149:14","def_loc":"undefined","semantic_explanation":"[unexplaned]","is_static":false,"is_extern":false,"name":"stdin","op_source":"use","id":1,"source_code":"extern FILE *stdin;\t\t/* Standard input stream.  */\n"}}}
{"type":"relationship","id":"99","label":"USES_TYPE","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}}
{"type":"relationship","id":"100","label":"USES_TYPE","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"101","label":"USES_TYPE","start":{"id":"34","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:58:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书对象并初始化所有字段\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化所有字段，包括标题、作者、ISBN、价格、年份和可用性\",\n    \"Logic\": \"1. 使用malloc分配Book结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 使用strncpy安全复制字符串字段\\n4. 初始化数值字段\\n5. 设置默认可用性为1\\n6. 返回创建的图书对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"StringCopy\": \"使用strncpy确保字符串安全复制\",\n        \"NullTermination\": \"确保字符串正确终止\",\n        \"Initialization\": \"确保所有字段都被正确初始化\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配和字符串处理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"对象创建层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\"],\n        \"AbstractionLevel\": \"高抽象，作为图书对象的基础创建接口\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供标准化的对象创建服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"createBook","op_source":"define","id":23,"source_code":"Book* createBook(const char* title, const char* author, const char* isbn, float price, int year, int available) {\n    Book* book = (Book*)malloc(sizeof(Book));\n    if (book == NULL) return NULL;\n    \n    strncpy(book->title, title, MAX_TITLE_LEN - 1);\n    book->title[MAX_TITLE_LEN - 1] = '\\0';\n    \n    strncpy(book->author, author, MAX_AUTHOR_LEN - 1);\n    book->author[MAX_AUTHOR_LEN - 1] = '\\0';\n    \n    strncpy(book->isbn, isbn, MAX_ISBN_LEN - 1);\n    book->isbn[MAX_ISBN_LEN - 1] = '\\0';\n    \n    book->price = price;\n    book->year = year;\n    book->available = available;\n    \n    return book;\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"102","label":"USES_TYPE","start":{"id":"42","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:105:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"销毁图书对象并释放内存\",\n    \"When\": \"图书对象不再需要时，如删除图书、系统关闭\",\n    \"Why\": \"防止内存泄漏，确保系统资源被正确释放，维护系统稳定性\",\n    \"How\": \"使用free函数释放图书对象占用的内存\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，释放内存\\n3. 不返回任何值，因为释放后指针已失效\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"安全处理NULL指针输入\",\n        \"MemoryLeak\": \"确保内存被正确释放\",\n        \"DanglingPointer\": \"调用者负责将指针设为NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的资源清理，确保内存管理安全\",\n        \"Dependencies\": \"依赖标准库的内存释放函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"资源清理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"系统关闭处理\"],\n        \"AbstractionLevel\": \"高抽象，负责对象资源管理\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心资源清理接口\",\n            \"InChild\": \"为图书删除和系统关闭提供标准化的资源释放服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"destroyBook","op_source":"define","id":26,"source_code":"void destroyBook(Book* book) {\n    if (book != NULL) {\n        free(book);\n    }\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"103","label":"USES_TYPE","start":{"id":"43","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:138:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"打印图书的详细信息\",\n    \"When\": \"需要显示图书信息时，如查询结果、列表显示\",\n    \"Why\": \"提供标准化的图书信息展示功能，确保信息显示的一致性和完整性\",\n    \"How\": \"使用printf函数格式化输出所有字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，按格式输出所有字段\\n3. 使用条件运算符显示可用性状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"OutputError\": \"假设标准输出可用\",\n        \"Formatting\": \"使用统一的格式确保显示一致性\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书信息的标准化展示，提供完整的图书视图\",\n        \"Dependencies\": \"依赖标准库的输出函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"信息展示层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"查询功能\", \"列表显示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于信息展示\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心信息展示接口\",\n            \"InChild\": \"为查询和列表显示提供标准化的信息展示服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"printBook","op_source":"define","id":28,"source_code":"void printBook(const Book* book) {\n    if (book == NULL) {\n        printf(\"无效的图书对象！\\n\");\n        return;\n    }\n    \n    printf(\"书名：%s\\n\", book->title);\n    printf(\"作者：%s\\n\", book->author);\n    printf(\"ISBN：%s\\n\", book->isbn);\n    printf(\"价格：%.2f\\n\", book->price);\n    printf(\"出版年份：%d\\n\", book->year);\n    printf(\"状态：%s\\n\", book->available ? \"可借\" : \"已借出\");\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"104","label":"USES_TYPE","start":{"id":"50","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:179:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"更新图书价格\",\n    \"When\": \"需要修改图书价格时，如价格调整、折扣更新\",\n    \"Why\": \"提供图书价格修改接口，支持价格管理功能\",\n    \"How\": \"检查输入参数并更新价格字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 检查新价格是否有效\\n3. 更新价格字段\\n4. 返回更新是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"InvalidPrice\": \"检查价格是否为正数\",\n        \"UpdateStatus\": \"返回布尔值表示更新是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书价格的标准化更新，支持价格管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据更新层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"价格管理功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据更新\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心价格更新接口\",\n            \"InChild\": \"为价格管理和库存管理提供标准化的价格更新服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"updateBookPrice","op_source":"define","id":30,"source_code":"int updateBookPrice(Book* book, float newPrice) {\n    if (book == NULL || newPrice <= 0) {\n        return 0;\n    }\n    \n    book->price = newPrice;\n    return 1;\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"105","label":"USES_TYPE","start":{"id":"35","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:215:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"更新图书出版年份\",\n    \"When\": \"需要修改图书出版年份时，如信息更正、版本更新\",\n    \"Why\": \"提供图书出版年份修改接口，支持信息管理功能\",\n    \"How\": \"检查输入参数并更新年份字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 检查新年份是否有效\\n3. 更新年份字段\\n4. 返回更新是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"InvalidYear\": \"检查年份是否在合理范围内\",\n        \"UpdateStatus\": \"返回布尔值表示更新是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书出版年份的标准化更新，支持信息管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据更新层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"信息管理功能\", \"版本管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据更新\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心年份更新接口\",\n            \"InChild\": \"为信息管理和版本管理提供标准化的年份更新服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"updateBookYear","op_source":"define","id":31,"source_code":"int updateBookYear(Book* book, int newYear) {\n    if (book == NULL || newYear <= 0 || newYear > 2024) {\n        return 0;\n    }\n    \n    book->year = newYear;\n    return 1;\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"106","label":"USES_TYPE","start":{"id":"39","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:250:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"检查图书是否可借\",\n    \"When\": \"需要查询图书状态时，如借阅前检查、库存查询\",\n    \"Why\": \"提供图书状态查询接口，支持借阅管理功能\",\n    \"How\": \"检查输入指针并返回可用性状态\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回available字段的值\\n3. 如果无效，返回0\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"DefaultValue\": \"无效指针时返回0\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书状态的标准化查询，支持借阅管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"状态查询层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"库存查询功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问状态\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心状态查询接口\",\n            \"InChild\": \"为借阅管理和库存查询提供标准化的状态查询服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"isBookAvailable","op_source":"define","id":32,"source_code":"int isBookAvailable(const Book* book) {\n    return book != NULL ? book->available : 0;\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"107","label":"USES_TYPE","start":{"id":"51","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:280:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"设置图书的可用性状态\",\n    \"When\": \"需要修改图书状态时，如借阅、归还、状态更新\",\n    \"Why\": \"提供图书状态修改接口，支持借阅管理功能\",\n    \"How\": \"检查输入参数并更新可用性状态\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 更新available字段\\n3. 返回更新是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"UpdateStatus\": \"返回布尔值表示更新是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书状态的标准化更新，支持借阅管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"状态管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"状态管理功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接修改状态\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心状态更新接口\",\n            \"InChild\": \"为借阅管理和状态管理提供标准化的状态更新服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"setBookAvailability","op_source":"define","id":33,"source_code":"int setBookAvailability(Book* book, int available) {\n    if (book == NULL) {\n        return 0;\n    }\n    \n    book->available = available;\n    return 1;\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"108","label":"USES_TYPE","start":{"id":"44","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:315:13","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取图书标题\",\n    \"When\": \"需要访问图书标题时，如显示、搜索、排序\",\n    \"Why\": \"提供图书标题的只读访问接口，确保数据封装性\",\n    \"How\": \"检查输入指针并返回标题字符串\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回title字段\\n3. 如果无效，返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"ReturnValue\": \"无效指针时返回NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书标题的安全访问，支持信息展示和搜索\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"显示功能\", \"搜索功能\", \"排序功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心标题访问接口\",\n            \"InChild\": \"为显示、搜索和排序功能提供标准化的标题访问服务\"\n        }\n    }\n} */\n","ret_type":"const char *","name":"getBookTitle","op_source":"define","id":34,"source_code":"const char* getBookTitle(const Book* book) {\n    return book != NULL ? book->title : NULL;\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"109","label":"USES_TYPE","start":{"id":"45","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:345:13","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取图书作者\",\n    \"When\": \"需要访问图书作者时，如显示、搜索、排序\",\n    \"Why\": \"提供图书作者的只读访问接口，确保数据封装性\",\n    \"How\": \"检查输入指针并返回作者字符串\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回author字段\\n3. 如果无效，返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"ReturnValue\": \"无效指针时返回NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书作者的安全访问，支持信息展示和搜索\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"显示功能\", \"搜索功能\", \"排序功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心作者访问接口\",\n            \"InChild\": \"为显示、搜索和排序功能提供标准化的作者访问服务\"\n        }\n    }\n} */\n","ret_type":"const char *","name":"getBookAuthor","op_source":"define","id":35,"source_code":"const char* getBookAuthor(const Book* book) {\n    return book != NULL ? book->author : NULL;\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"110","label":"USES_TYPE","start":{"id":"52","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:375:13","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取图书ISBN\",\n    \"When\": \"需要访问图书ISBN时，如查找、标识、管理\",\n    \"Why\": \"提供图书ISBN的只读访问接口，确保数据封装性\",\n    \"How\": \"检查输入指针并返回ISBN字符串\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回isbn字段\\n3. 如果无效，返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"ReturnValue\": \"无效指针时返回NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书ISBN的安全访问，支持查找和管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"查找功能\", \"标识功能\", \"管理功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心ISBN访问接口\",\n            \"InChild\": \"为查找、标识和管理功能提供标准化的ISBN访问服务\"\n        }\n    }\n} */\n","ret_type":"const char *","name":"getBookISBN","op_source":"define","id":36,"source_code":"const char* getBookISBN(const Book* book) {\n    return book != NULL ? book->isbn : NULL;\n} "}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"111","label":"USES_TYPE","start":{"id":"53","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:62:10","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书馆对象并初始化所有字段\",\n    \"When\": \"系统初始化时，需要建立新的图书馆实例\",\n    \"Why\": \"提供统一的图书馆对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化图书数组和计数器\",\n    \"Logic\": \"1. 使用malloc分配Library结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 初始化bookCount为0\\n4. 使用循环将所有图书指针初始化为NULL\\n5. 返回创建的图书馆对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"Initialization\": \"确保所有字段都被正确初始化\",\n        \"NullPointer\": \"返回NULL表示创建失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统初始化层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"高抽象，作为整个系统的核心对象\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供基础设施\"\n        }\n    }\n} */\n","ret_type":"Library *","name":"createLibrary","op_source":"define","id":37,"source_code":"Library* createLibrary(void) {\n    Library* library = (Library*)malloc(sizeof(Library));\n    if (library == NULL) return NULL;\n    \n    library->bookCount = 0;\n    for (int i = 0; i < MAX_BOOKS; i++) {\n        library->books[i] = NULL;\n    }\n    \n    return library;\n}\n"}},"end":{"id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}}
{"type":"relationship","id":"112","label":"USES_TYPE","start":{"id":"46","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:101:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"销毁图书馆对象并释放所有资源\",\n    \"When\": \"图书馆对象不再需要时，如系统关闭、重置图书馆\",\n    \"Why\": \"防止内存泄漏，确保所有资源被正确释放，维护系统稳定性\",\n    \"How\": \"递归释放所有图书对象和图书馆对象的内存\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 遍历所有图书对象\\n3. 调用destroyBook释放每本图书\\n4. 释放图书馆对象本身\\n5. 不返回任何值，因为释放后指针已失效\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"安全处理NULL指针输入\",\n        \"MemoryLeak\": \"确保所有子对象内存被正确释放\",\n        \"DanglingPointer\": \"调用者负责将指针设为NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的资源清理，确保内存管理安全\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"资源清理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"系统关闭处理\"],\n        \"AbstractionLevel\": \"高抽象，负责整体资源管理\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心资源清理接口\",\n            \"InChild\": \"为系统关闭和重置提供标准化的资源释放服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"destroyLibrary","op_source":"define","id":39,"source_code":"void destroyLibrary(Library* library) {\n    if (library == NULL) return;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        destroyBook(library->books[i]);\n    }\n    free(library);\n}\n"}},"end":{"id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}}
{"type":"relationship","id":"113","label":"USES_TYPE","start":{"id":"54","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:137:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"添加新书到图书馆\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书添加接口，确保图书馆容量限制，维护数据一致性\",\n    \"How\": \"检查容量限制，如果未满则添加图书并更新计数器\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 检查图书馆是否已满\\n3. 将图书添加到数组末尾\\n4. 更新图书计数\\n5. 返回添加是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"CapacityLimit\": \"检查是否超过最大图书数量限制\",\n        \"AddStatus\": \"返回布尔值表示添加是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全添加，确保数据完整性\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书入库功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据添加操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据添加接口\",\n            \"InChild\": \"为图书入库和库存管理提供标准化的添加服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"addBook","op_source":"define","id":42,"source_code":"int addBook(Library* library, Book* book) {\n    if (library == NULL || book == NULL || library->bookCount >= MAX_BOOKS) {\n        return 0;\n    }\n    \n    library->books[library->bookCount++] = book;\n    return 1;\n}\n"}},"end":{"id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}}
{"type":"relationship","id":"114","label":"USES_TYPE","start":{"id":"54","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:137:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"添加新书到图书馆\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书添加接口，确保图书馆容量限制，维护数据一致性\",\n    \"How\": \"检查容量限制，如果未满则添加图书并更新计数器\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 检查图书馆是否已满\\n3. 将图书添加到数组末尾\\n4. 更新图书计数\\n5. 返回添加是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"CapacityLimit\": \"检查是否超过最大图书数量限制\",\n        \"AddStatus\": \"返回布尔值表示添加是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全添加，确保数据完整性\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书入库功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据添加操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据添加接口\",\n            \"InChild\": \"为图书入库和库存管理提供标准化的添加服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"addBook","op_source":"define","id":42,"source_code":"int addBook(Library* library, Book* book) {\n    if (library == NULL || book == NULL || library->bookCount >= MAX_BOOKS) {\n        return 0;\n    }\n    \n    library->books[library->bookCount++] = book;\n    return 1;\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"115","label":"USES_TYPE","start":{"id":"55","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:174:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"从图书馆移除图书\",\n    \"When\": \"需要删除图书时，如图书报废、信息错误\",\n    \"Why\": \"提供统一的图书删除接口，确保安全移除，维护数据一致性\",\n    \"How\": \"通过ISBN查找图书，移除后重新排列数组\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历查找匹配的ISBN\\n3. 找到后释放图书对象\\n4. 重新排列数组以保持连续性\\n5. 更新图书计数\\n6. 返回删除是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"处理未找到图书的情况\",\n        \"ArrayReorganization\": \"确保数组连续性\",\n        \"DeleteStatus\": \"返回布尔值表示删除是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全删除，确保数据一致性\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书删除功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据删除操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据删除接口\",\n            \"InChild\": \"为图书删除和库存管理提供标准化的删除服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"removeBook","op_source":"define","id":43,"source_code":"int removeBook(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return 0;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            destroyBook(library->books[i]);\n            for (int j = i; j < library->bookCount - 1; j++) {\n                library->books[j] = library->books[j + 1];\n            }\n            library->bookCount--;\n            return 1;\n        }\n    }\n    return 0;\n}\n"}},"end":{"id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}}
{"type":"relationship","id":"116","label":"USES_TYPE","start":{"id":"40","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:217:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过ISBN查找图书\",\n    \"When\": \"需要查找特定图书时，如借阅、归还、查询\",\n    \"Why\": \"提供快速查找接口，ISBN是唯一标识符，确保查找的准确性和效率\",\n    \"How\": \"遍历图书数组查找匹配的ISBN\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strcmp比较ISBN\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringComparison\": \"使用安全的字符串比较\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的快速查找，支持各种业务操作\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅功能\", \"归还功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心查找接口\",\n            \"InChild\": \"为借阅、归还和查询功能提供标准化的查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByISBN","op_source":"define","id":46,"source_code":"Book* findBookByISBN(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"117","label":"USES_TYPE","start":{"id":"40","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:217:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过ISBN查找图书\",\n    \"When\": \"需要查找特定图书时，如借阅、归还、查询\",\n    \"Why\": \"提供快速查找接口，ISBN是唯一标识符，确保查找的准确性和效率\",\n    \"How\": \"遍历图书数组查找匹配的ISBN\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strcmp比较ISBN\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringComparison\": \"使用安全的字符串比较\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的快速查找，支持各种业务操作\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅功能\", \"归还功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心查找接口\",\n            \"InChild\": \"为借阅、归还和查询功能提供标准化的查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByISBN","op_source":"define","id":46,"source_code":"Book* findBookByISBN(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}},"end":{"id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}}
{"type":"relationship","id":"118","label":"USES_TYPE","start":{"id":"56","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:255:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过标题查找图书\",\n    \"When\": \"需要按标题搜索图书时，如模糊查询、分类浏览\",\n    \"Why\": \"提供按标题搜索的接口，支持模糊查找，提高用户查询便利性\",\n    \"How\": \"使用strstr函数进行子串匹配\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strstr进行子串匹配\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringMatching\": \"使用安全的字符串匹配\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的模糊查找，支持用户友好的搜索\",\n        \"Dependencies\": \"依赖标准库的字符串匹配函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"搜索功能\", \"浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于模糊查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心模糊查找接口\",\n            \"InChild\": \"为搜索和浏览功能提供标准化的模糊查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByTitle","op_source":"define","id":48,"source_code":"Book* findBookByTitle(Library* library, const char* title) {\n    if (library == NULL || title == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strstr(library->books[i]->title, title) != NULL) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"119","label":"USES_TYPE","start":{"id":"56","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:255:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过标题查找图书\",\n    \"When\": \"需要按标题搜索图书时，如模糊查询、分类浏览\",\n    \"Why\": \"提供按标题搜索的接口，支持模糊查找，提高用户查询便利性\",\n    \"How\": \"使用strstr函数进行子串匹配\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strstr进行子串匹配\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringMatching\": \"使用安全的字符串匹配\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的模糊查找，支持用户友好的搜索\",\n        \"Dependencies\": \"依赖标准库的字符串匹配函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"搜索功能\", \"浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于模糊查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心模糊查找接口\",\n            \"InChild\": \"为搜索和浏览功能提供标准化的模糊查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByTitle","op_source":"define","id":48,"source_code":"Book* findBookByTitle(Library* library, const char* title) {\n    if (library == NULL || title == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strstr(library->books[i]->title, title) != NULL) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}},"end":{"id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}}
{"type":"relationship","id":"120","label":"USES_TYPE","start":{"id":"47","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:293:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"列出所有图书\",\n    \"When\": \"需要显示图书馆所有藏书时，如库存盘点、目录浏览\",\n    \"Why\": \"提供完整的图书列表展示功能，支持系统管理和用户浏览\",\n    \"How\": \"遍历并打印所有图书信息，包括总数统计\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 输出总藏书量信息\\n3. 遍历所有图书\\n4. 为每本图书输出序号\\n5. 调用printBook显示详细信息\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"OutputError\": \"假设标准输出可用\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书列表的标准化展示，提供完整的库存视图\",\n        \"Dependencies\": \"依赖book.h中的printBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"信息展示层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"库存管理功能\", \"用户界面功能\"],\n        \"AbstractionLevel\": \"较高抽象，专注于信息展示\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心列表展示接口\",\n            \"InChild\": \"为库存管理和用户界面提供标准化的列表展示服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"listAllBooks","op_source":"define","id":50,"source_code":"void listAllBooks(const Library* library) {\n    if (library == NULL) {\n        printf(\"图书馆不存在\\n\");\n        return;\n    }\n    \n    printf(\"图书馆藏书列表（共%d本）：\\n\", library->bookCount);\n    for (int i = 0; i < library->bookCount; i++) {\n        printf(\"\\n--- 第%d本书 ---\\n\", i + 1);\n        printBook(library->books[i]);\n    }\n}\n"}},"end":{"id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}}
{"type":"relationship","id":"121","label":"USES_TYPE","start":{"id":"57","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:333:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"借出图书\",\n    \"When\": \"用户需要借书时，如读者借阅、预约取书\",\n    \"Why\": \"提供图书借阅功能，管理图书可用性，支持图书馆核心业务\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否可用\\n4. 更新图书可用性状态\\n5. 返回借阅是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"NotAvailable\": \"处理图书不可借的情况\",\n        \"BorrowStatus\": \"返回布尔值表示借阅是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全借阅，确保借阅流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心借阅接口\",\n            \"InChild\": \"为借阅和预约管理提供标准化的借阅服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"borrowBook","op_source":"define","id":53,"source_code":"int borrowBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || !isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 0);\n    return 1;\n}\n"}},"end":{"id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}}
{"type":"relationship","id":"122","label":"USES_TYPE","start":{"id":"57","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:333:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"借出图书\",\n    \"When\": \"用户需要借书时，如读者借阅、预约取书\",\n    \"Why\": \"提供图书借阅功能，管理图书可用性，支持图书馆核心业务\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否可用\\n4. 更新图书可用性状态\\n5. 返回借阅是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"NotAvailable\": \"处理图书不可借的情况\",\n        \"BorrowStatus\": \"返回布尔值表示借阅是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全借阅，确保借阅流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心借阅接口\",\n            \"InChild\": \"为借阅和预约管理提供标准化的借阅服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"borrowBook","op_source":"define","id":53,"source_code":"int borrowBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || !isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 0);\n    return 1;\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"123","label":"USES_TYPE","start":{"id":"58","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:370:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"归还图书\",\n    \"When\": \"用户归还图书时，如读者还书、预约归还\",\n    \"Why\": \"提供图书归还功能，恢复图书可用性，完成借阅流程\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否已借出\\n4. 更新图书可用性状态\\n5. 返回归还是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"AlreadyAvailable\": \"处理图书未借出的情况\",\n        \"ReturnStatus\": \"返回布尔值表示归还是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全归还，确保归还流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"归还管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心归还接口\",\n            \"InChild\": \"为归还和预约管理提供标准化的归还服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"returnBook","op_source":"define","id":57,"source_code":"int returnBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 1);\n    return 1;\n}\n"}},"end":{"id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}}
{"type":"relationship","id":"124","label":"USES_TYPE","start":{"id":"58","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:370:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"归还图书\",\n    \"When\": \"用户归还图书时，如读者还书、预约归还\",\n    \"Why\": \"提供图书归还功能，恢复图书可用性，完成借阅流程\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否已借出\\n4. 更新图书可用性状态\\n5. 返回归还是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"AlreadyAvailable\": \"处理图书未借出的情况\",\n        \"ReturnStatus\": \"返回布尔值表示归还是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全归还，确保归还流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"归还管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心归还接口\",\n            \"InChild\": \"为归还和预约管理提供标准化的归还服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"returnBook","op_source":"define","id":57,"source_code":"int returnBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 1);\n    return 1;\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"125","label":"USES_TYPE","start":{"id":"36","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:406:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取当前图书数量\",\n    \"When\": \"需要查询图书馆藏书量时，如统计报表、容量管理\",\n    \"Why\": \"提供图书馆容量查询接口，支持系统管理和决策\",\n    \"How\": \"返回bookCount字段的值\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 如果有效，返回bookCount\\n3. 如果无效，返回0\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"DefaultValue\": \"无效指针时返回0\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆容量的查询，支持系统管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"统计功能\", \"管理功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心容量查询接口\",\n            \"InChild\": \"为统计和管理功能提供标准化的容量查询服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"getBookCount","op_source":"define","id":61,"source_code":"int getBookCount(const Library* library) {\n    return library != NULL ? library->bookCount : 0;\n}\n"}},"end":{"id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}}
{"type":"relationship","id":"126","label":"USES_TYPE","start":{"id":"41","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:436:12","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按标题比较两本图书\",\n    \"When\": \"在排序函数中使用\",\n    \"Why\": \"提供qsort函数所需的比较函数，支持图书标题的标准化排序\",\n    \"How\": \"使用strcmp比较图书标题\",\n    \"Logic\": \"1. 将void指针转换为Book指针\\n2. 使用strcmp比较两本图书的标题\\n3. 返回比较结果\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"假设输入指针有效（由qsort保证）\",\n        \"StringComparison\": \"使用标准库的字符串比较函数\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书标题的标准化比较，支持排序功能\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"排序功能\"],\n        \"AbstractionLevel\": \"低抽象，专注于比较操作\",\n        \"Role\": {\n            \"InParent\": \"作为排序功能的辅助函数\",\n            \"InChild\": \"为排序算法提供标准化的比较服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"compareByTitle","op_source":"define","id":62,"source_code":"static int compareByTitle(const void* a, const void* b) {\n    return strcmp((*(Book**)a)->title, (*(Book**)b)->title);\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"127","label":"USES_TYPE","start":{"id":"48","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:466:12","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按作者比较两本图书\",\n    \"When\": \"在排序函数中使用\",\n    \"Why\": \"提供qsort函数所需的比较函数，支持图书作者的标准化排序\",\n    \"How\": \"使用strcmp比较作者名字\",\n    \"Logic\": \"1. 将void指针转换为Book指针\\n2. 使用strcmp比较两本图书的作者\\n3. 返回比较结果\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"假设输入指针有效（由qsort保证）\",\n        \"StringComparison\": \"使用标准库的字符串比较函数\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书作者的标准化比较，支持排序功能\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"排序功能\"],\n        \"AbstractionLevel\": \"低抽象，专注于比较操作\",\n        \"Role\": {\n            \"InParent\": \"作为排序功能的辅助函数\",\n            \"InChild\": \"为排序算法提供标准化的比较服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"compareByAuthor","op_source":"define","id":64,"source_code":"static int compareByAuthor(const void* a, const void* b) {\n    return strcmp((*(Book**)a)->author, (*(Book**)b)->author);\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"128","label":"USES_TYPE","start":{"id":"59","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:497:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按标题排序图书\",\n    \"When\": \"需要按标题组织图书时，如目录整理、展示优化\",\n    \"Why\": \"提供图书排序功能，便于查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByTitle比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByTitle作为比较函数\\n4. 排序完成后数组按标题字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"目录管理功能\", \"展示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为目录管理和展示功能提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByTitle","op_source":"define","id":66,"source_code":"void sortBooksByTitle(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByTitle);\n}\n"}},"end":{"id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}}
{"type":"relationship","id":"129","label":"USES_TYPE","start":{"id":"59","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:497:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按标题排序图书\",\n    \"When\": \"需要按标题组织图书时，如目录整理、展示优化\",\n    \"Why\": \"提供图书排序功能，便于查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByTitle比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByTitle作为比较函数\\n4. 排序完成后数组按标题字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"目录管理功能\", \"展示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为目录管理和展示功能提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByTitle","op_source":"define","id":66,"source_code":"void sortBooksByTitle(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByTitle);\n}\n"}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"130","label":"USES_TYPE","start":{"id":"49","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:529:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按作者排序图书\",\n    \"When\": \"需要按作者组织图书时，如作者作品集整理、分类浏览\",\n    \"Why\": \"提供图书排序功能，便于按作者查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByAuthor比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByAuthor作为比较函数\\n4. 排序完成后数组按作者名字字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"作者作品管理功能\", \"分类浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为作者作品管理和分类浏览提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByAuthor","op_source":"define","id":69,"source_code":"void sortBooksByAuthor(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByAuthor);\n} "}},"end":{"id":"61","labels":["Type"],"properties":{"decl_loc":"","def_loc":"library.h:56:3","semantic_explanation":"","is_function_pointer":false,"kind":"","name":"Library","op_source":"use","is_definition":false,"id":1,"source_code":"} Library;\n"}}}
{"type":"relationship","id":"131","label":"USES_TYPE","start":{"id":"49","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:529:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按作者排序图书\",\n    \"When\": \"需要按作者组织图书时，如作者作品集整理、分类浏览\",\n    \"Why\": \"提供图书排序功能，便于按作者查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByAuthor比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByAuthor作为比较函数\\n4. 排序完成后数组按作者名字字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"作者作品管理功能\", \"分类浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为作者作品管理和分类浏览提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByAuthor","op_source":"define","id":69,"source_code":"void sortBooksByAuthor(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByAuthor);\n} "}},"end":{"id":"62","labels":["Type"],"properties":{"decl_loc":"","def_loc":"book.h:74:3","semantic_explanation":"","kind":"","is_function_pointer":false,"name":"Book","op_source":"use","is_definition":false,"id":2,"source_code":"} Book;\n"}}}
{"type":"relationship","id":"132","label":"USES_MACRO","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"133","label":"USES_MACRO","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"66","labels":["Macro"],"properties":{"def_loc":"book.h:59:9","semantic_explanation":"/* {\n    \"What\": \"定义ISBN号码的最大长度\",\n    \"When\": \"在创建新图书对象时使用\",\n    \"Why\": \"限制ISBN的长度以符合标准ISBN-13格式\",\n    \"How\": \"通过宏定义设置为13个字符\"\n} */\n","name":"MAX_ISBN_LEN","id":2,"source_code":"#define MAX_ISBN_LEN 13\n"}}}
{"type":"relationship","id":"134","label":"USES_MACRO","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"64","labels":["Macro"],"properties":{"def_loc":"book.h:43:9","semantic_explanation":"/* {\n    \"What\": \"定义图书标题的最大长度\",\n    \"When\": \"在创建新图书对象时使用\",\n    \"Why\": \"限制图书标题的长度以确保内存使用合理\",\n    \"How\": \"通过宏定义设置为100个字符\"\n} */\n","name":"MAX_TITLE_LEN","id":3,"source_code":"#define MAX_TITLE_LEN 100\n"}}}
{"type":"relationship","id":"135","label":"USES_MACRO","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"65","labels":["Macro"],"properties":{"def_loc":"book.h:51:9","semantic_explanation":"/* {\n    \"What\": \"定义作者名字的最大长度\",\n    \"When\": \"在创建新图书对象时使用\",\n    \"Why\": \"限制作者名字的长度以确保内存使用合理\",\n    \"How\": \"通过宏定义设置为50个字符\"\n} */\n","name":"MAX_AUTHOR_LEN","id":4,"source_code":"#define MAX_AUTHOR_LEN 50\n"}}}
{"type":"relationship","id":"136","label":"USES_MACRO","start":{"id":"38","labels":["Function"],"properties":{"decl_loc":"","def_loc":"main.c:111:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"图书管理系统的主函数，实现系统的核心功能\",\n    \"When\": \"系统启动时\",\n    \"Why\": \"作为程序的入口点，初始化系统并处理用户交互，实现图书管理的完整功能\",\n    \"How\": \"创建图书馆对象，初始化测试数据，进入主循环处理用户输入\",\n    \"Logic\": \"1. 创建并初始化图书馆对象\\n2. 添加测试数据\\n3. 进入主循环：\\n   - 显示菜单\\n   - 获取用户输入\\n   - 处理用户选择\\n   - 执行相应操作\\n4. 清理资源并退出\",\n    \"ErrorHandling\": {\n        \"Initialization\": \"检查图书馆创建是否成功\",\n        \"InputValidation\": \"验证用户输入的有效性\",\n        \"MemoryManagement\": \"确保资源正确释放\",\n        \"OperationStatus\": \"提供操作结果的反馈\"\n    },\n    \"Context\": {\n        \"Module\": \"系统主模块\",\n        \"DesignIntent\": \"实现完整的图书管理系统功能，提供用户友好的交互界面\",\n        \"Dependencies\": \"依赖library.h和book.h中的所有功能\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统顶层\",\n        \"ParentModule\": \"无\",\n        \"ChildModules\": [\"用户界面\", \"图书管理\", \"数据持久化\"],\n        \"AbstractionLevel\": \"最高抽象，负责整体系统协调\",\n        \"Role\": {\n            \"InParent\": \"作为整个系统的入口点和协调者\",\n            \"InChild\": \"为所有子系统提供统一的运行环境\"\n        }\n    }\n} */\n","ret_type":"int","name":"main","op_source":"define","id":3,"source_code":"int main(void) {\n    Library* library = createLibrary();\n    if (library == NULL) {\n        printf(\"系统初始化失败！\\n\");\n        return 1;\n    }\n    \n    // 添加测试数据\n    Book* book1 = createBook(\"C程序设计\", \"谭浩强\", \"9787111495482\", 39.00, 2015, 1);\n    Book* book2 = createBook(\"数据结构\", \"严蔚敏\", \"9787302147726\", 35.00, 2012, 1);\n    Book* book3 = createBook(\"算法导论\", \"Thomas H. Cormen\", \"9787111187776\", 89.00, 2009, 1);\n    \n    addBook(library, book1);\n    addBook(library, book2);\n    addBook(library, book3);\n    \n    int choice;\n    char isbn[MAX_ISBN_LEN];\n    char title[MAX_TITLE_LEN];\n    char author[MAX_AUTHOR_LEN];\n    float price;\n    int year;\n    \n    while (1) {\n        printMenu();\n        scanf(\"%d\", &choice);\n        getchar(); // 清除换行符\n        \n        switch (choice) {\n            case 1:\n                printf(\"请输入书名：\");\n                fgets(title, MAX_TITLE_LEN, stdin);\n                title[strcspn(title, \"\\n\")] = 0;\n                \n                printf(\"请输入作者：\");\n                fgets(author, MAX_AUTHOR_LEN, stdin);\n                author[strcspn(author, \"\\n\")] = 0;\n                \n                printf(\"请输入ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                printf(\"请输入价格：\");\n                scanf(\"%f\", &price);\n                getchar();\n                \n                printf(\"请输入出版年份：\");\n                scanf(\"%d\", &year);\n                getchar();\n                \n                Book* newBook = createBook(title, author, isbn, price, year, 1);\n                if (newBook != NULL && addBook(library, newBook)) {\n                    printf(\"添加成功！\\n\");\n                } else {\n                    printf(\"添加失败！\\n\");\n                    destroyBook(newBook);\n                }\n                break;\n                \n            case 2:\n                printf(\"请输入要删除的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (removeBook(library, isbn)) {\n                    printf(\"删除成功！\\n\");\n                } else {\n                    printf(\"删除失败！\\n\");\n                }\n                break;\n                \n            case 3:\n                printf(\"请输入要查找的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                Book* foundBook = findBookByISBN(library, isbn);\n                if (foundBook != NULL) {\n                    printBook(foundBook);\n                } else {\n                    printf(\"未找到该图书！\\n\");\n                }\n                break;\n                \n            case 4:\n                listAllBooks(library);\n                break;\n                \n            case 5:\n                printf(\"请输入要借阅的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (borrowBook(library, isbn)) {\n                    printf(\"借阅成功！\\n\");\n                } else {\n                    printf(\"借阅失败！\\n\");\n                }\n                break;\n                \n            case 6:\n                printf(\"请输入要归还的图书ISBN：\");\n                fgets(isbn, MAX_ISBN_LEN, stdin);\n                isbn[strcspn(isbn, \"\\n\")] = 0;\n                \n                if (returnBook(library, isbn)) {\n                    printf(\"归还成功！\\n\");\n                } else {\n                    printf(\"归还失败！\\n\");\n                }\n                break;\n                \n            case 7:\n                sortBooksByTitle(library);\n                printf(\"按标题排序完成！\\n\");\n                break;\n                \n            case 8:\n                sortBooksByAuthor(library);\n                printf(\"按作者排序完成！\\n\");\n                break;\n                \n            case 0:\n                printf(\"感谢使用！再见！\\n\");\n                destroyLibrary(library);\n                return 0;\n                \n            default:\n                printf(\"无效的选择，请重试！\\n\");\n        }\n        printf(\"\\n\");\n    }\n    \n    return 0;\n} "}},"end":{"id":"63","labels":["Macro"],"properties":{"def_loc":"/usr/include/stdio.h:153:9","semantic_explanation":"/* C89/C99 say they're macros.  Make them happy.  */\n","name":"stdin","id":5,"source_code":"#define stdin stdin\n"}}}
{"type":"relationship","id":"137","label":"USES_MACRO","start":{"id":"34","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:58:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书对象并初始化所有字段\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化所有字段，包括标题、作者、ISBN、价格、年份和可用性\",\n    \"Logic\": \"1. 使用malloc分配Book结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 使用strncpy安全复制字符串字段\\n4. 初始化数值字段\\n5. 设置默认可用性为1\\n6. 返回创建的图书对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"StringCopy\": \"使用strncpy确保字符串安全复制\",\n        \"NullTermination\": \"确保字符串正确终止\",\n        \"Initialization\": \"确保所有字段都被正确初始化\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配和字符串处理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"对象创建层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\"],\n        \"AbstractionLevel\": \"高抽象，作为图书对象的基础创建接口\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供标准化的对象创建服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"createBook","op_source":"define","id":23,"source_code":"Book* createBook(const char* title, const char* author, const char* isbn, float price, int year, int available) {\n    Book* book = (Book*)malloc(sizeof(Book));\n    if (book == NULL) return NULL;\n    \n    strncpy(book->title, title, MAX_TITLE_LEN - 1);\n    book->title[MAX_TITLE_LEN - 1] = '\\0';\n    \n    strncpy(book->author, author, MAX_AUTHOR_LEN - 1);\n    book->author[MAX_AUTHOR_LEN - 1] = '\\0';\n    \n    strncpy(book->isbn, isbn, MAX_ISBN_LEN - 1);\n    book->isbn[MAX_ISBN_LEN - 1] = '\\0';\n    \n    book->price = price;\n    book->year = year;\n    book->available = available;\n    \n    return book;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"138","label":"USES_MACRO","start":{"id":"34","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:58:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书对象并初始化所有字段\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化所有字段，包括标题、作者、ISBN、价格、年份和可用性\",\n    \"Logic\": \"1. 使用malloc分配Book结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 使用strncpy安全复制字符串字段\\n4. 初始化数值字段\\n5. 设置默认可用性为1\\n6. 返回创建的图书对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"StringCopy\": \"使用strncpy确保字符串安全复制\",\n        \"NullTermination\": \"确保字符串正确终止\",\n        \"Initialization\": \"确保所有字段都被正确初始化\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配和字符串处理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"对象创建层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\"],\n        \"AbstractionLevel\": \"高抽象，作为图书对象的基础创建接口\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供标准化的对象创建服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"createBook","op_source":"define","id":23,"source_code":"Book* createBook(const char* title, const char* author, const char* isbn, float price, int year, int available) {\n    Book* book = (Book*)malloc(sizeof(Book));\n    if (book == NULL) return NULL;\n    \n    strncpy(book->title, title, MAX_TITLE_LEN - 1);\n    book->title[MAX_TITLE_LEN - 1] = '\\0';\n    \n    strncpy(book->author, author, MAX_AUTHOR_LEN - 1);\n    book->author[MAX_AUTHOR_LEN - 1] = '\\0';\n    \n    strncpy(book->isbn, isbn, MAX_ISBN_LEN - 1);\n    book->isbn[MAX_ISBN_LEN - 1] = '\\0';\n    \n    book->price = price;\n    book->year = year;\n    book->available = available;\n    \n    return book;\n}\n"}},"end":{"id":"64","labels":["Macro"],"properties":{"def_loc":"book.h:43:9","semantic_explanation":"/* {\n    \"What\": \"定义图书标题的最大长度\",\n    \"When\": \"在创建新图书对象时使用\",\n    \"Why\": \"限制图书标题的长度以确保内存使用合理\",\n    \"How\": \"通过宏定义设置为100个字符\"\n} */\n","name":"MAX_TITLE_LEN","id":3,"source_code":"#define MAX_TITLE_LEN 100\n"}}}
{"type":"relationship","id":"139","label":"USES_MACRO","start":{"id":"34","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:58:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书对象并初始化所有字段\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化所有字段，包括标题、作者、ISBN、价格、年份和可用性\",\n    \"Logic\": \"1. 使用malloc分配Book结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 使用strncpy安全复制字符串字段\\n4. 初始化数值字段\\n5. 设置默认可用性为1\\n6. 返回创建的图书对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"StringCopy\": \"使用strncpy确保字符串安全复制\",\n        \"NullTermination\": \"确保字符串正确终止\",\n        \"Initialization\": \"确保所有字段都被正确初始化\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配和字符串处理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"对象创建层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\"],\n        \"AbstractionLevel\": \"高抽象，作为图书对象的基础创建接口\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供标准化的对象创建服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"createBook","op_source":"define","id":23,"source_code":"Book* createBook(const char* title, const char* author, const char* isbn, float price, int year, int available) {\n    Book* book = (Book*)malloc(sizeof(Book));\n    if (book == NULL) return NULL;\n    \n    strncpy(book->title, title, MAX_TITLE_LEN - 1);\n    book->title[MAX_TITLE_LEN - 1] = '\\0';\n    \n    strncpy(book->author, author, MAX_AUTHOR_LEN - 1);\n    book->author[MAX_AUTHOR_LEN - 1] = '\\0';\n    \n    strncpy(book->isbn, isbn, MAX_ISBN_LEN - 1);\n    book->isbn[MAX_ISBN_LEN - 1] = '\\0';\n    \n    book->price = price;\n    book->year = year;\n    book->available = available;\n    \n    return book;\n}\n"}},"end":{"id":"65","labels":["Macro"],"properties":{"def_loc":"book.h:51:9","semantic_explanation":"/* {\n    \"What\": \"定义作者名字的最大长度\",\n    \"When\": \"在创建新图书对象时使用\",\n    \"Why\": \"限制作者名字的长度以确保内存使用合理\",\n    \"How\": \"通过宏定义设置为50个字符\"\n} */\n","name":"MAX_AUTHOR_LEN","id":4,"source_code":"#define MAX_AUTHOR_LEN 50\n"}}}
{"type":"relationship","id":"140","label":"USES_MACRO","start":{"id":"34","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:58:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书对象并初始化所有字段\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化所有字段，包括标题、作者、ISBN、价格、年份和可用性\",\n    \"Logic\": \"1. 使用malloc分配Book结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 使用strncpy安全复制字符串字段\\n4. 初始化数值字段\\n5. 设置默认可用性为1\\n6. 返回创建的图书对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"StringCopy\": \"使用strncpy确保字符串安全复制\",\n        \"NullTermination\": \"确保字符串正确终止\",\n        \"Initialization\": \"确保所有字段都被正确初始化\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配和字符串处理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"对象创建层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\"],\n        \"AbstractionLevel\": \"高抽象，作为图书对象的基础创建接口\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供标准化的对象创建服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"createBook","op_source":"define","id":23,"source_code":"Book* createBook(const char* title, const char* author, const char* isbn, float price, int year, int available) {\n    Book* book = (Book*)malloc(sizeof(Book));\n    if (book == NULL) return NULL;\n    \n    strncpy(book->title, title, MAX_TITLE_LEN - 1);\n    book->title[MAX_TITLE_LEN - 1] = '\\0';\n    \n    strncpy(book->author, author, MAX_AUTHOR_LEN - 1);\n    book->author[MAX_AUTHOR_LEN - 1] = '\\0';\n    \n    strncpy(book->isbn, isbn, MAX_ISBN_LEN - 1);\n    book->isbn[MAX_ISBN_LEN - 1] = '\\0';\n    \n    book->price = price;\n    book->year = year;\n    book->available = available;\n    \n    return book;\n}\n"}},"end":{"id":"66","labels":["Macro"],"properties":{"def_loc":"book.h:59:9","semantic_explanation":"/* {\n    \"What\": \"定义ISBN号码的最大长度\",\n    \"When\": \"在创建新图书对象时使用\",\n    \"Why\": \"限制ISBN的长度以符合标准ISBN-13格式\",\n    \"How\": \"通过宏定义设置为13个字符\"\n} */\n","name":"MAX_ISBN_LEN","id":2,"source_code":"#define MAX_ISBN_LEN 13\n"}}}
{"type":"relationship","id":"141","label":"USES_MACRO","start":{"id":"42","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:105:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"销毁图书对象并释放内存\",\n    \"When\": \"图书对象不再需要时，如删除图书、系统关闭\",\n    \"Why\": \"防止内存泄漏，确保系统资源被正确释放，维护系统稳定性\",\n    \"How\": \"使用free函数释放图书对象占用的内存\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，释放内存\\n3. 不返回任何值，因为释放后指针已失效\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"安全处理NULL指针输入\",\n        \"MemoryLeak\": \"确保内存被正确释放\",\n        \"DanglingPointer\": \"调用者负责将指针设为NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书对象的资源清理，确保内存管理安全\",\n        \"Dependencies\": \"依赖标准库的内存释放函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"资源清理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"系统关闭处理\"],\n        \"AbstractionLevel\": \"高抽象，负责对象资源管理\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心资源清理接口\",\n            \"InChild\": \"为图书删除和系统关闭提供标准化的资源释放服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"destroyBook","op_source":"define","id":26,"source_code":"void destroyBook(Book* book) {\n    if (book != NULL) {\n        free(book);\n    }\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"142","label":"USES_MACRO","start":{"id":"43","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:138:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"打印图书的详细信息\",\n    \"When\": \"需要显示图书信息时，如查询结果、列表显示\",\n    \"Why\": \"提供标准化的图书信息展示功能，确保信息显示的一致性和完整性\",\n    \"How\": \"使用printf函数格式化输出所有字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，按格式输出所有字段\\n3. 使用条件运算符显示可用性状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"OutputError\": \"假设标准输出可用\",\n        \"Formatting\": \"使用统一的格式确保显示一致性\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书信息的标准化展示，提供完整的图书视图\",\n        \"Dependencies\": \"依赖标准库的输出函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"信息展示层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"查询功能\", \"列表显示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于信息展示\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心信息展示接口\",\n            \"InChild\": \"为查询和列表显示提供标准化的信息展示服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"printBook","op_source":"define","id":28,"source_code":"void printBook(const Book* book) {\n    if (book == NULL) {\n        printf(\"无效的图书对象！\\n\");\n        return;\n    }\n    \n    printf(\"书名：%s\\n\", book->title);\n    printf(\"作者：%s\\n\", book->author);\n    printf(\"ISBN：%s\\n\", book->isbn);\n    printf(\"价格：%.2f\\n\", book->price);\n    printf(\"出版年份：%d\\n\", book->year);\n    printf(\"状态：%s\\n\", book->available ? \"可借\" : \"已借出\");\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"143","label":"USES_MACRO","start":{"id":"50","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:179:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"更新图书价格\",\n    \"When\": \"需要修改图书价格时，如价格调整、折扣更新\",\n    \"Why\": \"提供图书价格修改接口，支持价格管理功能\",\n    \"How\": \"检查输入参数并更新价格字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 检查新价格是否有效\\n3. 更新价格字段\\n4. 返回更新是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"InvalidPrice\": \"检查价格是否为正数\",\n        \"UpdateStatus\": \"返回布尔值表示更新是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书价格的标准化更新，支持价格管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据更新层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"价格管理功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据更新\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心价格更新接口\",\n            \"InChild\": \"为价格管理和库存管理提供标准化的价格更新服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"updateBookPrice","op_source":"define","id":30,"source_code":"int updateBookPrice(Book* book, float newPrice) {\n    if (book == NULL || newPrice <= 0) {\n        return 0;\n    }\n    \n    book->price = newPrice;\n    return 1;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"144","label":"USES_MACRO","start":{"id":"35","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:215:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"更新图书出版年份\",\n    \"When\": \"需要修改图书出版年份时，如信息更正、版本更新\",\n    \"Why\": \"提供图书出版年份修改接口，支持信息管理功能\",\n    \"How\": \"检查输入参数并更新年份字段\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 检查新年份是否有效\\n3. 更新年份字段\\n4. 返回更新是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"InvalidYear\": \"检查年份是否在合理范围内\",\n        \"UpdateStatus\": \"返回布尔值表示更新是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书出版年份的标准化更新，支持信息管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据更新层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"信息管理功能\", \"版本管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据更新\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心年份更新接口\",\n            \"InChild\": \"为信息管理和版本管理提供标准化的年份更新服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"updateBookYear","op_source":"define","id":31,"source_code":"int updateBookYear(Book* book, int newYear) {\n    if (book == NULL || newYear <= 0 || newYear > 2024) {\n        return 0;\n    }\n    \n    book->year = newYear;\n    return 1;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"145","label":"USES_MACRO","start":{"id":"39","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:250:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"检查图书是否可借\",\n    \"When\": \"需要查询图书状态时，如借阅前检查、库存查询\",\n    \"Why\": \"提供图书状态查询接口，支持借阅管理功能\",\n    \"How\": \"检查输入指针并返回可用性状态\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回available字段的值\\n3. 如果无效，返回0\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"DefaultValue\": \"无效指针时返回0\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书状态的标准化查询，支持借阅管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"状态查询层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"库存查询功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问状态\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心状态查询接口\",\n            \"InChild\": \"为借阅管理和库存查询提供标准化的状态查询服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"isBookAvailable","op_source":"define","id":32,"source_code":"int isBookAvailable(const Book* book) {\n    return book != NULL ? book->available : 0;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"146","label":"USES_MACRO","start":{"id":"51","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:280:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"设置图书的可用性状态\",\n    \"When\": \"需要修改图书状态时，如借阅、归还、状态更新\",\n    \"Why\": \"提供图书状态修改接口，支持借阅管理功能\",\n    \"How\": \"检查输入参数并更新可用性状态\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 更新available字段\\n3. 返回更新是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"UpdateStatus\": \"返回布尔值表示更新是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书状态的标准化更新，支持借阅管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"状态管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"状态管理功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接修改状态\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心状态更新接口\",\n            \"InChild\": \"为借阅管理和状态管理提供标准化的状态更新服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"setBookAvailability","op_source":"define","id":33,"source_code":"int setBookAvailability(Book* book, int available) {\n    if (book == NULL) {\n        return 0;\n    }\n    \n    book->available = available;\n    return 1;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"147","label":"USES_MACRO","start":{"id":"44","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:315:13","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取图书标题\",\n    \"When\": \"需要访问图书标题时，如显示、搜索、排序\",\n    \"Why\": \"提供图书标题的只读访问接口，确保数据封装性\",\n    \"How\": \"检查输入指针并返回标题字符串\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回title字段\\n3. 如果无效，返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"ReturnValue\": \"无效指针时返回NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书标题的安全访问，支持信息展示和搜索\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"显示功能\", \"搜索功能\", \"排序功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心标题访问接口\",\n            \"InChild\": \"为显示、搜索和排序功能提供标准化的标题访问服务\"\n        }\n    }\n} */\n","ret_type":"const char *","name":"getBookTitle","op_source":"define","id":34,"source_code":"const char* getBookTitle(const Book* book) {\n    return book != NULL ? book->title : NULL;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"148","label":"USES_MACRO","start":{"id":"45","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:345:13","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取图书作者\",\n    \"When\": \"需要访问图书作者时，如显示、搜索、排序\",\n    \"Why\": \"提供图书作者的只读访问接口，确保数据封装性\",\n    \"How\": \"检查输入指针并返回作者字符串\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回author字段\\n3. 如果无效，返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"ReturnValue\": \"无效指针时返回NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书作者的安全访问，支持信息展示和搜索\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"显示功能\", \"搜索功能\", \"排序功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心作者访问接口\",\n            \"InChild\": \"为显示、搜索和排序功能提供标准化的作者访问服务\"\n        }\n    }\n} */\n","ret_type":"const char *","name":"getBookAuthor","op_source":"define","id":35,"source_code":"const char* getBookAuthor(const Book* book) {\n    return book != NULL ? book->author : NULL;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"149","label":"USES_MACRO","start":{"id":"52","labels":["Function"],"properties":{"decl_loc":"","def_loc":"book.c:375:13","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取图书ISBN\",\n    \"When\": \"需要访问图书ISBN时，如查找、标识、管理\",\n    \"Why\": \"提供图书ISBN的只读访问接口，确保数据封装性\",\n    \"How\": \"检查输入指针并返回ISBN字符串\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 如果有效，返回isbn字段\\n3. 如果无效，返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"ReturnValue\": \"无效指针时返回NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书管理模块\",\n        \"DesignIntent\": \"实现图书ISBN的安全访问，支持查找和管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"查找功能\", \"标识功能\", \"管理功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心ISBN访问接口\",\n            \"InChild\": \"为查找、标识和管理功能提供标准化的ISBN访问服务\"\n        }\n    }\n} */\n","ret_type":"const char *","name":"getBookISBN","op_source":"define","id":36,"source_code":"const char* getBookISBN(const Book* book) {\n    return book != NULL ? book->isbn : NULL;\n} "}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"150","label":"USES_MACRO","start":{"id":"53","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:62:10","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书馆对象并初始化所有字段\",\n    \"When\": \"系统初始化时，需要建立新的图书馆实例\",\n    \"Why\": \"提供统一的图书馆对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化图书数组和计数器\",\n    \"Logic\": \"1. 使用malloc分配Library结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 初始化bookCount为0\\n4. 使用循环将所有图书指针初始化为NULL\\n5. 返回创建的图书馆对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"Initialization\": \"确保所有字段都被正确初始化\",\n        \"NullPointer\": \"返回NULL表示创建失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统初始化层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"高抽象，作为整个系统的核心对象\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供基础设施\"\n        }\n    }\n} */\n","ret_type":"Library *","name":"createLibrary","op_source":"define","id":37,"source_code":"Library* createLibrary(void) {\n    Library* library = (Library*)malloc(sizeof(Library));\n    if (library == NULL) return NULL;\n    \n    library->bookCount = 0;\n    for (int i = 0; i < MAX_BOOKS; i++) {\n        library->books[i] = NULL;\n    }\n    \n    return library;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"151","label":"USES_MACRO","start":{"id":"53","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:62:10","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"创建新的图书馆对象并初始化所有字段\",\n    \"When\": \"系统初始化时，需要建立新的图书馆实例\",\n    \"Why\": \"提供统一的图书馆对象创建接口，确保所有必要字段都被正确初始化，为后续的图书管理操作提供基础\",\n    \"How\": \"动态分配内存，初始化图书数组和计数器\",\n    \"Logic\": \"1. 使用malloc分配Library结构体大小的内存\\n2. 检查内存分配是否成功，失败则返回NULL\\n3. 初始化bookCount为0\\n4. 使用循环将所有图书指针初始化为NULL\\n5. 返回创建的图书馆对象\",\n    \"ErrorHandling\": {\n        \"MemoryAllocation\": \"检查malloc返回值，失败时返回NULL\",\n        \"Initialization\": \"确保所有字段都被正确初始化\",\n        \"NullPointer\": \"返回NULL表示创建失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的创建和初始化，为图书管理提供基础设施\",\n        \"Dependencies\": \"依赖标准库的内存分配函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"系统初始化层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"借阅管理功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"高抽象，作为整个系统的核心对象\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心对象创建接口\",\n            \"InChild\": \"为所有图书相关操作提供基础设施\"\n        }\n    }\n} */\n","ret_type":"Library *","name":"createLibrary","op_source":"define","id":37,"source_code":"Library* createLibrary(void) {\n    Library* library = (Library*)malloc(sizeof(Library));\n    if (library == NULL) return NULL;\n    \n    library->bookCount = 0;\n    for (int i = 0; i < MAX_BOOKS; i++) {\n        library->books[i] = NULL;\n    }\n    \n    return library;\n}\n"}},"end":{"id":"67","labels":["Macro"],"properties":{"def_loc":"library.h:45:9","semantic_explanation":"/* {\n    \"What\": \"定义图书馆可以存储的最大图书数量\",\n    \"When\": \"在创建图书馆对象和添加新书时使用\",\n    \"Why\": \"限制图书馆容量以确保系统性能和内存使用合理\",\n    \"How\": \"通过宏定义设置为1000本\"\n} */\n","name":"MAX_BOOKS","id":20,"source_code":"#define MAX_BOOKS 1000\n"}}}
{"type":"relationship","id":"152","label":"USES_MACRO","start":{"id":"46","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:101:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"销毁图书馆对象并释放所有资源\",\n    \"When\": \"图书馆对象不再需要时，如系统关闭、重置图书馆\",\n    \"Why\": \"防止内存泄漏，确保所有资源被正确释放，维护系统稳定性\",\n    \"How\": \"递归释放所有图书对象和图书馆对象的内存\",\n    \"Logic\": \"1. 检查输入指针是否为NULL\\n2. 遍历所有图书对象\\n3. 调用destroyBook释放每本图书\\n4. 释放图书馆对象本身\\n5. 不返回任何值，因为释放后指针已失效\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"安全处理NULL指针输入\",\n        \"MemoryLeak\": \"确保所有子对象内存被正确释放\",\n        \"DanglingPointer\": \"调用者负责将指针设为NULL\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆对象的资源清理，确保内存管理安全\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"资源清理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书管理功能\", \"系统关闭处理\"],\n        \"AbstractionLevel\": \"高抽象，负责整体资源管理\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心资源清理接口\",\n            \"InChild\": \"为系统关闭和重置提供标准化的资源释放服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"destroyLibrary","op_source":"define","id":39,"source_code":"void destroyLibrary(Library* library) {\n    if (library == NULL) return;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        destroyBook(library->books[i]);\n    }\n    free(library);\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"153","label":"USES_MACRO","start":{"id":"54","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:137:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"添加新书到图书馆\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书添加接口，确保图书馆容量限制，维护数据一致性\",\n    \"How\": \"检查容量限制，如果未满则添加图书并更新计数器\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 检查图书馆是否已满\\n3. 将图书添加到数组末尾\\n4. 更新图书计数\\n5. 返回添加是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"CapacityLimit\": \"检查是否超过最大图书数量限制\",\n        \"AddStatus\": \"返回布尔值表示添加是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全添加，确保数据完整性\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书入库功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据添加操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据添加接口\",\n            \"InChild\": \"为图书入库和库存管理提供标准化的添加服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"addBook","op_source":"define","id":42,"source_code":"int addBook(Library* library, Book* book) {\n    if (library == NULL || book == NULL || library->bookCount >= MAX_BOOKS) {\n        return 0;\n    }\n    \n    library->books[library->bookCount++] = book;\n    return 1;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"154","label":"USES_MACRO","start":{"id":"54","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:137:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"添加新书到图书馆\",\n    \"When\": \"需要添加新书到系统时，如新书入库、图书补充\",\n    \"Why\": \"提供统一的图书添加接口，确保图书馆容量限制，维护数据一致性\",\n    \"How\": \"检查容量限制，如果未满则添加图书并更新计数器\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 检查图书馆是否已满\\n3. 将图书添加到数组末尾\\n4. 更新图书计数\\n5. 返回添加是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"CapacityLimit\": \"检查是否超过最大图书数量限制\",\n        \"AddStatus\": \"返回布尔值表示添加是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全添加，确保数据完整性\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书入库功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据添加操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据添加接口\",\n            \"InChild\": \"为图书入库和库存管理提供标准化的添加服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"addBook","op_source":"define","id":42,"source_code":"int addBook(Library* library, Book* book) {\n    if (library == NULL || book == NULL || library->bookCount >= MAX_BOOKS) {\n        return 0;\n    }\n    \n    library->books[library->bookCount++] = book;\n    return 1;\n}\n"}},"end":{"id":"67","labels":["Macro"],"properties":{"def_loc":"library.h:45:9","semantic_explanation":"/* {\n    \"What\": \"定义图书馆可以存储的最大图书数量\",\n    \"When\": \"在创建图书馆对象和添加新书时使用\",\n    \"Why\": \"限制图书馆容量以确保系统性能和内存使用合理\",\n    \"How\": \"通过宏定义设置为1000本\"\n} */\n","name":"MAX_BOOKS","id":20,"source_code":"#define MAX_BOOKS 1000\n"}}}
{"type":"relationship","id":"155","label":"USES_MACRO","start":{"id":"55","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:174:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"从图书馆移除图书\",\n    \"When\": \"需要删除图书时，如图书报废、信息错误\",\n    \"Why\": \"提供统一的图书删除接口，确保安全移除，维护数据一致性\",\n    \"How\": \"通过ISBN查找图书，移除后重新排列数组\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历查找匹配的ISBN\\n3. 找到后释放图书对象\\n4. 重新排列数组以保持连续性\\n5. 更新图书计数\\n6. 返回删除是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"处理未找到图书的情况\",\n        \"ArrayReorganization\": \"确保数组连续性\",\n        \"DeleteStatus\": \"返回布尔值表示删除是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全删除，确保数据一致性\",\n        \"Dependencies\": \"依赖book.h中的destroyBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据管理层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"图书删除功能\", \"库存管理功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据删除操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心数据删除接口\",\n            \"InChild\": \"为图书删除和库存管理提供标准化的删除服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"removeBook","op_source":"define","id":43,"source_code":"int removeBook(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return 0;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            destroyBook(library->books[i]);\n            for (int j = i; j < library->bookCount - 1; j++) {\n                library->books[j] = library->books[j + 1];\n            }\n            library->bookCount--;\n            return 1;\n        }\n    }\n    return 0;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"156","label":"USES_MACRO","start":{"id":"40","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:217:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过ISBN查找图书\",\n    \"When\": \"需要查找特定图书时，如借阅、归还、查询\",\n    \"Why\": \"提供快速查找接口，ISBN是唯一标识符，确保查找的准确性和效率\",\n    \"How\": \"遍历图书数组查找匹配的ISBN\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strcmp比较ISBN\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringComparison\": \"使用安全的字符串比较\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的快速查找，支持各种业务操作\",\n        \"Dependencies\": \"依赖标准库的字符串比较函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅功能\", \"归还功能\", \"查询功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心查找接口\",\n            \"InChild\": \"为借阅、归还和查询功能提供标准化的查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByISBN","op_source":"define","id":46,"source_code":"Book* findBookByISBN(Library* library, const char* isbn) {\n    if (library == NULL || isbn == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strcmp(library->books[i]->isbn, isbn) == 0) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"157","label":"USES_MACRO","start":{"id":"56","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:255:7","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"通过标题查找图书\",\n    \"When\": \"需要按标题搜索图书时，如模糊查询、分类浏览\",\n    \"Why\": \"提供按标题搜索的接口，支持模糊查找，提高用户查询便利性\",\n    \"How\": \"使用strstr函数进行子串匹配\",\n    \"Logic\": \"1. 检查输入参数的有效性\\n2. 遍历所有图书\\n3. 使用strstr进行子串匹配\\n4. 找到匹配时返回图书对象\\n5. 未找到时返回NULL\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"NotFound\": \"未找到时返回NULL\",\n        \"StringMatching\": \"使用安全的字符串匹配\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的模糊查找，支持用户友好的搜索\",\n        \"Dependencies\": \"依赖标准库的字符串匹配函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"搜索功能\", \"浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于模糊查找操作\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心模糊查找接口\",\n            \"InChild\": \"为搜索和浏览功能提供标准化的模糊查找服务\"\n        }\n    }\n} */\n","ret_type":"Book *","name":"findBookByTitle","op_source":"define","id":48,"source_code":"Book* findBookByTitle(Library* library, const char* title) {\n    if (library == NULL || title == NULL) return NULL;\n    \n    for (int i = 0; i < library->bookCount; i++) {\n        if (strstr(library->books[i]->title, title) != NULL) {\n            return library->books[i];\n        }\n    }\n    return NULL;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"158","label":"USES_MACRO","start":{"id":"47","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:293:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"列出所有图书\",\n    \"When\": \"需要显示图书馆所有藏书时，如库存盘点、目录浏览\",\n    \"Why\": \"提供完整的图书列表展示功能，支持系统管理和用户浏览\",\n    \"How\": \"遍历并打印所有图书信息，包括总数统计\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 输出总藏书量信息\\n3. 遍历所有图书\\n4. 为每本图书输出序号\\n5. 调用printBook显示详细信息\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"OutputError\": \"假设标准输出可用\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书列表的标准化展示，提供完整的库存视图\",\n        \"Dependencies\": \"依赖book.h中的printBook函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"信息展示层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"库存管理功能\", \"用户界面功能\"],\n        \"AbstractionLevel\": \"较高抽象，专注于信息展示\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心列表展示接口\",\n            \"InChild\": \"为库存管理和用户界面提供标准化的列表展示服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"listAllBooks","op_source":"define","id":50,"source_code":"void listAllBooks(const Library* library) {\n    if (library == NULL) {\n        printf(\"图书馆不存在\\n\");\n        return;\n    }\n    \n    printf(\"图书馆藏书列表（共%d本）：\\n\", library->bookCount);\n    for (int i = 0; i < library->bookCount; i++) {\n        printf(\"\\n--- 第%d本书 ---\\n\", i + 1);\n        printBook(library->books[i]);\n    }\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"159","label":"USES_MACRO","start":{"id":"57","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:333:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"借出图书\",\n    \"When\": \"用户需要借书时，如读者借阅、预约取书\",\n    \"Why\": \"提供图书借阅功能，管理图书可用性，支持图书馆核心业务\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否可用\\n4. 更新图书可用性状态\\n5. 返回借阅是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"NotAvailable\": \"处理图书不可借的情况\",\n        \"BorrowStatus\": \"返回布尔值表示借阅是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全借阅，确保借阅流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"借阅管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心借阅接口\",\n            \"InChild\": \"为借阅和预约管理提供标准化的借阅服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"borrowBook","op_source":"define","id":53,"source_code":"int borrowBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || !isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 0);\n    return 1;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"160","label":"USES_MACRO","start":{"id":"58","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:370:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"归还图书\",\n    \"When\": \"用户归还图书时，如读者还书、预约归还\",\n    \"Why\": \"提供图书归还功能，恢复图书可用性，完成借阅流程\",\n    \"How\": \"查找图书并更新其可用性状态\",\n    \"Logic\": \"1. 通过ISBN查找图书\\n2. 检查图书是否存在\\n3. 检查图书是否已借出\\n4. 更新图书可用性状态\\n5. 返回归还是否成功的状态\",\n    \"ErrorHandling\": {\n        \"NotFound\": \"处理图书不存在的情况\",\n        \"AlreadyAvailable\": \"处理图书未借出的情况\",\n        \"ReturnStatus\": \"返回布尔值表示归还是否成功\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的安全归还，确保归还流程的可靠性\",\n        \"Dependencies\": \"依赖book.h中的状态管理函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"业务操作层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"归还管理功能\", \"预约管理功能\"],\n        \"AbstractionLevel\": \"高抽象，专注于业务逻辑\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心归还接口\",\n            \"InChild\": \"为归还和预约管理提供标准化的归还服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"returnBook","op_source":"define","id":57,"source_code":"int returnBook(Library* library, const char* isbn) {\n    Book* book = findBookByISBN(library, isbn);\n    if (book == NULL || isBookAvailable(book)) {\n        return 0;\n    }\n    \n    setBookAvailability(book, 1);\n    return 1;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"161","label":"USES_MACRO","start":{"id":"36","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:406:5","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"获取当前图书数量\",\n    \"When\": \"需要查询图书馆藏书量时，如统计报表、容量管理\",\n    \"Why\": \"提供图书馆容量查询接口，支持系统管理和决策\",\n    \"How\": \"返回bookCount字段的值\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 如果有效，返回bookCount\\n3. 如果无效，返回0\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"DefaultValue\": \"无效指针时返回0\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书馆容量的查询，支持系统管理\",\n        \"Dependencies\": \"无外部依赖\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据访问层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"统计功能\", \"管理功能\"],\n        \"AbstractionLevel\": \"较低抽象，直接访问数据\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心容量查询接口\",\n            \"InChild\": \"为统计和管理功能提供标准化的容量查询服务\"\n        }\n    }\n} */\n","ret_type":"int","name":"getBookCount","op_source":"define","id":61,"source_code":"int getBookCount(const Library* library) {\n    return library != NULL ? library->bookCount : 0;\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"162","label":"USES_MACRO","start":{"id":"59","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:497:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按标题排序图书\",\n    \"When\": \"需要按标题组织图书时，如目录整理、展示优化\",\n    \"Why\": \"提供图书排序功能，便于查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByTitle比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByTitle作为比较函数\\n4. 排序完成后数组按标题字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"目录管理功能\", \"展示功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为目录管理和展示功能提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByTitle","op_source":"define","id":66,"source_code":"void sortBooksByTitle(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByTitle);\n}\n"}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
{"type":"relationship","id":"163","label":"USES_MACRO","start":{"id":"49","labels":["Function"],"properties":{"decl_loc":"","def_loc":"library.c:529:6","is_static":false,"semantic_explanation":"/* {\n    \"What\": \"按作者排序图书\",\n    \"When\": \"需要按作者组织图书时，如作者作品集整理、分类浏览\",\n    \"Why\": \"提供图书排序功能，便于按作者查找和管理，提高系统可用性\",\n    \"How\": \"使用qsort函数和compareByAuthor比较函数进行排序\",\n    \"Logic\": \"1. 检查输入指针的有效性\\n2. 使用qsort函数进行排序\\n3. 使用compareByAuthor作为比较函数\\n4. 排序完成后数组按作者名字字母顺序排列\",\n    \"ErrorHandling\": {\n        \"NullPointer\": \"检查并处理NULL指针输入\",\n        \"EmptyLibrary\": \"处理空图书馆的情况\",\n        \"SortError\": \"假设qsort不会失败\"\n    },\n    \"Context\": {\n        \"Module\": \"图书馆管理模块\",\n        \"DesignIntent\": \"实现图书的标准化排序，提高系统可用性\",\n        \"Dependencies\": \"依赖标准库的排序函数\"\n    },\n    \"Hierarchy\": {\n        \"Level\": \"数据组织层\",\n        \"ParentModule\": \"图书管理系统\",\n        \"ChildModules\": [\"作者作品管理功能\", \"分类浏览功能\"],\n        \"AbstractionLevel\": \"中等抽象，专注于数据组织\",\n        \"Role\": {\n            \"InParent\": \"作为图书管理系统的核心排序接口\",\n            \"InChild\": \"为作者作品管理和分类浏览提供标准化的排序服务\"\n        }\n    }\n} */\n","ret_type":"void","name":"sortBooksByAuthor","op_source":"define","id":69,"source_code":"void sortBooksByAuthor(Library* library) {\n    if (library == NULL) return;\n    qsort(library->books, library->bookCount, sizeof(Book*), compareByAuthor);\n} "}},"end":{"id":"68","labels":["Macro"],"properties":{"def_loc":"/usr/lib/llvm-18/lib/clang/18/include/__stddef_null.h:26:9","semantic_explanation":"","name":"NULL","id":1,"source_code":"#define NULL ((void*)0)\n"}}}
